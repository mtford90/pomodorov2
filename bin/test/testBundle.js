/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId])
/******/ 			return installedModules[moduleId].exports;
/******/
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			exports: {},
/******/ 			id: moduleId,
/******/ 			loaded: false
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.loaded = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(1);
	__webpack_require__(3);

/***/ },
/* 1 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(5);
	mocha.setup("bdd");
	__webpack_require__(2)
	__webpack_require__(6);
	if(false) {
		module.hot.accept();
		module.hot.dispose(function() {
			mocha.suite.suites.length = 0;
			var stats = document.getElementById('mocha-stats');
			var report = document.getElementById('mocha-report');
			stats.parentNode.removeChild(stats);
			report.parentNode.removeChild(report);
		});
	}

/***/ },
/* 2 */
/***/ function(module, exports, __webpack_require__) {

	var chai = __webpack_require__(9),
	    assert = chai.assert;
	
	
	
	
	
	describe('RightNavbarPlaceholder', function () {
	    it('123', function () {
	    });
	    it('456', function () {
	    });
	});

/***/ },
/* 3 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(5);
	mocha.setup("bdd");
	__webpack_require__(4)
	__webpack_require__(6);
	if(false) {
		module.hot.accept();
		module.hot.dispose(function() {
			mocha.suite.suites.length = 0;
			var stats = document.getElementById('mocha-stats');
			var report = document.getElementById('mocha-report');
			stats.parentNode.removeChild(stats);
			report.parentNode.removeChild(report);
		});
	}

/***/ },
/* 4 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Tests for the siesta powered pomodoro timer
	 */
	
	var chai = __webpack_require__(9),
	    assert = chai.assert,
	    data = __webpack_require__(7),
	    Round = data.Round,
	    PomodoroTimer = __webpack_require__(8);
	
	describe('pomodoro', function () {
	    var timer;
	
	    beforeEach(function (done) {
	        siesta.resetData(function () {
	            console.log('???');
	            PomodoroTimer.one()
	                .then(function (_timer) {
	                    assert.ok(_timer, 'Should get singleton instance');
	                    timer = _timer;
	                    done();
	                })
	                .catch(done);
	        });
	    });
	
	    it('has config', function (done) {
	        data.PomodoroConfig.one()
	            .then(function (config) {
	                assert.equal(config, timer.pomodoroConfig);
	                done();
	            }).catch(done);
	    });
	
	    describe('defaults', function () {
	        it('25min default', function () {
	            assert.equal(timer.seconds, timer.pomodoroConfig.pomodoroLength * 60);
	        });
	        it('no rounds completed', function () {
	            assert.equal(timer.completed, 0);
	        });
	        it('starts off in Pomodoro state', function () {
	            assert.equal(timer.state, PomodoroTimer.State.Pomodoro);
	        })
	    });
	
	    it('running property', function () {
	        assert.notOk(timer.running);
	        timer.start();
	        assert.ok(timer.running);
	        timer.stop();
	        assert.notOk(timer.running);
	    });
	
	    it('timer works', function (done) {
	        timer.listenOnce(function (n) {
	            assert.equal(n.type, 'start');
	            timer.stop();
	            done();
	        });
	        timer.start();
	    });
	
	    describe('transitions', function () {
	
	        describe('transition to short break', function () {
	            beforeEach(function (done) {
	                timer.seconds = 0;
	                var cancelListen;
	                cancelListen = timer.listen(function (n) {
	                    if (n.field == 'state') {
	                        cancelListen();
	                        done();
	                    }
	                });
	                timer.start();
	            });
	            afterEach(function () {
	                timer.stop();
	            });
	            it('should increment completed', function () {
	                assert.equal(timer.completed, 1);
	            });
	            it('should reset seconds', function () {
	                assert.equal(timer.seconds, timer.pomodoroConfig.shortBreakLength * 60);
	            });
	            it('should now be in short break state', function () {
	                assert.equal(timer.state, PomodoroTimer.State.ShortBreak);
	            });
	        });
	        describe('transition from short break', function () {
	            beforeEach(function (done) {
	                data.Round.graph({date: new Date()})
	                    .then(function () {
	                        timer.state = PomodoroTimer.State.ShortBreak;
	                        timer.seconds = 0;
	                        var cancelListen;
	                        cancelListen = timer.listen(function (n) {
	                            if (n.field == 'state') {
	                                cancelListen();
	                                done();
	                            }
	                        });
	                        timer.start();
	                    }).catch(done);
	
	            });
	            afterEach(function () {
	                timer.stop();
	            });
	            it('completed shouls stay the same', function () {
	                assert.equal(timer.completed, 1);
	            });
	            it('should reset seconds', function () {
	                assert.equal(timer.seconds, timer.pomodoroConfig.pomodoroLength * 60);
	            });
	            it('should now be in pomodoro state', function () {
	                assert.equal(timer.state, PomodoroTimer.State.Pomodoro);
	            });
	        });
	        describe('transition to long break', function () {
	            describe('first time', function () {
	                beforeEach(function (done) {
	                    Round.graph(_.times(timer.pomodoroConfig.roundLength - 1, function () {
	                        return {date: new Date()}
	                    })).then(function () {
	                        timer.state = PomodoroTimer.State.Pomodoro;
	                        timer.seconds = 0;
	                        var cancelListen;
	                        cancelListen = timer.listen(function (n) {
	                            if (n.field == 'state') {
	                                cancelListen();
	                                done();
	                            }
	                        });
	                        timer.start();
	                    }).catch(done);
	                });
	                afterEach(function () {
	                    timer.stop();
	                });
	                it('completed should increment', function () {
	                    assert.equal(timer.completed, timer.pomodoroConfig.roundLength);
	                });
	                it('should reset seconds', function () {
	                    assert.equal(timer.seconds, timer.pomodoroConfig.longBreakLength * 60);
	                });
	                it('should now be in long break state', function () {
	                    assert.equal(timer.state, PomodoroTimer.State.LongBreak);
	                });
	            });
	            describe('second time', function () {
	                beforeEach(function (done) {
	                    Round.graph(_.times((timer.pomodoroConfig.roundLength * 2) - 1, function () {
	                        return {date: new Date()}
	                    })).then(function () {
	                        timer.state = PomodoroTimer.State.Pomodoro;
	                        timer.seconds = 0;
	                        var cancelListen;
	                        cancelListen = timer.listen(function (n) {
	                            if (n.field == 'state') {
	                                cancelListen();
	                                done();
	                            }
	                        });
	                        timer.start();
	                    }).catch(done);
	                });
	                afterEach(function () {
	                    timer.stop();
	                });
	                it('completed should increment', function () {
	                    assert.equal(timer.completed, timer.pomodoroConfig.roundLength * 2);
	                });
	                it('should reset seconds', function () {
	                    assert.equal(timer.seconds, timer.pomodoroConfig.longBreakLength * 60);
	                });
	                it('should now be in long break state', function () {
	                    assert.equal(timer.state, PomodoroTimer.State.LongBreak);
	                });
	            });
	        });
	        describe('transition from long break', function () {
	            beforeEach(function (done) {
	                Round.graph(_.times(timer.pomodoroConfig.roundLength * 2, function () {
	                    return {date: new Date()}
	                })).then(function () {
	                    timer.state = PomodoroTimer.State.LongBreak;
	                    timer.seconds = 0;
	                    var cancelListen;
	                    cancelListen = timer.listen(function (n) {
	                        if (n.field == 'state') {
	                            cancelListen();
	                            done();
	                        }
	                    });
	                    timer.start();
	                });
	            });
	            afterEach(function () {
	                timer.stop();
	            });
	            it('completetd shouls stay the same', function () {
	                assert.equal(timer.completed, timer.pomodoroConfig.roundLength * 2);
	            });
	            it('should reset seconds', function () {
	                assert.equal(timer.seconds, timer.pomodoroConfig.pomodoroLength * 60);
	            });
	            it('should now be in pomodoro state', function () {
	                assert.equal(timer.state, PomodoroTimer.State.Pomodoro);
	            });
	        });
	    });
	
	    describe('settings changes', function () {
	        describe('pomodoro length change', function () {
	            it('if paused and maxed, should change the value', function (done) {
	                timer.stop();
	                var newPomodoroLength = 30;
	                timer.pomodoroConfig.pomodoroLength = newPomodoroLength;
	                siesta.notify(function () {
	                    assert.equal(timer.seconds, newPomodoroLength * 60);
	                    done();
	                });
	            });
	            it('if started and maxed, should change the value', function (done) {
	                timer.start();
	                var newPomodoroLength = 30;
	                timer.pomodoroConfig.pomodoroLength = newPomodoroLength;
	                siesta.notify(function () {
	                    assert.equal(timer.seconds, newPomodoroLength * 60);
	                    timer.stop();
	                    done();
	                });
	            });
	            it('if paused and not maxed, should not change the value', function (done) {
	                timer.seconds = 10;
	                timer.stop();
	                timer.pomodoroConfig.pomodoroLength = 30;
	                siesta.notify(function () {
	                    assert.equal(timer.seconds, 10);
	                    done();
	                });
	            });
	            it('if started and not maxed, should not change the value', function (done) {
	                timer.seconds = 10;
	                timer.start();
	                timer.pomodoroConfig.pomodoroLength = 30;
	                siesta.notify(function () {
	                    assert.equal(timer.seconds, 10);
	                    timer.stop();
	                    done();
	                });
	            });
	            it('if paused, maxed and not in a pomodoro state, should NOT change the value', function (done) {
	                timer.stop();
	                timer.state = PomodoroTimer.State.ShortBreak;
	                timer.pomodoroConfig.pomodoroLength = 30;
	                siesta.notify(function () {
	                    assert.equal(timer.seconds, 25 * 60);
	                    done();
	                });
	            });
	        });
	        describe('long break length change', function () {
	            it('if paused and maxed, should change the value', function (done) {
	                timer.state = PomodoroTimer.State.LongBreak;
	                timer.seconds = timer.pomodoroConfig.longBreakLength * 60;
	                timer.stop();
	                var newLongBreakLength = 30;
	                timer.pomodoroConfig.longBreakLength = newLongBreakLength;
	                siesta.notify(function () {
	                    assert.equal(timer.seconds, newLongBreakLength * 60);
	                    done();
	                });
	            });
	            it('if started and maxed, should change the value', function (done) {
	                timer.state = PomodoroTimer.State.LongBreak;
	                timer.seconds = timer.pomodoroConfig.longBreakLength * 60;
	                timer.start();
	                var newLength = 30;
	                timer.pomodoroConfig.longBreakLength = newLength;
	                siesta.notify(function () {
	                    assert.equal(timer.seconds, newLength * 60);
	                    timer.stop();
	                    done();
	                });
	            });
	            it('if paused and not maxed, should not change the value', function (done) {
	                timer.state = PomodoroTimer.State.LongBreak;
	                timer.seconds = 10;
	                timer.stop();
	                timer.pomodoroConfig.longBreakLength = 30;
	                siesta.notify(function () {
	                    assert.equal(timer.seconds, 10);
	                    done();
	                });
	            });
	            it('if started and not maxed, should not change the value', function (done) {
	                timer.state = PomodoroTimer.State.LongBreak;
	                timer.seconds = 10;
	                timer.start();
	                timer.pomodoroConfig.longBreakLength = 30;
	                siesta.notify(function () {
	                    assert.equal(timer.seconds, 10);
	                    timer.stop();
	                    done();
	                });
	            });
	            it('if paused, maxed and not in a long break state, should NOT change the value', function (done) {
	                timer.seconds = timer.pomodoroConfig.longBreakLength * 60;
	                timer.state = PomodoroTimer.State.ShortBreak;
	                timer.stop();
	                timer.pomodoroConfig.longBreakLength = 30;
	                siesta.notify(function () {
	                    assert.equal(timer.seconds, 15 * 60);
	                    done();
	                });
	            });
	
	        });
	        describe('short break length change', function () {
	            it('if paused and maxed, should change the value', function (done) {
	                timer.state = PomodoroTimer.State.ShortBreak;
	                timer.seconds = timer.pomodoroConfig.shortBreakLength * 60;
	                timer.stop();
	                var newLength = 30;
	                timer.pomodoroConfig.shortBreakLength = newLength;
	                siesta.notify(function () {
	                    assert.equal(timer.seconds, newLength * 60);
	                    done();
	                });
	            });
	            it('if started and maxed, should change the value', function (done) {
	                timer.state = PomodoroTimer.State.ShortBreak;
	                timer.seconds = timer.pomodoroConfig.shortBreakLength * 60;
	                timer.start();
	                var newLength = 30;
	                timer.pomodoroConfig.shortBreakLength = newLength;
	                siesta.notify(function () {
	                    assert.equal(timer.seconds, newLength * 60);
	                    timer.stop();
	                    done();
	                });
	            });
	            it('if paused and not maxed, should not change the value', function (done) {
	                timer.state = PomodoroTimer.State.ShortBreak;
	                timer.seconds = 10;
	                timer.stop();
	                timer.pomodoroConfig.shortBreakLength = 30;
	                siesta.notify(function () {
	                    assert.equal(timer.seconds, 10);
	                    done();
	                });
	            });
	            it('if started and not maxed, should not change the value', function (done) {
	                timer.state = PomodoroTimer.State.ShortBreak;
	                timer.seconds = 10;
	                timer.start();
	                timer.pomodoroConfig.shortBreakLength = 30;
	                siesta.notify(function () {
	                    assert.equal(timer.seconds, 10);
	                    timer.stop();
	                    done();
	                });
	            });
	            it('if paused, maxed and not in a long break state, should NOT change the value', function (done) {
	                timer.seconds = timer.pomodoroConfig.shortBreakLength * 60;
	                timer.state = PomodoroTimer.State.LongBreak;
	                timer.stop();
	                timer.pomodoroConfig.shortBreakLength = 30;
	                siesta.notify(function () {
	                    assert.equal(timer.seconds, 5 * 60);
	                    done();
	                });
	            });
	
	        });
	
	    });
	
	});

/***/ },
/* 5 */
/***/ function(module, exports, __webpack_require__) {

	document.write("<div id=\"mocha\"></div>");
	
	__webpack_require__(11);
	__webpack_require__(13);


/***/ },
/* 6 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {process.nextTick(function() {
		delete __webpack_require__.c[module.id];
		if(typeof window !== "undefined" && window.mochaPhantomJS)
			mochaPhantomJS.run();
		else
			mocha.run();
	});
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 7 */
/***/ function(module, exports, __webpack_require__) {

	var q = __webpack_require__(19),
	    _ = __webpack_require__(20),
	    siesta = __webpack_require__(21);
	
	__webpack_require__(22);
	
	
	siesta.autosave = true;
	siesta.autosaveDuration = 1000;
	
	var Pomodoro = siesta.collection('Pomodoro');
	
	var Type = {
	    Task: 'Task'
	};
	
	DEFAULT_COLOURS = {
	    primary: '#df423c',
	    shortBreak: '#37a2c4',
	    longBreak: '#292f37'
	};
	
	
	
	var Task = Pomodoro.model(Type.Task, {
	        attributes: [
	            'title',
	            'description',
	            'completed',
	            'editing',
	            'index'
	        ]
	    }),
	    Round = Pomodoro.model('Round', {
	        attributes: ['date', 'time'],
	        statics: {
	            todaysRounds: function () {
	                return this.reactiveQuery({date__isToday: true});
	            }
	        }
	    }),
	    Tag = Pomodoro.model('Tag', {
	        id: 'text'
	    }),
	    Config = Pomodoro.model('Config', {
	        relationships: {
	            pomodoro: {model: 'PomodoroConfig'},
	            colours: {model: 'ColourConfig'}
	        },
	        singleton: true
	    }),
	    ColourConfig = Pomodoro.model('ColourConfig', {
	        attributes: [
	            {
	                name: 'primary',
	                default: DEFAULT_COLOURS.primary
	            },
	            {
	                name: 'shortBreak',
	                default: DEFAULT_COLOURS.shortBreak
	            },
	            {
	                name: 'longBreak',
	                default: DEFAULT_COLOURS.longBreak
	            }
	        ],
	        singleton: true,
	        methods: {
	            resetToDefaults: function () {
	                _.extend(this, DEFAULT_COLOURS);
	            }
	        }
	    }),
	
	    PomodoroConfig = Pomodoro.model('PomodoroConfig', {
	        attributes: [
	            {
	                name: 'pomodoroLength',
	                default: 25
	            },
	            {
	                name: 'longBreakLength',
	                default: 15
	            },
	            {
	                name: 'shortBreakLength',
	                default: 5
	            },
	            {
	                name: 'roundLength',
	                default: 4
	            },
	            {
	                name: 'pomodoroTarget',
	                default: 8
	            }
	        ],
	        singleton: true
	    }),
	    AsanaConfig = Pomodoro.model('AsanaConfig', {
	        attributes: []
	    });
	
	
	var incompleteTasks = Task.arrangedReactiveQuery({completed: false, __order: 'index'});
	incompleteTasks.insertionPolicy = siesta.InsertionPolicy.Front;
	// Only one task should be editing at a time.
	incompleteTasks.listen(function (n) {
	    if (n.field == 'editing') {
	        var task = n.obj;
	        console.log('n', n);
	        if (task.editing) {
	            var results = incompleteTasks.results;
	            _.each(results, function (t) {
	                if (t != task) {
	                    t.editing = false;
	                }
	            });
	        }
	    }
	});
	
	module.exports = {
	    siesta: siesta,
	    Type: Type,
	    Pomodoro: Pomodoro,
	    Tag: Tag,
	    Task: Task,
	    Config: Config,
	    Round: Round,
	    PomodoroConfig: PomodoroConfig,
	    ColourConfig: ColourConfig,
	    incompleteTasks: incompleteTasks
	};

/***/ },
/* 8 */
/***/ function(module, exports, __webpack_require__) {

	var data = __webpack_require__(7),
	    Pomodoro = data.Pomodoro;
	
	var State = {
	        Pomodoro: 'Pomodoro',
	        ShortBreak: 'ShortBreak',
	        LongBreak: 'LongBreak'
	    },
	    Event = {
	        start: 'start',
	        stop: 'stop'
	    };
	
	
	
	siesta.registerComparator('isToday', function (opts) {
	    var value = opts.object[opts.field];
	    console.log('isToday value', value);
	    if (value) {
	        if (value instanceof Date) {
	            var d = new Date();
	            return value.getDate() == value.getDate() && value.getMonth() == value.getMonth() && value.getFullYear() == d.getFullYear();
	        }
	        else {
	            throw new Error('Must be a date field to use isToday comparator');
	        }
	    }
	    return false;
	
	});
	
	
	var PomodoroTimer = Pomodoro.model('PomodoroTimer', {
	    attributes: [
	        'seconds',
	        {
	            name: 'state',
	            default: State.Pomodoro
	        }
	    ],
	    init: function (fromStorage, done) {
	        // Setup listeners.
	        // Note: The reason why we listen to self rather than simply execute logic when we decrement seconds in
	        // the interval is that this options leaves open the possibility of modifying seconds outside of the model
	        // instance.
	        this.listen(function (n) {
	            if (!this.paused && n.field == 'seconds') this.checkIfShouldTransition();
	        }.bind(this));
	        console.log('starting');
	        data.PomodoroConfig.one()
	            .then(function (config) {
	                this.pomodoroConfig = config;
	                config.listen(this.onConfigChange.bind(this));
	                if (!fromStorage) {
	                    var pomodoroLength = this.pomodoroConfig.pomodoroLength;
	                    this.seconds = pomodoroLength * 60;
	                }
	                done();
	            }.bind(this)).catch(done);
	        this.rq = data.Round.todaysRounds();
	        var setCompleted = function () {
	            var results = this.rq.results;
	            console.log('isToday results', results);
	            this.completed = results.length;
	        }.bind(this);
	        this.rq.init(setCompleted).catch(function (err) {
	            console.error('Error setting up pomodoro timer rounds...', err);
	        });
	        this.rq.listen(setCompleted);
	    },
	
	    remove: function () {
	        this.rq.terminate();
	    },
	
	    methods: {
	        checkIfShouldTransition: function () {
	            if (this.seconds == 0) this.transition();
	        },
	        transition: function () {
	            if (this.state == State.Pomodoro) {
	                // New round.
	                data.Round.graph({date: new Date()})
	                    .then(function () {
	                        console.log('yo!');
	                        console.log('completed', this.completed);
	                        if (!(this.completed % this.pomodoroConfig.roundLength)) {
	                            this.seconds = this.pomodoroConfig.longBreakLength * 60;
	                            this.state = State.LongBreak;
	                        }
	                        else {
	                            console.log('yay');
	                            this.seconds = this.pomodoroConfig.shortBreakLength * 60;
	                            this.state = State.ShortBreak;
	                        }
	                    }.bind(this));
	            }
	            else if (this.state == State.ShortBreak || this.state == State.LongBreak) {
	                this.seconds = this.pomodoroConfig.pomodoroLength * 60;
	                this.state = State.Pomodoro;
	            }
	        },
	        onConfigChange: function (n) {
	            var state;
	            if (n.field == 'pomodoroLength') state = State.Pomodoro;
	            else if (n.field == 'longBreakLength') state = State.LongBreak;
	            else if (n.field == 'shortBreakLength') state = State.ShortBreak;
	            if (state) this.onLengthChange(state, n);
	        },
	        onLengthChange: function (state, n) {
	            if (this.seconds == n.old * 60 && this.state == state) this.seconds = n.new * 60;
	        },
	        start: function () {
	            if (!this._token) {
	                this.checkIfShouldTransition();
	                this._token = setInterval(function () {
	                    this.seconds--;
	                }.bind(this), 1000);
	                this.emit(Event.start, {});
	            }
	        },
	        stop: function () {
	            if (this._token) {
	                clearInterval(this._token);
	                this._token = null;
	                this.emit(Event.stop, {});
	            }
	        },
	        toggle: function () {
	            if (this.paused) this.start();
	            else this.stop();
	        }
	    },
	    properties: {
	        // Is the timer ticking?
	        running: {
	            get: function () {
	                return !!this._token;
	            }
	        },
	        paused: {
	            get: function () {
	                return !this.running;
	            }
	        },
	        completed: {
	            get: function () {
	                return this.rq.results.length;
	            }
	        }
	    },
	    singleton: true
	});
	
	
	_.extend(PomodoroTimer, {
	    State: State,
	    Event: Event
	});
	
	module.exports = PomodoroTimer;

/***/ },
/* 9 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(17);


/***/ },
/* 10 */
/***/ function(module, exports, __webpack_require__) {

	// shim for using process in browser
	
	var process = module.exports = {};
	
	process.nextTick = (function () {
	    var canSetImmediate = typeof window !== 'undefined'
	    && window.setImmediate;
	    var canMutationObserver = typeof window !== 'undefined'
	    && window.MutationObserver;
	    var canPost = typeof window !== 'undefined'
	    && window.postMessage && window.addEventListener
	    ;
	
	    if (canSetImmediate) {
	        return function (f) { return window.setImmediate(f) };
	    }
	
	    var queue = [];
	
	    if (canMutationObserver) {
	        var hiddenDiv = document.createElement("div");
	        var observer = new MutationObserver(function () {
	            var queueList = queue.slice();
	            queue.length = 0;
	            queueList.forEach(function (fn) {
	                fn();
	            });
	        });
	
	        observer.observe(hiddenDiv, { attributes: true });
	
	        return function nextTick(fn) {
	            if (!queue.length) {
	                hiddenDiv.setAttribute('yes', 'no');
	            }
	            queue.push(fn);
	        };
	    }
	
	    if (canPost) {
	        window.addEventListener('message', function (ev) {
	            var source = ev.source;
	            if ((source === window || source === null) && ev.data === 'process-tick') {
	                ev.stopPropagation();
	                if (queue.length > 0) {
	                    var fn = queue.shift();
	                    fn();
	                }
	            }
	        }, true);
	
	        return function nextTick(fn) {
	            queue.push(fn);
	            window.postMessage('process-tick', '*');
	        };
	    }
	
	    return function nextTick(fn) {
	        setTimeout(fn, 0);
	    };
	})();
	
	process.title = 'browser';
	process.browser = true;
	process.env = {};
	process.argv = [];
	
	function noop() {}
	
	process.on = noop;
	process.addListener = noop;
	process.once = noop;
	process.off = noop;
	process.removeListener = noop;
	process.removeAllListeners = noop;
	process.emit = noop;
	
	process.binding = function (name) {
	    throw new Error('process.binding is not supported');
	};
	
	// TODO(shtylman)
	process.cwd = function () { return '/' };
	process.chdir = function (dir) {
	    throw new Error('process.chdir is not supported');
	};


/***/ },
/* 11 */
/***/ function(module, exports, __webpack_require__) {

	// style-loader: Adds some css to the DOM by adding a <style> tag
	
	// load the styles
	var content = __webpack_require__(12);
	if(typeof content === 'string') content = [[module.id, content, '']];
	// add the styles to the DOM
	var update = __webpack_require__(14)(content, {});
	// Hot Module Replacement
	if(false) {
		// When the styles change, update the <style> tags
		module.hot.accept("!!/Users/mtford/Playground/pv2/node_modules/css-loader/index.js!/Users/mtford/Playground/pv2/node_modules/mocha/mocha.css", function() {
			var newContent = require("!!/Users/mtford/Playground/pv2/node_modules/css-loader/index.js!/Users/mtford/Playground/pv2/node_modules/mocha/mocha.css");
			if(typeof newContent === 'string') newContent = [module.id, newContent, ''];
			update(newContent);
		});
		// When the module is disposed, remove the <style> tags
		module.hot.dispose(function() { update(); });
	}

/***/ },
/* 12 */
/***/ function(module, exports, __webpack_require__) {

	exports = module.exports = __webpack_require__(18)();
	exports.push([module.id, "@charset \"utf-8\";\n\nbody {\n  margin:0;\n}\n\n#mocha {\n  font: 20px/1.5 \"Helvetica Neue\", Helvetica, Arial, sans-serif;\n  margin: 60px 50px;\n}\n\n#mocha ul,\n#mocha li {\n  margin: 0;\n  padding: 0;\n}\n\n#mocha ul {\n  list-style: none;\n}\n\n#mocha h1,\n#mocha h2 {\n  margin: 0;\n}\n\n#mocha h1 {\n  margin-top: 15px;\n  font-size: 1em;\n  font-weight: 200;\n}\n\n#mocha h1 a {\n  text-decoration: none;\n  color: inherit;\n}\n\n#mocha h1 a:hover {\n  text-decoration: underline;\n}\n\n#mocha .suite .suite h1 {\n  margin-top: 0;\n  font-size: .8em;\n}\n\n#mocha .hidden {\n  display: none;\n}\n\n#mocha h2 {\n  font-size: 12px;\n  font-weight: normal;\n  cursor: pointer;\n}\n\n#mocha .suite {\n  margin-left: 15px;\n}\n\n#mocha .test {\n  margin-left: 15px;\n  overflow: hidden;\n}\n\n#mocha .test.pending:hover h2::after {\n  content: '(pending)';\n  font-family: arial, sans-serif;\n}\n\n#mocha .test.pass.medium .duration {\n  background: #c09853;\n}\n\n#mocha .test.pass.slow .duration {\n  background: #b94a48;\n}\n\n#mocha .test.pass::before {\n  content: '✓';\n  font-size: 12px;\n  display: block;\n  float: left;\n  margin-right: 5px;\n  color: #00d6b2;\n}\n\n#mocha .test.pass .duration {\n  font-size: 9px;\n  margin-left: 5px;\n  padding: 2px 5px;\n  color: #fff;\n  -webkit-box-shadow: inset 0 1px 1px rgba(0,0,0,.2);\n  -moz-box-shadow: inset 0 1px 1px rgba(0,0,0,.2);\n  box-shadow: inset 0 1px 1px rgba(0,0,0,.2);\n  -webkit-border-radius: 5px;\n  -moz-border-radius: 5px;\n  -ms-border-radius: 5px;\n  -o-border-radius: 5px;\n  border-radius: 5px;\n}\n\n#mocha .test.pass.fast .duration {\n  display: none;\n}\n\n#mocha .test.pending {\n  color: #0b97c4;\n}\n\n#mocha .test.pending::before {\n  content: '◦';\n  color: #0b97c4;\n}\n\n#mocha .test.fail {\n  color: #c00;\n}\n\n#mocha .test.fail pre {\n  color: black;\n}\n\n#mocha .test.fail::before {\n  content: '✖';\n  font-size: 12px;\n  display: block;\n  float: left;\n  margin-right: 5px;\n  color: #c00;\n}\n\n#mocha .test pre.error {\n  color: #c00;\n  max-height: 300px;\n  overflow: auto;\n}\n\n/**\n * (1): approximate for browsers not supporting calc\n * (2): 42 = 2*15 + 2*10 + 2*1 (padding + margin + border)\n *      ^^ seriously\n */\n#mocha .test pre {\n  display: block;\n  float: left;\n  clear: left;\n  font: 12px/1.5 monaco, monospace;\n  margin: 5px;\n  padding: 15px;\n  border: 1px solid #eee;\n  max-width: 85%; /*(1)*/\n  max-width: calc(100% - 42px); /*(2)*/\n  word-wrap: break-word;\n  border-bottom-color: #ddd;\n  -webkit-border-radius: 3px;\n  -webkit-box-shadow: 0 1px 3px #eee;\n  -moz-border-radius: 3px;\n  -moz-box-shadow: 0 1px 3px #eee;\n  border-radius: 3px;\n}\n\n#mocha .test h2 {\n  position: relative;\n}\n\n#mocha .test a.replay {\n  position: absolute;\n  top: 3px;\n  right: 0;\n  text-decoration: none;\n  vertical-align: middle;\n  display: block;\n  width: 15px;\n  height: 15px;\n  line-height: 15px;\n  text-align: center;\n  background: #eee;\n  font-size: 15px;\n  -moz-border-radius: 15px;\n  border-radius: 15px;\n  -webkit-transition: opacity 200ms;\n  -moz-transition: opacity 200ms;\n  transition: opacity 200ms;\n  opacity: 0.3;\n  color: #888;\n}\n\n#mocha .test:hover a.replay {\n  opacity: 1;\n}\n\n#mocha-report.pass .test.fail {\n  display: none;\n}\n\n#mocha-report.fail .test.pass {\n  display: none;\n}\n\n#mocha-report.pending .test.pass,\n#mocha-report.pending .test.fail {\n  display: none;\n}\n#mocha-report.pending .test.pass.pending {\n  display: block;\n}\n\n#mocha-error {\n  color: #c00;\n  font-size: 1.5em;\n  font-weight: 100;\n  letter-spacing: 1px;\n}\n\n#mocha-stats {\n  position: fixed;\n  top: 15px;\n  right: 10px;\n  font-size: 12px;\n  margin: 0;\n  color: #888;\n  z-index: 1;\n}\n\n#mocha-stats .progress {\n  float: right;\n  padding-top: 0;\n}\n\n#mocha-stats em {\n  color: black;\n}\n\n#mocha-stats a {\n  text-decoration: none;\n  color: inherit;\n}\n\n#mocha-stats a:hover {\n  border-bottom: 1px solid #eee;\n}\n\n#mocha-stats li {\n  display: inline-block;\n  margin: 0 5px;\n  list-style: none;\n  padding-top: 11px;\n}\n\n#mocha-stats canvas {\n  width: 40px;\n  height: 40px;\n}\n\n#mocha code .comment { color: #ddd; }\n#mocha code .init { color: #2f6fad; }\n#mocha code .string { color: #5890ad; }\n#mocha code .keyword { color: #8a6343; }\n#mocha code .number { color: #2f6fad; }\n\n@media screen and (max-device-width: 480px) {\n  #mocha {\n    margin: 60px 0px;\n  }\n\n  #mocha #stats {\n    position: absolute;\n  }\n}\n", ""]);

/***/ },
/* 13 */
/***/ function(module, exports, __webpack_require__) {

	__webpack_require__(15)(__webpack_require__(16))

/***/ },
/* 14 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	var stylesInDom = {},
		memoize = function(fn) {
			var memo;
			return function () {
				if (typeof memo === "undefined") memo = fn.apply(this, arguments);
				return memo;
			};
		},
		isIE9 = memoize(function() {
			return /msie 9\b/.test(window.navigator.userAgent.toLowerCase());
		}),
		getHeadElement = memoize(function () {
			return document.head || document.getElementsByTagName("head")[0];
		}),
		singletonElement = null,
		singletonCounter = 0;
	
	module.exports = function(list, options) {
		if(false) {
			if(typeof document !== "object") throw new Error("The style-loader cannot be used in a non-browser environment");
		}
	
		options = options || {};
		// Force single-tag solution on IE9, which has a hard limit on the # of <style>
		// tags it will allow on a page
		if (typeof options.singleton === "undefined") options.singleton = isIE9();
	
		var styles = listToStyles(list);
		addStylesToDom(styles, options);
	
		return function update(newList) {
			var mayRemove = [];
			for(var i = 0; i < styles.length; i++) {
				var item = styles[i];
				var domStyle = stylesInDom[item.id];
				domStyle.refs--;
				mayRemove.push(domStyle);
			}
			if(newList) {
				var newStyles = listToStyles(newList);
				addStylesToDom(newStyles, options);
			}
			for(var i = 0; i < mayRemove.length; i++) {
				var domStyle = mayRemove[i];
				if(domStyle.refs === 0) {
					for(var j = 0; j < domStyle.parts.length; j++)
						domStyle.parts[j]();
					delete stylesInDom[domStyle.id];
				}
			}
		};
	}
	
	function addStylesToDom(styles, options) {
		for(var i = 0; i < styles.length; i++) {
			var item = styles[i];
			var domStyle = stylesInDom[item.id];
			if(domStyle) {
				domStyle.refs++;
				for(var j = 0; j < domStyle.parts.length; j++) {
					domStyle.parts[j](item.parts[j]);
				}
				for(; j < item.parts.length; j++) {
					domStyle.parts.push(addStyle(item.parts[j], options));
				}
			} else {
				var parts = [];
				for(var j = 0; j < item.parts.length; j++) {
					parts.push(addStyle(item.parts[j], options));
				}
				stylesInDom[item.id] = {id: item.id, refs: 1, parts: parts};
			}
		}
	}
	
	function listToStyles(list) {
		var styles = [];
		var newStyles = {};
		for(var i = 0; i < list.length; i++) {
			var item = list[i];
			var id = item[0];
			var css = item[1];
			var media = item[2];
			var sourceMap = item[3];
			var part = {css: css, media: media, sourceMap: sourceMap};
			if(!newStyles[id])
				styles.push(newStyles[id] = {id: id, parts: [part]});
			else
				newStyles[id].parts.push(part);
		}
		return styles;
	}
	
	function createStyleElement() {
		var styleElement = document.createElement("style");
		var head = getHeadElement();
		styleElement.type = "text/css";
		head.appendChild(styleElement);
		return styleElement;
	}
	
	function addStyle(obj, options) {
		var styleElement, update, remove;
	
		if (options.singleton) {
			var styleIndex = singletonCounter++;
			styleElement = singletonElement || (singletonElement = createStyleElement());
			update = function (obj) {
				applyToSingletonTag(styleElement, styleIndex, false, obj);
			};
			remove = function (obj) {
				applyToSingletonTag(styleElement, styleIndex, true, obj);
			};
		} else {
			styleElement = createStyleElement();
			update = function (obj) {
				applyToTag(styleElement, obj);
			};
			remove = function () {
				styleElement.parentNode.removeChild(styleElement);
			};
		}
	
		update(obj);
	
		return function updateStyle(newObj) {
			if(newObj) {
				if(newObj.css === obj.css && newObj.media === obj.media && newObj.sourceMap === obj.sourceMap)
					return;
				update(obj = newObj);
			} else {
				remove();
			}
		};
	}
	
	function replaceText(source, id, replacement) {
		var boundaries = ["/** >>" + id + " **/", "/** " + id + "<< **/"];
		var start = source.lastIndexOf(boundaries[0]);
		var wrappedReplacement = replacement
			? (boundaries[0] + replacement + boundaries[1])
			: "";
		if (source.lastIndexOf(boundaries[0]) >= 0) {
			var end = source.lastIndexOf(boundaries[1]) + boundaries[1].length;
			return source.slice(0, start) + wrappedReplacement + source.slice(end);
		} else {
			return source + wrappedReplacement;
		}
	}
	
	function applyToSingletonTag(styleElement, index, remove, obj) {
		var css = remove ? "" : obj.css;
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = replaceText(styleElement.styleSheet.cssText, index, css);
		} else {
			var cssNode = document.createTextNode(css);
			var childNodes = styleElement.childNodes;
			if (childNodes[index]) styleElement.removeChild(childNodes[index]);
			if (childNodes.length) {
				styleElement.insertBefore(cssNode, childNodes[index]);
			} else {
				styleElement.appendChild(cssNode);
			}
		}
	}
	
	function applyToTag(styleElement, obj) {
		var css = obj.css;
		var media = obj.media;
		var sourceMap = obj.sourceMap;
	
		if(sourceMap && typeof btoa === "function") {
			try {
				css += "\n/*# sourceMappingURL=data:application/json;base64," + btoa(JSON.stringify(sourceMap)) + " */";
				css = "@import url(\"data:text/css;base64," + btoa(css) + "\")";
			} catch(e) {}
		}
	
		if(media) {
			styleElement.setAttribute("media", media)
		}
	
		if(styleElement.styleSheet) {
			styleElement.styleSheet.cssText = css;
		} else {
			while(styleElement.firstChild) {
				styleElement.removeChild(styleElement.firstChild);
			}
			styleElement.appendChild(document.createTextNode(css));
		}
	}


/***/ },
/* 15 */
/***/ function(module, exports, __webpack_require__) {

	/*
		MIT License http://www.opensource.org/licenses/mit-license.php
		Author Tobias Koppers @sokra
	*/
	module.exports = function(src) {
		if (typeof execScript === "function")
			execScript(src);
		else
			eval.call(null, src);
	}

/***/ },
/* 16 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = ";(function(){\n\n// CommonJS require()\n\nfunction require(p){\n    var path = require.resolve(p)\n      , mod = require.modules[path];\n    if (!mod) throw new Error('failed to require \"' + p + '\"');\n    if (!mod.exports) {\n      mod.exports = {};\n      mod.call(mod.exports, mod, mod.exports, require.relative(path));\n    }\n    return mod.exports;\n  }\n\nrequire.modules = {};\n\nrequire.resolve = function (path){\n    var orig = path\n      , reg = path + '.js'\n      , index = path + '/index.js';\n    return require.modules[reg] && reg\n      || require.modules[index] && index\n      || orig;\n  };\n\nrequire.register = function (path, fn){\n    require.modules[path] = fn;\n  };\n\nrequire.relative = function (parent) {\n    return function(p){\n      if ('.' != p.charAt(0)) return require(p);\n\n      var path = parent.split('/')\n        , segs = p.split('/');\n      path.pop();\n\n      for (var i = 0; i < segs.length; i++) {\n        var seg = segs[i];\n        if ('..' == seg) path.pop();\n        else if ('.' != seg) path.push(seg);\n      }\n\n      return require(path.join('/'));\n    };\n  };\n\n\nrequire.register(\"browser/debug.js\", function(module, exports, require){\nmodule.exports = function(type){\n  return function(){\n  }\n};\n\n}); // module: browser/debug.js\n\nrequire.register(\"browser/diff.js\", function(module, exports, require){\n/* See LICENSE file for terms of use */\n\n/*\n * Text diff implementation.\n *\n * This library supports the following APIS:\n * JsDiff.diffChars: Character by character diff\n * JsDiff.diffWords: Word (as defined by \\b regex) diff which ignores whitespace\n * JsDiff.diffLines: Line based diff\n *\n * JsDiff.diffCss: Diff targeted at CSS content\n *\n * These methods are based on the implementation proposed in\n * \"An O(ND) Difference Algorithm and its Variations\" (Myers, 1986).\n * http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.4.6927\n */\nvar JsDiff = (function() {\n  /*jshint maxparams: 5*/\n  function clonePath(path) {\n    return { newPos: path.newPos, components: path.components.slice(0) };\n  }\n  function removeEmpty(array) {\n    var ret = [];\n    for (var i = 0; i < array.length; i++) {\n      if (array[i]) {\n        ret.push(array[i]);\n      }\n    }\n    return ret;\n  }\n  function escapeHTML(s) {\n    var n = s;\n    n = n.replace(/&/g, '&amp;');\n    n = n.replace(/</g, '&lt;');\n    n = n.replace(/>/g, '&gt;');\n    n = n.replace(/\"/g, '&quot;');\n\n    return n;\n  }\n\n  var Diff = function(ignoreWhitespace) {\n    this.ignoreWhitespace = ignoreWhitespace;\n  };\n  Diff.prototype = {\n      diff: function(oldString, newString) {\n        // Handle the identity case (this is due to unrolling editLength == 0\n        if (newString === oldString) {\n          return [{ value: newString }];\n        }\n        if (!newString) {\n          return [{ value: oldString, removed: true }];\n        }\n        if (!oldString) {\n          return [{ value: newString, added: true }];\n        }\n\n        newString = this.tokenize(newString);\n        oldString = this.tokenize(oldString);\n\n        var newLen = newString.length, oldLen = oldString.length;\n        var maxEditLength = newLen + oldLen;\n        var bestPath = [{ newPos: -1, components: [] }];\n\n        // Seed editLength = 0\n        var oldPos = this.extractCommon(bestPath[0], newString, oldString, 0);\n        if (bestPath[0].newPos+1 >= newLen && oldPos+1 >= oldLen) {\n          return bestPath[0].components;\n        }\n\n        for (var editLength = 1; editLength <= maxEditLength; editLength++) {\n          for (var diagonalPath = -1*editLength; diagonalPath <= editLength; diagonalPath+=2) {\n            var basePath;\n            var addPath = bestPath[diagonalPath-1],\n                removePath = bestPath[diagonalPath+1];\n            oldPos = (removePath ? removePath.newPos : 0) - diagonalPath;\n            if (addPath) {\n              // No one else is going to attempt to use this value, clear it\n              bestPath[diagonalPath-1] = undefined;\n            }\n\n            var canAdd = addPath && addPath.newPos+1 < newLen;\n            var canRemove = removePath && 0 <= oldPos && oldPos < oldLen;\n            if (!canAdd && !canRemove) {\n              bestPath[diagonalPath] = undefined;\n              continue;\n            }\n\n            // Select the diagonal that we want to branch from. We select the prior\n            // path whose position in the new string is the farthest from the origin\n            // and does not pass the bounds of the diff graph\n            if (!canAdd || (canRemove && addPath.newPos < removePath.newPos)) {\n              basePath = clonePath(removePath);\n              this.pushComponent(basePath.components, oldString[oldPos], undefined, true);\n            } else {\n              basePath = clonePath(addPath);\n              basePath.newPos++;\n              this.pushComponent(basePath.components, newString[basePath.newPos], true, undefined);\n            }\n\n            var oldPos = this.extractCommon(basePath, newString, oldString, diagonalPath);\n\n            if (basePath.newPos+1 >= newLen && oldPos+1 >= oldLen) {\n              return basePath.components;\n            } else {\n              bestPath[diagonalPath] = basePath;\n            }\n          }\n        }\n      },\n\n      pushComponent: function(components, value, added, removed) {\n        var last = components[components.length-1];\n        if (last && last.added === added && last.removed === removed) {\n          // We need to clone here as the component clone operation is just\n          // as shallow array clone\n          components[components.length-1] =\n            {value: this.join(last.value, value), added: added, removed: removed };\n        } else {\n          components.push({value: value, added: added, removed: removed });\n        }\n      },\n      extractCommon: function(basePath, newString, oldString, diagonalPath) {\n        var newLen = newString.length,\n            oldLen = oldString.length,\n            newPos = basePath.newPos,\n            oldPos = newPos - diagonalPath;\n        while (newPos+1 < newLen && oldPos+1 < oldLen && this.equals(newString[newPos+1], oldString[oldPos+1])) {\n          newPos++;\n          oldPos++;\n\n          this.pushComponent(basePath.components, newString[newPos], undefined, undefined);\n        }\n        basePath.newPos = newPos;\n        return oldPos;\n      },\n\n      equals: function(left, right) {\n        var reWhitespace = /\\S/;\n        if (this.ignoreWhitespace && !reWhitespace.test(left) && !reWhitespace.test(right)) {\n          return true;\n        } else {\n          return left === right;\n        }\n      },\n      join: function(left, right) {\n        return left + right;\n      },\n      tokenize: function(value) {\n        return value;\n      }\n  };\n\n  var CharDiff = new Diff();\n\n  var WordDiff = new Diff(true);\n  var WordWithSpaceDiff = new Diff();\n  WordDiff.tokenize = WordWithSpaceDiff.tokenize = function(value) {\n    return removeEmpty(value.split(/(\\s+|\\b)/));\n  };\n\n  var CssDiff = new Diff(true);\n  CssDiff.tokenize = function(value) {\n    return removeEmpty(value.split(/([{}:;,]|\\s+)/));\n  };\n\n  var LineDiff = new Diff();\n  LineDiff.tokenize = function(value) {\n    return value.split(/^/m);\n  };\n\n  return {\n    Diff: Diff,\n\n    diffChars: function(oldStr, newStr) { return CharDiff.diff(oldStr, newStr); },\n    diffWords: function(oldStr, newStr) { return WordDiff.diff(oldStr, newStr); },\n    diffWordsWithSpace: function(oldStr, newStr) { return WordWithSpaceDiff.diff(oldStr, newStr); },\n    diffLines: function(oldStr, newStr) { return LineDiff.diff(oldStr, newStr); },\n\n    diffCss: function(oldStr, newStr) { return CssDiff.diff(oldStr, newStr); },\n\n    createPatch: function(fileName, oldStr, newStr, oldHeader, newHeader) {\n      var ret = [];\n\n      ret.push('Index: ' + fileName);\n      ret.push('===================================================================');\n      ret.push('--- ' + fileName + (typeof oldHeader === 'undefined' ? '' : '\\t' + oldHeader));\n      ret.push('+++ ' + fileName + (typeof newHeader === 'undefined' ? '' : '\\t' + newHeader));\n\n      var diff = LineDiff.diff(oldStr, newStr);\n      if (!diff[diff.length-1].value) {\n        diff.pop();   // Remove trailing newline add\n      }\n      diff.push({value: '', lines: []});   // Append an empty value to make cleanup easier\n\n      function contextLines(lines) {\n        return lines.map(function(entry) { return ' ' + entry; });\n      }\n      function eofNL(curRange, i, current) {\n        var last = diff[diff.length-2],\n            isLast = i === diff.length-2,\n            isLastOfType = i === diff.length-3 && (current.added !== last.added || current.removed !== last.removed);\n\n        // Figure out if this is the last line for the given file and missing NL\n        if (!/\\n$/.test(current.value) && (isLast || isLastOfType)) {\n          curRange.push('\\\\ No newline at end of file');\n        }\n      }\n\n      var oldRangeStart = 0, newRangeStart = 0, curRange = [],\n          oldLine = 1, newLine = 1;\n      for (var i = 0; i < diff.length; i++) {\n        var current = diff[i],\n            lines = current.lines || current.value.replace(/\\n$/, '').split('\\n');\n        current.lines = lines;\n\n        if (current.added || current.removed) {\n          if (!oldRangeStart) {\n            var prev = diff[i-1];\n            oldRangeStart = oldLine;\n            newRangeStart = newLine;\n\n            if (prev) {\n              curRange = contextLines(prev.lines.slice(-4));\n              oldRangeStart -= curRange.length;\n              newRangeStart -= curRange.length;\n            }\n          }\n          curRange.push.apply(curRange, lines.map(function(entry) { return (current.added?'+':'-') + entry; }));\n          eofNL(curRange, i, current);\n\n          if (current.added) {\n            newLine += lines.length;\n          } else {\n            oldLine += lines.length;\n          }\n        } else {\n          if (oldRangeStart) {\n            // Close out any changes that have been output (or join overlapping)\n            if (lines.length <= 8 && i < diff.length-2) {\n              // Overlapping\n              curRange.push.apply(curRange, contextLines(lines));\n            } else {\n              // end the range and output\n              var contextSize = Math.min(lines.length, 4);\n              ret.push(\n                  '@@ -' + oldRangeStart + ',' + (oldLine-oldRangeStart+contextSize)\n                  + ' +' + newRangeStart + ',' + (newLine-newRangeStart+contextSize)\n                  + ' @@');\n              ret.push.apply(ret, curRange);\n              ret.push.apply(ret, contextLines(lines.slice(0, contextSize)));\n              if (lines.length <= 4) {\n                eofNL(ret, i, current);\n              }\n\n              oldRangeStart = 0;  newRangeStart = 0; curRange = [];\n            }\n          }\n          oldLine += lines.length;\n          newLine += lines.length;\n        }\n      }\n\n      return ret.join('\\n') + '\\n';\n    },\n\n    applyPatch: function(oldStr, uniDiff) {\n      var diffstr = uniDiff.split('\\n');\n      var diff = [];\n      var remEOFNL = false,\n          addEOFNL = false;\n\n      for (var i = (diffstr[0][0]==='I'?4:0); i < diffstr.length; i++) {\n        if(diffstr[i][0] === '@') {\n          var meh = diffstr[i].split(/@@ -(\\d+),(\\d+) \\+(\\d+),(\\d+) @@/);\n          diff.unshift({\n            start:meh[3],\n            oldlength:meh[2],\n            oldlines:[],\n            newlength:meh[4],\n            newlines:[]\n          });\n        } else if(diffstr[i][0] === '+') {\n          diff[0].newlines.push(diffstr[i].substr(1));\n        } else if(diffstr[i][0] === '-') {\n          diff[0].oldlines.push(diffstr[i].substr(1));\n        } else if(diffstr[i][0] === ' ') {\n          diff[0].newlines.push(diffstr[i].substr(1));\n          diff[0].oldlines.push(diffstr[i].substr(1));\n        } else if(diffstr[i][0] === '\\\\') {\n          if (diffstr[i-1][0] === '+') {\n            remEOFNL = true;\n          } else if(diffstr[i-1][0] === '-') {\n            addEOFNL = true;\n          }\n        }\n      }\n\n      var str = oldStr.split('\\n');\n      for (var i = diff.length - 1; i >= 0; i--) {\n        var d = diff[i];\n        for (var j = 0; j < d.oldlength; j++) {\n          if(str[d.start-1+j] !== d.oldlines[j]) {\n            return false;\n          }\n        }\n        Array.prototype.splice.apply(str,[d.start-1,+d.oldlength].concat(d.newlines));\n      }\n\n      if (remEOFNL) {\n        while (!str[str.length-1]) {\n          str.pop();\n        }\n      } else if (addEOFNL) {\n        str.push('');\n      }\n      return str.join('\\n');\n    },\n\n    convertChangesToXML: function(changes){\n      var ret = [];\n      for ( var i = 0; i < changes.length; i++) {\n        var change = changes[i];\n        if (change.added) {\n          ret.push('<ins>');\n        } else if (change.removed) {\n          ret.push('<del>');\n        }\n\n        ret.push(escapeHTML(change.value));\n\n        if (change.added) {\n          ret.push('</ins>');\n        } else if (change.removed) {\n          ret.push('</del>');\n        }\n      }\n      return ret.join('');\n    },\n\n    // See: http://code.google.com/p/google-diff-match-patch/wiki/API\n    convertChangesToDMP: function(changes){\n      var ret = [], change;\n      for ( var i = 0; i < changes.length; i++) {\n        change = changes[i];\n        ret.push([(change.added ? 1 : change.removed ? -1 : 0), change.value]);\n      }\n      return ret;\n    }\n  };\n})();\n\nif (typeof module !== 'undefined') {\n    module.exports = JsDiff;\n}\n\n}); // module: browser/diff.js\n\nrequire.register(\"browser/escape-string-regexp.js\", function(module, exports, require){\n'use strict';\n\nvar matchOperatorsRe = /[|\\\\{}()[\\]^$+*?.]/g;\n\nmodule.exports = function (str) {\n  if (typeof str !== 'string') {\n    throw new TypeError('Expected a string');\n  }\n\n  return str.replace(matchOperatorsRe,  '\\\\$&');\n};\n\n}); // module: browser/escape-string-regexp.js\n\nrequire.register(\"browser/events.js\", function(module, exports, require){\n/**\n * Module exports.\n */\n\nexports.EventEmitter = EventEmitter;\n\n/**\n * Check if `obj` is an array.\n */\n\nfunction isArray(obj) {\n  return '[object Array]' == {}.toString.call(obj);\n}\n\n/**\n * Event emitter constructor.\n *\n * @api public\n */\n\nfunction EventEmitter(){};\n\n/**\n * Adds a listener.\n *\n * @api public\n */\n\nEventEmitter.prototype.on = function (name, fn) {\n  if (!this.$events) {\n    this.$events = {};\n  }\n\n  if (!this.$events[name]) {\n    this.$events[name] = fn;\n  } else if (isArray(this.$events[name])) {\n    this.$events[name].push(fn);\n  } else {\n    this.$events[name] = [this.$events[name], fn];\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.addListener = EventEmitter.prototype.on;\n\n/**\n * Adds a volatile listener.\n *\n * @api public\n */\n\nEventEmitter.prototype.once = function (name, fn) {\n  var self = this;\n\n  function on () {\n    self.removeListener(name, on);\n    fn.apply(this, arguments);\n  };\n\n  on.listener = fn;\n  this.on(name, on);\n\n  return this;\n};\n\n/**\n * Removes a listener.\n *\n * @api public\n */\n\nEventEmitter.prototype.removeListener = function (name, fn) {\n  if (this.$events && this.$events[name]) {\n    var list = this.$events[name];\n\n    if (isArray(list)) {\n      var pos = -1;\n\n      for (var i = 0, l = list.length; i < l; i++) {\n        if (list[i] === fn || (list[i].listener && list[i].listener === fn)) {\n          pos = i;\n          break;\n        }\n      }\n\n      if (pos < 0) {\n        return this;\n      }\n\n      list.splice(pos, 1);\n\n      if (!list.length) {\n        delete this.$events[name];\n      }\n    } else if (list === fn || (list.listener && list.listener === fn)) {\n      delete this.$events[name];\n    }\n  }\n\n  return this;\n};\n\n/**\n * Removes all listeners for an event.\n *\n * @api public\n */\n\nEventEmitter.prototype.removeAllListeners = function (name) {\n  if (name === undefined) {\n    this.$events = {};\n    return this;\n  }\n\n  if (this.$events && this.$events[name]) {\n    this.$events[name] = null;\n  }\n\n  return this;\n};\n\n/**\n * Gets all listeners for a certain event.\n *\n * @api public\n */\n\nEventEmitter.prototype.listeners = function (name) {\n  if (!this.$events) {\n    this.$events = {};\n  }\n\n  if (!this.$events[name]) {\n    this.$events[name] = [];\n  }\n\n  if (!isArray(this.$events[name])) {\n    this.$events[name] = [this.$events[name]];\n  }\n\n  return this.$events[name];\n};\n\n/**\n * Emits an event.\n *\n * @api public\n */\n\nEventEmitter.prototype.emit = function (name) {\n  if (!this.$events) {\n    return false;\n  }\n\n  var handler = this.$events[name];\n\n  if (!handler) {\n    return false;\n  }\n\n  var args = [].slice.call(arguments, 1);\n\n  if ('function' == typeof handler) {\n    handler.apply(this, args);\n  } else if (isArray(handler)) {\n    var listeners = handler.slice();\n\n    for (var i = 0, l = listeners.length; i < l; i++) {\n      listeners[i].apply(this, args);\n    }\n  } else {\n    return false;\n  }\n\n  return true;\n};\n\n}); // module: browser/events.js\n\nrequire.register(\"browser/fs.js\", function(module, exports, require){\n\n}); // module: browser/fs.js\n\nrequire.register(\"browser/glob.js\", function(module, exports, require){\n\n}); // module: browser/glob.js\n\nrequire.register(\"browser/path.js\", function(module, exports, require){\n\n}); // module: browser/path.js\n\nrequire.register(\"browser/progress.js\", function(module, exports, require){\n/**\n * Expose `Progress`.\n */\n\nmodule.exports = Progress;\n\n/**\n * Initialize a new `Progress` indicator.\n */\n\nfunction Progress() {\n  this.percent = 0;\n  this.size(0);\n  this.fontSize(11);\n  this.font('helvetica, arial, sans-serif');\n}\n\n/**\n * Set progress size to `n`.\n *\n * @param {Number} n\n * @return {Progress} for chaining\n * @api public\n */\n\nProgress.prototype.size = function(n){\n  this._size = n;\n  return this;\n};\n\n/**\n * Set text to `str`.\n *\n * @param {String} str\n * @return {Progress} for chaining\n * @api public\n */\n\nProgress.prototype.text = function(str){\n  this._text = str;\n  return this;\n};\n\n/**\n * Set font size to `n`.\n *\n * @param {Number} n\n * @return {Progress} for chaining\n * @api public\n */\n\nProgress.prototype.fontSize = function(n){\n  this._fontSize = n;\n  return this;\n};\n\n/**\n * Set font `family`.\n *\n * @param {String} family\n * @return {Progress} for chaining\n */\n\nProgress.prototype.font = function(family){\n  this._font = family;\n  return this;\n};\n\n/**\n * Update percentage to `n`.\n *\n * @param {Number} n\n * @return {Progress} for chaining\n */\n\nProgress.prototype.update = function(n){\n  this.percent = n;\n  return this;\n};\n\n/**\n * Draw on `ctx`.\n *\n * @param {CanvasRenderingContext2d} ctx\n * @return {Progress} for chaining\n */\n\nProgress.prototype.draw = function(ctx){\n  try {\n    var percent = Math.min(this.percent, 100)\n      , size = this._size\n      , half = size / 2\n      , x = half\n      , y = half\n      , rad = half - 1\n      , fontSize = this._fontSize;\n\n    ctx.font = fontSize + 'px ' + this._font;\n\n    var angle = Math.PI * 2 * (percent / 100);\n    ctx.clearRect(0, 0, size, size);\n\n    // outer circle\n    ctx.strokeStyle = '#9f9f9f';\n    ctx.beginPath();\n    ctx.arc(x, y, rad, 0, angle, false);\n    ctx.stroke();\n\n    // inner circle\n    ctx.strokeStyle = '#eee';\n    ctx.beginPath();\n    ctx.arc(x, y, rad - 1, 0, angle, true);\n    ctx.stroke();\n\n    // text\n    var text = this._text || (percent | 0) + '%'\n      , w = ctx.measureText(text).width;\n\n    ctx.fillText(\n        text\n      , x - w / 2 + 1\n      , y + fontSize / 2 - 1);\n  } catch (ex) {} //don't fail if we can't render progress\n  return this;\n};\n\n}); // module: browser/progress.js\n\nrequire.register(\"browser/tty.js\", function(module, exports, require){\nexports.isatty = function(){\n  return true;\n};\n\nexports.getWindowSize = function(){\n  if ('innerHeight' in global) {\n    return [global.innerHeight, global.innerWidth];\n  } else {\n    // In a Web Worker, the DOM Window is not available.\n    return [640, 480];\n  }\n};\n\n}); // module: browser/tty.js\n\nrequire.register(\"context.js\", function(module, exports, require){\n/**\n * Expose `Context`.\n */\n\nmodule.exports = Context;\n\n/**\n * Initialize a new `Context`.\n *\n * @api private\n */\n\nfunction Context(){}\n\n/**\n * Set or get the context `Runnable` to `runnable`.\n *\n * @param {Runnable} runnable\n * @return {Context}\n * @api private\n */\n\nContext.prototype.runnable = function(runnable){\n  if (0 == arguments.length) return this._runnable;\n  this.test = this._runnable = runnable;\n  return this;\n};\n\n/**\n * Set test timeout `ms`.\n *\n * @param {Number} ms\n * @return {Context} self\n * @api private\n */\n\nContext.prototype.timeout = function(ms){\n  if (arguments.length === 0) return this.runnable().timeout();\n  this.runnable().timeout(ms);\n  return this;\n};\n\n/**\n * Set test timeout `enabled`.\n *\n * @param {Boolean} enabled\n * @return {Context} self\n * @api private\n */\n\nContext.prototype.enableTimeouts = function (enabled) {\n  this.runnable().enableTimeouts(enabled);\n  return this;\n};\n\n\n/**\n * Set test slowness threshold `ms`.\n *\n * @param {Number} ms\n * @return {Context} self\n * @api private\n */\n\nContext.prototype.slow = function(ms){\n  this.runnable().slow(ms);\n  return this;\n};\n\n/**\n * Inspect the context void of `._runnable`.\n *\n * @return {String}\n * @api private\n */\n\nContext.prototype.inspect = function(){\n  return JSON.stringify(this, function(key, val){\n    if ('_runnable' == key) return;\n    if ('test' == key) return;\n    return val;\n  }, 2);\n};\n\n}); // module: context.js\n\nrequire.register(\"hook.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Runnable = require('./runnable');\n\n/**\n * Expose `Hook`.\n */\n\nmodule.exports = Hook;\n\n/**\n * Initialize a new `Hook` with the given `title` and callback `fn`.\n *\n * @param {String} title\n * @param {Function} fn\n * @api private\n */\n\nfunction Hook(title, fn) {\n  Runnable.call(this, title, fn);\n  this.type = 'hook';\n}\n\n/**\n * Inherit from `Runnable.prototype`.\n */\n\nfunction F(){};\nF.prototype = Runnable.prototype;\nHook.prototype = new F;\nHook.prototype.constructor = Hook;\n\n\n/**\n * Get or set the test `err`.\n *\n * @param {Error} err\n * @return {Error}\n * @api public\n */\n\nHook.prototype.error = function(err){\n  if (0 == arguments.length) {\n    var err = this._error;\n    this._error = null;\n    return err;\n  }\n\n  this._error = err;\n};\n\n}); // module: hook.js\n\nrequire.register(\"interfaces/bdd.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Suite = require('../suite')\n  , Test = require('../test')\n  , utils = require('../utils')\n  , escapeRe = require('browser/escape-string-regexp');\n\n/**\n * BDD-style interface:\n *\n *      describe('Array', function(){\n *        describe('#indexOf()', function(){\n *          it('should return -1 when not present', function(){\n *\n *          });\n *\n *          it('should return the index when present', function(){\n *\n *          });\n *        });\n *      });\n *\n */\n\nmodule.exports = function(suite){\n  var suites = [suite];\n\n  suite.on('pre-require', function(context, file, mocha){\n\n    /**\n     * Execute before running tests.\n     */\n\n    context.before = function(name, fn){\n      suites[0].beforeAll(name, fn);\n    };\n\n    /**\n     * Execute after running tests.\n     */\n\n    context.after = function(name, fn){\n      suites[0].afterAll(name, fn);\n    };\n\n    /**\n     * Execute before each test case.\n     */\n\n    context.beforeEach = function(name, fn){\n      suites[0].beforeEach(name, fn);\n    };\n\n    /**\n     * Execute after each test case.\n     */\n\n    context.afterEach = function(name, fn){\n      suites[0].afterEach(name, fn);\n    };\n\n    /**\n     * Describe a \"suite\" with the given `title`\n     * and callback `fn` containing nested suites\n     * and/or tests.\n     */\n\n    context.describe = context.context = function(title, fn){\n      var suite = Suite.create(suites[0], title);\n      suite.file = file;\n      suites.unshift(suite);\n      fn.call(suite);\n      suites.shift();\n      return suite;\n    };\n\n    /**\n     * Pending describe.\n     */\n\n    context.xdescribe =\n    context.xcontext =\n    context.describe.skip = function(title, fn){\n      var suite = Suite.create(suites[0], title);\n      suite.pending = true;\n      suites.unshift(suite);\n      fn.call(suite);\n      suites.shift();\n    };\n\n    /**\n     * Exclusive suite.\n     */\n\n    context.describe.only = function(title, fn){\n      var suite = context.describe(title, fn);\n      mocha.grep(suite.fullTitle());\n      return suite;\n    };\n\n    /**\n     * Describe a specification or test-case\n     * with the given `title` and callback `fn`\n     * acting as a thunk.\n     */\n\n    context.it = context.specify = function(title, fn){\n      var suite = suites[0];\n      if (suite.pending) fn = null;\n      var test = new Test(title, fn);\n      test.file = file;\n      suite.addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.it.only = function(title, fn){\n      var test = context.it(title, fn);\n      var reString = '^' + escapeRe(test.fullTitle()) + '$';\n      mocha.grep(new RegExp(reString));\n      return test;\n    };\n\n    /**\n     * Pending test case.\n     */\n\n    context.xit =\n    context.xspecify =\n    context.it.skip = function(title){\n      context.it(title);\n    };\n  });\n};\n\n}); // module: interfaces/bdd.js\n\nrequire.register(\"interfaces/exports.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Suite = require('../suite')\n  , Test = require('../test');\n\n/**\n * TDD-style interface:\n *\n *     exports.Array = {\n *       '#indexOf()': {\n *         'should return -1 when the value is not present': function(){\n *\n *         },\n *\n *         'should return the correct index when the value is present': function(){\n *\n *         }\n *       }\n *     };\n *\n */\n\nmodule.exports = function(suite){\n  var suites = [suite];\n\n  suite.on('require', visit);\n\n  function visit(obj, file) {\n    var suite;\n    for (var key in obj) {\n      if ('function' == typeof obj[key]) {\n        var fn = obj[key];\n        switch (key) {\n          case 'before':\n            suites[0].beforeAll(fn);\n            break;\n          case 'after':\n            suites[0].afterAll(fn);\n            break;\n          case 'beforeEach':\n            suites[0].beforeEach(fn);\n            break;\n          case 'afterEach':\n            suites[0].afterEach(fn);\n            break;\n          default:\n            var test = new Test(key, fn);\n            test.file = file;\n            suites[0].addTest(test);\n        }\n      } else {\n        suite = Suite.create(suites[0], key);\n        suites.unshift(suite);\n        visit(obj[key]);\n        suites.shift();\n      }\n    }\n  }\n};\n\n}); // module: interfaces/exports.js\n\nrequire.register(\"interfaces/index.js\", function(module, exports, require){\nexports.bdd = require('./bdd');\nexports.tdd = require('./tdd');\nexports.qunit = require('./qunit');\nexports.exports = require('./exports');\n\n}); // module: interfaces/index.js\n\nrequire.register(\"interfaces/qunit.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Suite = require('../suite')\n  , Test = require('../test')\n  , escapeRe = require('browser/escape-string-regexp')\n  , utils = require('../utils');\n\n/**\n * QUnit-style interface:\n *\n *     suite('Array');\n *\n *     test('#length', function(){\n *       var arr = [1,2,3];\n *       ok(arr.length == 3);\n *     });\n *\n *     test('#indexOf()', function(){\n *       var arr = [1,2,3];\n *       ok(arr.indexOf(1) == 0);\n *       ok(arr.indexOf(2) == 1);\n *       ok(arr.indexOf(3) == 2);\n *     });\n *\n *     suite('String');\n *\n *     test('#length', function(){\n *       ok('foo'.length == 3);\n *     });\n *\n */\n\nmodule.exports = function(suite){\n  var suites = [suite];\n\n  suite.on('pre-require', function(context, file, mocha){\n\n    /**\n     * Execute before running tests.\n     */\n\n    context.before = function(name, fn){\n      suites[0].beforeAll(name, fn);\n    };\n\n    /**\n     * Execute after running tests.\n     */\n\n    context.after = function(name, fn){\n      suites[0].afterAll(name, fn);\n    };\n\n    /**\n     * Execute before each test case.\n     */\n\n    context.beforeEach = function(name, fn){\n      suites[0].beforeEach(name, fn);\n    };\n\n    /**\n     * Execute after each test case.\n     */\n\n    context.afterEach = function(name, fn){\n      suites[0].afterEach(name, fn);\n    };\n\n    /**\n     * Describe a \"suite\" with the given `title`.\n     */\n\n    context.suite = function(title){\n      if (suites.length > 1) suites.shift();\n      var suite = Suite.create(suites[0], title);\n      suite.file = file;\n      suites.unshift(suite);\n      return suite;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.suite.only = function(title, fn){\n      var suite = context.suite(title, fn);\n      mocha.grep(suite.fullTitle());\n    };\n\n    /**\n     * Describe a specification or test-case\n     * with the given `title` and callback `fn`\n     * acting as a thunk.\n     */\n\n    context.test = function(title, fn){\n      var test = new Test(title, fn);\n      test.file = file;\n      suites[0].addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.test.only = function(title, fn){\n      var test = context.test(title, fn);\n      var reString = '^' + escapeRe(test.fullTitle()) + '$';\n      mocha.grep(new RegExp(reString));\n    };\n\n    /**\n     * Pending test case.\n     */\n\n    context.test.skip = function(title){\n      context.test(title);\n    };\n  });\n};\n\n}); // module: interfaces/qunit.js\n\nrequire.register(\"interfaces/tdd.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Suite = require('../suite')\n  , Test = require('../test')\n  , escapeRe = require('browser/escape-string-regexp')\n  , utils = require('../utils');\n\n/**\n * TDD-style interface:\n *\n *      suite('Array', function(){\n *        suite('#indexOf()', function(){\n *          suiteSetup(function(){\n *\n *          });\n *\n *          test('should return -1 when not present', function(){\n *\n *          });\n *\n *          test('should return the index when present', function(){\n *\n *          });\n *\n *          suiteTeardown(function(){\n *\n *          });\n *        });\n *      });\n *\n */\n\nmodule.exports = function(suite){\n  var suites = [suite];\n\n  suite.on('pre-require', function(context, file, mocha){\n\n    /**\n     * Execute before each test case.\n     */\n\n    context.setup = function(name, fn){\n      suites[0].beforeEach(name, fn);\n    };\n\n    /**\n     * Execute after each test case.\n     */\n\n    context.teardown = function(name, fn){\n      suites[0].afterEach(name, fn);\n    };\n\n    /**\n     * Execute before the suite.\n     */\n\n    context.suiteSetup = function(name, fn){\n      suites[0].beforeAll(name, fn);\n    };\n\n    /**\n     * Execute after the suite.\n     */\n\n    context.suiteTeardown = function(name, fn){\n      suites[0].afterAll(name, fn);\n    };\n\n    /**\n     * Describe a \"suite\" with the given `title`\n     * and callback `fn` containing nested suites\n     * and/or tests.\n     */\n\n    context.suite = function(title, fn){\n      var suite = Suite.create(suites[0], title);\n      suite.file = file;\n      suites.unshift(suite);\n      fn.call(suite);\n      suites.shift();\n      return suite;\n    };\n\n    /**\n     * Pending suite.\n     */\n    context.suite.skip = function(title, fn) {\n      var suite = Suite.create(suites[0], title);\n      suite.pending = true;\n      suites.unshift(suite);\n      fn.call(suite);\n      suites.shift();\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.suite.only = function(title, fn){\n      var suite = context.suite(title, fn);\n      mocha.grep(suite.fullTitle());\n    };\n\n    /**\n     * Describe a specification or test-case\n     * with the given `title` and callback `fn`\n     * acting as a thunk.\n     */\n\n    context.test = function(title, fn){\n      var suite = suites[0];\n      if (suite.pending) fn = null;\n      var test = new Test(title, fn);\n      test.file = file;\n      suite.addTest(test);\n      return test;\n    };\n\n    /**\n     * Exclusive test-case.\n     */\n\n    context.test.only = function(title, fn){\n      var test = context.test(title, fn);\n      var reString = '^' + escapeRe(test.fullTitle()) + '$';\n      mocha.grep(new RegExp(reString));\n    };\n\n    /**\n     * Pending test case.\n     */\n\n    context.test.skip = function(title){\n      context.test(title);\n    };\n  });\n};\n\n}); // module: interfaces/tdd.js\n\nrequire.register(\"mocha.js\", function(module, exports, require){\n/*!\n * mocha\n * Copyright(c) 2011 TJ Holowaychuk <tj@vision-media.ca>\n * MIT Licensed\n */\n\n/**\n * Module dependencies.\n */\n\nvar path = require('browser/path')\n  , escapeRe = require('browser/escape-string-regexp')\n  , utils = require('./utils');\n\n/**\n * Expose `Mocha`.\n */\n\nexports = module.exports = Mocha;\n\n/**\n * To require local UIs and reporters when running in node.\n */\n\nif (typeof process !== 'undefined' && typeof process.cwd === 'function') {\n  var join = path.join\n    , cwd = process.cwd();\n  module.paths.push(cwd, join(cwd, 'node_modules'));\n}\n\n/**\n * Expose internals.\n */\n\nexports.utils = utils;\nexports.interfaces = require('./interfaces');\nexports.reporters = require('./reporters');\nexports.Runnable = require('./runnable');\nexports.Context = require('./context');\nexports.Runner = require('./runner');\nexports.Suite = require('./suite');\nexports.Hook = require('./hook');\nexports.Test = require('./test');\n\n/**\n * Return image `name` path.\n *\n * @param {String} name\n * @return {String}\n * @api private\n */\n\nfunction image(name) {\n  return __dirname + '/../images/' + name + '.png';\n}\n\n/**\n * Setup mocha with `options`.\n *\n * Options:\n *\n *   - `ui` name \"bdd\", \"tdd\", \"exports\" etc\n *   - `reporter` reporter instance, defaults to `mocha.reporters.spec`\n *   - `globals` array of accepted globals\n *   - `timeout` timeout in milliseconds\n *   - `bail` bail on the first test failure\n *   - `slow` milliseconds to wait before considering a test slow\n *   - `ignoreLeaks` ignore global leaks\n *   - `grep` string or regexp to filter tests with\n *\n * @param {Object} options\n * @api public\n */\n\nfunction Mocha(options) {\n  options = options || {};\n  this.files = [];\n  this.options = options;\n  this.grep(options.grep);\n  this.suite = new exports.Suite('', new exports.Context);\n  this.ui(options.ui);\n  this.bail(options.bail);\n  this.reporter(options.reporter);\n  if (null != options.timeout) this.timeout(options.timeout);\n  this.useColors(options.useColors)\n  if (options.enableTimeouts !== null) this.enableTimeouts(options.enableTimeouts);\n  if (options.slow) this.slow(options.slow);\n\n  this.suite.on('pre-require', function (context) {\n    exports.afterEach = context.afterEach || context.teardown;\n    exports.after = context.after || context.suiteTeardown;\n    exports.beforeEach = context.beforeEach || context.setup;\n    exports.before = context.before || context.suiteSetup;\n    exports.describe = context.describe || context.suite;\n    exports.it = context.it || context.test;\n    exports.setup = context.setup || context.beforeEach;\n    exports.suiteSetup = context.suiteSetup || context.before;\n    exports.suiteTeardown = context.suiteTeardown || context.after;\n    exports.suite = context.suite || context.describe;\n    exports.teardown = context.teardown || context.afterEach;\n    exports.test = context.test || context.it;\n  });\n}\n\n/**\n * Enable or disable bailing on the first failure.\n *\n * @param {Boolean} [bail]\n * @api public\n */\n\nMocha.prototype.bail = function(bail){\n  if (0 == arguments.length) bail = true;\n  this.suite.bail(bail);\n  return this;\n};\n\n/**\n * Add test `file`.\n *\n * @param {String} file\n * @api public\n */\n\nMocha.prototype.addFile = function(file){\n  this.files.push(file);\n  return this;\n};\n\n/**\n * Set reporter to `reporter`, defaults to \"spec\".\n *\n * @param {String|Function} reporter name or constructor\n * @api public\n */\n\nMocha.prototype.reporter = function(reporter){\n  if ('function' == typeof reporter) {\n    this._reporter = reporter;\n  } else {\n    reporter = reporter || 'spec';\n    var _reporter;\n    try { _reporter = require('./reporters/' + reporter); } catch (err) {};\n    if (!_reporter) try { _reporter = require(reporter); } catch (err) {};\n    if (!_reporter && reporter === 'teamcity')\n      console.warn('The Teamcity reporter was moved to a package named ' +\n        'mocha-teamcity-reporter ' +\n        '(https://npmjs.org/package/mocha-teamcity-reporter).');\n    if (!_reporter) throw new Error('invalid reporter \"' + reporter + '\"');\n    this._reporter = _reporter;\n  }\n  return this;\n};\n\n/**\n * Set test UI `name`, defaults to \"bdd\".\n *\n * @param {String} bdd\n * @api public\n */\n\nMocha.prototype.ui = function(name){\n  name = name || 'bdd';\n  this._ui = exports.interfaces[name];\n  if (!this._ui) try { this._ui = require(name); } catch (err) {};\n  if (!this._ui) throw new Error('invalid interface \"' + name + '\"');\n  this._ui = this._ui(this.suite);\n  return this;\n};\n\n/**\n * Load registered files.\n *\n * @api private\n */\n\nMocha.prototype.loadFiles = function(fn){\n  var self = this;\n  var suite = this.suite;\n  var pending = this.files.length;\n  this.files.forEach(function(file){\n    file = path.resolve(file);\n    suite.emit('pre-require', global, file, self);\n    suite.emit('require', require(file), file, self);\n    suite.emit('post-require', global, file, self);\n    --pending || (fn && fn());\n  });\n};\n\n/**\n * Enable growl support.\n *\n * @api private\n */\n\nMocha.prototype._growl = function(runner, reporter) {\n  var notify = require('growl');\n\n  runner.on('end', function(){\n    var stats = reporter.stats;\n    if (stats.failures) {\n      var msg = stats.failures + ' of ' + runner.total + ' tests failed';\n      notify(msg, { name: 'mocha', title: 'Failed', image: image('error') });\n    } else {\n      notify(stats.passes + ' tests passed in ' + stats.duration + 'ms', {\n          name: 'mocha'\n        , title: 'Passed'\n        , image: image('ok')\n      });\n    }\n  });\n};\n\n/**\n * Add regexp to grep, if `re` is a string it is escaped.\n *\n * @param {RegExp|String} re\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.grep = function(re){\n  this.options.grep = 'string' == typeof re\n    ? new RegExp(escapeRe(re))\n    : re;\n  return this;\n};\n\n/**\n * Invert `.grep()` matches.\n *\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.invert = function(){\n  this.options.invert = true;\n  return this;\n};\n\n/**\n * Ignore global leaks.\n *\n * @param {Boolean} ignore\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.ignoreLeaks = function(ignore){\n  this.options.ignoreLeaks = !!ignore;\n  return this;\n};\n\n/**\n * Enable global leak checking.\n *\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.checkLeaks = function(){\n  this.options.ignoreLeaks = false;\n  return this;\n};\n\n/**\n * Enable growl support.\n *\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.growl = function(){\n  this.options.growl = true;\n  return this;\n};\n\n/**\n * Ignore `globals` array or string.\n *\n * @param {Array|String} globals\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.globals = function(globals){\n  this.options.globals = (this.options.globals || []).concat(globals);\n  return this;\n};\n\n/**\n * Emit color output.\n *\n * @param {Boolean} colors\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.useColors = function(colors){\n  this.options.useColors = arguments.length && colors != undefined\n    ? colors\n    : true;\n  return this;\n};\n\n/**\n * Use inline diffs rather than +/-.\n *\n * @param {Boolean} inlineDiffs\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.useInlineDiffs = function(inlineDiffs) {\n  this.options.useInlineDiffs = arguments.length && inlineDiffs != undefined\n  ? inlineDiffs\n  : false;\n  return this;\n};\n\n/**\n * Set the timeout in milliseconds.\n *\n * @param {Number} timeout\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.timeout = function(timeout){\n  this.suite.timeout(timeout);\n  return this;\n};\n\n/**\n * Set slowness threshold in milliseconds.\n *\n * @param {Number} slow\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.slow = function(slow){\n  this.suite.slow(slow);\n  return this;\n};\n\n/**\n * Enable timeouts.\n *\n * @param {Boolean} enabled\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.enableTimeouts = function(enabled) {\n  this.suite.enableTimeouts(arguments.length && enabled !== undefined\n    ? enabled\n    : true);\n  return this\n};\n\n/**\n * Makes all tests async (accepting a callback)\n *\n * @return {Mocha}\n * @api public\n */\n\nMocha.prototype.asyncOnly = function(){\n  this.options.asyncOnly = true;\n  return this;\n};\n\n/**\n * Disable syntax highlighting (in browser).\n * @returns {Mocha}\n * @api public\n */\nMocha.prototype.noHighlighting = function() {\n  this.options.noHighlighting = true;\n  return this;\n};\n\n/**\n * Run tests and invoke `fn()` when complete.\n *\n * @param {Function} fn\n * @return {Runner}\n * @api public\n */\n\nMocha.prototype.run = function(fn){\n  if (this.files.length) this.loadFiles();\n  var suite = this.suite;\n  var options = this.options;\n  options.files = this.files;\n  var runner = new exports.Runner(suite);\n  var reporter = new this._reporter(runner, options);\n  runner.ignoreLeaks = false !== options.ignoreLeaks;\n  runner.asyncOnly = options.asyncOnly;\n  if (options.grep) runner.grep(options.grep, options.invert);\n  if (options.globals) runner.globals(options.globals);\n  if (options.growl) this._growl(runner, reporter);\n  exports.reporters.Base.useColors = options.useColors;\n  exports.reporters.Base.inlineDiffs = options.useInlineDiffs;\n  return runner.run(fn);\n};\n\n}); // module: mocha.js\n\nrequire.register(\"ms.js\", function(module, exports, require){\n/**\n * Helpers.\n */\n\nvar s = 1000;\nvar m = s * 60;\nvar h = m * 60;\nvar d = h * 24;\nvar y = d * 365.25;\n\n/**\n * Parse or format the given `val`.\n *\n * Options:\n *\n *  - `long` verbose formatting [false]\n *\n * @param {String|Number} val\n * @param {Object} options\n * @return {String|Number}\n * @api public\n */\n\nmodule.exports = function(val, options){\n  options = options || {};\n  if ('string' == typeof val) return parse(val);\n  return options['long'] ? longFormat(val) : shortFormat(val);\n};\n\n/**\n * Parse the given `str` and return milliseconds.\n *\n * @param {String} str\n * @return {Number}\n * @api private\n */\n\nfunction parse(str) {\n  var match = /^((?:\\d+)?\\.?\\d+) *(ms|seconds?|s|minutes?|m|hours?|h|days?|d|years?|y)?$/i.exec(str);\n  if (!match) return;\n  var n = parseFloat(match[1]);\n  var type = (match[2] || 'ms').toLowerCase();\n  switch (type) {\n    case 'years':\n    case 'year':\n    case 'y':\n      return n * y;\n    case 'days':\n    case 'day':\n    case 'd':\n      return n * d;\n    case 'hours':\n    case 'hour':\n    case 'h':\n      return n * h;\n    case 'minutes':\n    case 'minute':\n    case 'm':\n      return n * m;\n    case 'seconds':\n    case 'second':\n    case 's':\n      return n * s;\n    case 'ms':\n      return n;\n  }\n}\n\n/**\n * Short format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction shortFormat(ms) {\n  if (ms >= d) return Math.round(ms / d) + 'd';\n  if (ms >= h) return Math.round(ms / h) + 'h';\n  if (ms >= m) return Math.round(ms / m) + 'm';\n  if (ms >= s) return Math.round(ms / s) + 's';\n  return ms + 'ms';\n}\n\n/**\n * Long format for `ms`.\n *\n * @param {Number} ms\n * @return {String}\n * @api private\n */\n\nfunction longFormat(ms) {\n  return plural(ms, d, 'day')\n    || plural(ms, h, 'hour')\n    || plural(ms, m, 'minute')\n    || plural(ms, s, 'second')\n    || ms + ' ms';\n}\n\n/**\n * Pluralization helper.\n */\n\nfunction plural(ms, n, name) {\n  if (ms < n) return;\n  if (ms < n * 1.5) return Math.floor(ms / n) + ' ' + name;\n  return Math.ceil(ms / n) + ' ' + name + 's';\n}\n\n}); // module: ms.js\n\nrequire.register(\"reporters/base.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar tty = require('browser/tty')\n  , diff = require('browser/diff')\n  , ms = require('../ms')\n  , utils = require('../utils');\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\nvar Date = global.Date\n  , setTimeout = global.setTimeout\n  , setInterval = global.setInterval\n  , clearTimeout = global.clearTimeout\n  , clearInterval = global.clearInterval;\n\n/**\n * Check if both stdio streams are associated with a tty.\n */\n\nvar isatty = tty.isatty(1) && tty.isatty(2);\n\n/**\n * Expose `Base`.\n */\n\nexports = module.exports = Base;\n\n/**\n * Enable coloring by default.\n */\n\nexports.useColors = isatty || (process.env.MOCHA_COLORS !== undefined);\n\n/**\n * Inline diffs instead of +/-\n */\n\nexports.inlineDiffs = false;\n\n/**\n * Default color map.\n */\n\nexports.colors = {\n    'pass': 90\n  , 'fail': 31\n  , 'bright pass': 92\n  , 'bright fail': 91\n  , 'bright yellow': 93\n  , 'pending': 36\n  , 'suite': 0\n  , 'error title': 0\n  , 'error message': 31\n  , 'error stack': 90\n  , 'checkmark': 32\n  , 'fast': 90\n  , 'medium': 33\n  , 'slow': 31\n  , 'green': 32\n  , 'light': 90\n  , 'diff gutter': 90\n  , 'diff added': 42\n  , 'diff removed': 41\n};\n\n/**\n * Default symbol map.\n */\n\nexports.symbols = {\n  ok: '✓',\n  err: '✖',\n  dot: '․'\n};\n\n// With node.js on Windows: use symbols available in terminal default fonts\nif ('win32' == process.platform) {\n  exports.symbols.ok = '\\u221A';\n  exports.symbols.err = '\\u00D7';\n  exports.symbols.dot = '.';\n}\n\n/**\n * Color `str` with the given `type`,\n * allowing colors to be disabled,\n * as well as user-defined color\n * schemes.\n *\n * @param {String} type\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nvar color = exports.color = function(type, str) {\n  if (!exports.useColors) return str;\n  return '\\u001b[' + exports.colors[type] + 'm' + str + '\\u001b[0m';\n};\n\n/**\n * Expose term window size, with some\n * defaults for when stderr is not a tty.\n */\n\nexports.window = {\n  width: isatty\n    ? process.stdout.getWindowSize\n      ? process.stdout.getWindowSize(1)[0]\n      : tty.getWindowSize()[1]\n    : 75\n};\n\n/**\n * Expose some basic cursor interactions\n * that are common among reporters.\n */\n\nexports.cursor = {\n  hide: function(){\n    isatty && process.stdout.write('\\u001b[?25l');\n  },\n\n  show: function(){\n    isatty && process.stdout.write('\\u001b[?25h');\n  },\n\n  deleteLine: function(){\n    isatty && process.stdout.write('\\u001b[2K');\n  },\n\n  beginningOfLine: function(){\n    isatty && process.stdout.write('\\u001b[0G');\n  },\n\n  CR: function(){\n    if (isatty) {\n      exports.cursor.deleteLine();\n      exports.cursor.beginningOfLine();\n    } else {\n      process.stdout.write('\\r');\n    }\n  }\n};\n\n/**\n * Outut the given `failures` as a list.\n *\n * @param {Array} failures\n * @api public\n */\n\nexports.list = function(failures){\n  console.error();\n  failures.forEach(function(test, i){\n    // format\n    var fmt = color('error title', '  %s) %s:\\n')\n      + color('error message', '     %s')\n      + color('error stack', '\\n%s\\n');\n\n    // msg\n    var err = test.err\n      , message = err.message || ''\n      , stack = err.stack || message\n      , index = stack.indexOf(message) + message.length\n      , msg = stack.slice(0, index)\n      , actual = err.actual\n      , expected = err.expected\n      , escape = true;\n\n    // uncaught\n    if (err.uncaught) {\n      msg = 'Uncaught ' + msg;\n    }\n\n    // explicitly show diff\n    if (err.showDiff && sameType(actual, expected)) {\n      escape = false;\n      err.actual = actual = utils.stringify(actual);\n      err.expected = expected = utils.stringify(expected);\n    }\n\n    // actual / expected diff\n    if (err.showDiff && 'string' == typeof actual && 'string' == typeof expected) {\n      fmt = color('error title', '  %s) %s:\\n%s') + color('error stack', '\\n%s\\n');\n      var match = message.match(/^([^:]+): expected/);\n      msg = '\\n      ' + color('error message', match ? match[1] : msg);\n\n      if (exports.inlineDiffs) {\n        msg += inlineDiff(err, escape);\n      } else {\n        msg += unifiedDiff(err, escape);\n      }\n    }\n\n    // indent stack trace without msg\n    stack = stack.slice(index ? index + 1 : index)\n      .replace(/^/gm, '  ');\n\n    console.error(fmt, (i + 1), test.fullTitle(), msg, stack);\n  });\n};\n\n/**\n * Initialize a new `Base` reporter.\n *\n * All other reporters generally\n * inherit from this reporter, providing\n * stats such as test duration, number\n * of tests passed / failed etc.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction Base(runner) {\n  var self = this\n    , stats = this.stats = { suites: 0, tests: 0, passes: 0, pending: 0, failures: 0 }\n    , failures = this.failures = [];\n\n  if (!runner) return;\n  this.runner = runner;\n\n  runner.stats = stats;\n\n  runner.on('start', function(){\n    stats.start = new Date;\n  });\n\n  runner.on('suite', function(suite){\n    stats.suites = stats.suites || 0;\n    suite.root || stats.suites++;\n  });\n\n  runner.on('test end', function(test){\n    stats.tests = stats.tests || 0;\n    stats.tests++;\n  });\n\n  runner.on('pass', function(test){\n    stats.passes = stats.passes || 0;\n\n    var medium = test.slow() / 2;\n    test.speed = test.duration > test.slow()\n      ? 'slow'\n      : test.duration > medium\n        ? 'medium'\n        : 'fast';\n\n    stats.passes++;\n  });\n\n  runner.on('fail', function(test, err){\n    stats.failures = stats.failures || 0;\n    stats.failures++;\n    test.err = err;\n    failures.push(test);\n  });\n\n  runner.on('end', function(){\n    stats.end = new Date;\n    stats.duration = new Date - stats.start;\n  });\n\n  runner.on('pending', function(){\n    stats.pending++;\n  });\n}\n\n/**\n * Output common epilogue used by many of\n * the bundled reporters.\n *\n * @api public\n */\n\nBase.prototype.epilogue = function(){\n  var stats = this.stats;\n  var tests;\n  var fmt;\n\n  console.log();\n\n  // passes\n  fmt = color('bright pass', ' ')\n    + color('green', ' %d passing')\n    + color('light', ' (%s)');\n\n  console.log(fmt,\n    stats.passes || 0,\n    ms(stats.duration));\n\n  // pending\n  if (stats.pending) {\n    fmt = color('pending', ' ')\n      + color('pending', ' %d pending');\n\n    console.log(fmt, stats.pending);\n  }\n\n  // failures\n  if (stats.failures) {\n    fmt = color('fail', '  %d failing');\n\n    console.error(fmt,\n      stats.failures);\n\n    Base.list(this.failures);\n    console.error();\n  }\n\n  console.log();\n};\n\n/**\n * Pad the given `str` to `len`.\n *\n * @param {String} str\n * @param {String} len\n * @return {String}\n * @api private\n */\n\nfunction pad(str, len) {\n  str = String(str);\n  return Array(len - str.length + 1).join(' ') + str;\n}\n\n\n/**\n * Returns an inline diff between 2 strings with coloured ANSI output\n *\n * @param {Error} Error with actual/expected\n * @return {String} Diff\n * @api private\n */\n\nfunction inlineDiff(err, escape) {\n  var msg = errorDiff(err, 'WordsWithSpace', escape);\n\n  // linenos\n  var lines = msg.split('\\n');\n  if (lines.length > 4) {\n    var width = String(lines.length).length;\n    msg = lines.map(function(str, i){\n      return pad(++i, width) + ' |' + ' ' + str;\n    }).join('\\n');\n  }\n\n  // legend\n  msg = '\\n'\n    + color('diff removed', 'actual')\n    + ' '\n    + color('diff added', 'expected')\n    + '\\n\\n'\n    + msg\n    + '\\n';\n\n  // indent\n  msg = msg.replace(/^/gm, '      ');\n  return msg;\n}\n\n/**\n * Returns a unified diff between 2 strings\n *\n * @param {Error} Error with actual/expected\n * @return {String} Diff\n * @api private\n */\n\nfunction unifiedDiff(err, escape) {\n  var indent = '      ';\n  function cleanUp(line) {\n    if (escape) {\n      line = escapeInvisibles(line);\n    }\n    if (line[0] === '+') return indent + colorLines('diff added', line);\n    if (line[0] === '-') return indent + colorLines('diff removed', line);\n    if (line.match(/\\@\\@/)) return null;\n    if (line.match(/\\\\ No newline/)) return null;\n    else return indent + line;\n  }\n  function notBlank(line) {\n    return line != null;\n  }\n  msg = diff.createPatch('string', err.actual, err.expected);\n  var lines = msg.split('\\n').splice(4);\n  return '\\n      '\n         + colorLines('diff added',   '+ expected') + ' '\n         + colorLines('diff removed', '- actual')\n         + '\\n\\n'\n         + lines.map(cleanUp).filter(notBlank).join('\\n');\n}\n\n/**\n * Return a character diff for `err`.\n *\n * @param {Error} err\n * @return {String}\n * @api private\n */\n\nfunction errorDiff(err, type, escape) {\n  var actual   = escape ? escapeInvisibles(err.actual)   : err.actual;\n  var expected = escape ? escapeInvisibles(err.expected) : err.expected;\n  return diff['diff' + type](actual, expected).map(function(str){\n    if (str.added) return colorLines('diff added', str.value);\n    if (str.removed) return colorLines('diff removed', str.value);\n    return str.value;\n  }).join('');\n}\n\n/**\n * Returns a string with all invisible characters in plain text\n *\n * @param {String} line\n * @return {String}\n * @api private\n */\nfunction escapeInvisibles(line) {\n    return line.replace(/\\t/g, '<tab>')\n               .replace(/\\r/g, '<CR>')\n               .replace(/\\n/g, '<LF>\\n');\n}\n\n/**\n * Color lines for `str`, using the color `name`.\n *\n * @param {String} name\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nfunction colorLines(name, str) {\n  return str.split('\\n').map(function(str){\n    return color(name, str);\n  }).join('\\n');\n}\n\n/**\n * Check that a / b have the same type.\n *\n * @param {Object} a\n * @param {Object} b\n * @return {Boolean}\n * @api private\n */\n\nfunction sameType(a, b) {\n  a = Object.prototype.toString.call(a);\n  b = Object.prototype.toString.call(b);\n  return a == b;\n}\n\n}); // module: reporters/base.js\n\nrequire.register(\"reporters/doc.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , utils = require('../utils');\n\n/**\n * Expose `Doc`.\n */\n\nexports = module.exports = Doc;\n\n/**\n * Initialize a new `Doc` reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction Doc(runner) {\n  Base.call(this, runner);\n\n  var self = this\n    , stats = this.stats\n    , total = runner.total\n    , indents = 2;\n\n  function indent() {\n    return Array(indents).join('  ');\n  }\n\n  runner.on('suite', function(suite){\n    if (suite.root) return;\n    ++indents;\n    console.log('%s<section class=\"suite\">', indent());\n    ++indents;\n    console.log('%s<h1>%s</h1>', indent(), utils.escape(suite.title));\n    console.log('%s<dl>', indent());\n  });\n\n  runner.on('suite end', function(suite){\n    if (suite.root) return;\n    console.log('%s</dl>', indent());\n    --indents;\n    console.log('%s</section>', indent());\n    --indents;\n  });\n\n  runner.on('pass', function(test){\n    console.log('%s  <dt>%s</dt>', indent(), utils.escape(test.title));\n    var code = utils.escape(utils.clean(test.fn.toString()));\n    console.log('%s  <dd><pre><code>%s</code></pre></dd>', indent(), code);\n  });\n\n  runner.on('fail', function(test, err){\n    console.log('%s  <dt class=\"error\">%s</dt>', indent(), utils.escape(test.title));\n    var code = utils.escape(utils.clean(test.fn.toString()));\n    console.log('%s  <dd class=\"error\"><pre><code>%s</code></pre></dd>', indent(), code);\n    console.log('%s  <dd class=\"error\">%s</dd>', indent(), utils.escape(err));\n  });\n}\n\n}); // module: reporters/doc.js\n\nrequire.register(\"reporters/dot.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , color = Base.color;\n\n/**\n * Expose `Dot`.\n */\n\nexports = module.exports = Dot;\n\n/**\n * Initialize a new `Dot` matrix test reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction Dot(runner) {\n  Base.call(this, runner);\n\n  var self = this\n    , stats = this.stats\n    , width = Base.window.width * .75 | 0\n    , n = -1;\n\n  runner.on('start', function(){\n    process.stdout.write('\\n  ');\n  });\n\n  runner.on('pending', function(test){\n    if (++n % width == 0) process.stdout.write('\\n  ');\n    process.stdout.write(color('pending', Base.symbols.dot));\n  });\n\n  runner.on('pass', function(test){\n    if (++n % width == 0) process.stdout.write('\\n  ');\n    if ('slow' == test.speed) {\n      process.stdout.write(color('bright yellow', Base.symbols.dot));\n    } else {\n      process.stdout.write(color(test.speed, Base.symbols.dot));\n    }\n  });\n\n  runner.on('fail', function(test, err){\n    if (++n % width == 0) process.stdout.write('\\n  ');\n    process.stdout.write(color('fail', Base.symbols.dot));\n  });\n\n  runner.on('end', function(){\n    console.log();\n    self.epilogue();\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\n\nfunction F(){};\nF.prototype = Base.prototype;\nDot.prototype = new F;\nDot.prototype.constructor = Dot;\n\n\n}); // module: reporters/dot.js\n\nrequire.register(\"reporters/html-cov.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar JSONCov = require('./json-cov')\n  , fs = require('browser/fs');\n\n/**\n * Expose `HTMLCov`.\n */\n\nexports = module.exports = HTMLCov;\n\n/**\n * Initialize a new `JsCoverage` reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction HTMLCov(runner) {\n  var jade = require('jade')\n    , file = __dirname + '/templates/coverage.jade'\n    , str = fs.readFileSync(file, 'utf8')\n    , fn = jade.compile(str, { filename: file })\n    , self = this;\n\n  JSONCov.call(this, runner, false);\n\n  runner.on('end', function(){\n    process.stdout.write(fn({\n        cov: self.cov\n      , coverageClass: coverageClass\n    }));\n  });\n}\n\n/**\n * Return coverage class for `n`.\n *\n * @return {String}\n * @api private\n */\n\nfunction coverageClass(n) {\n  if (n >= 75) return 'high';\n  if (n >= 50) return 'medium';\n  if (n >= 25) return 'low';\n  return 'terrible';\n}\n\n}); // module: reporters/html-cov.js\n\nrequire.register(\"reporters/html.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , utils = require('../utils')\n  , Progress = require('../browser/progress')\n  , escape = utils.escape;\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\nvar Date = global.Date\n  , setTimeout = global.setTimeout\n  , setInterval = global.setInterval\n  , clearTimeout = global.clearTimeout\n  , clearInterval = global.clearInterval;\n\n/**\n * Expose `HTML`.\n */\n\nexports = module.exports = HTML;\n\n/**\n * Stats template.\n */\n\nvar statsTemplate = '<ul id=\"mocha-stats\">'\n  + '<li class=\"progress\"><canvas width=\"40\" height=\"40\"></canvas></li>'\n  + '<li class=\"passes\"><a href=\"#\">passes:</a> <em>0</em></li>'\n  + '<li class=\"failures\"><a href=\"#\">failures:</a> <em>0</em></li>'\n  + '<li class=\"duration\">duration: <em>0</em>s</li>'\n  + '</ul>';\n\n/**\n * Initialize a new `HTML` reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction HTML(runner) {\n  Base.call(this, runner);\n\n  var self = this\n    , stats = this.stats\n    , total = runner.total\n    , stat = fragment(statsTemplate)\n    , items = stat.getElementsByTagName('li')\n    , passes = items[1].getElementsByTagName('em')[0]\n    , passesLink = items[1].getElementsByTagName('a')[0]\n    , failures = items[2].getElementsByTagName('em')[0]\n    , failuresLink = items[2].getElementsByTagName('a')[0]\n    , duration = items[3].getElementsByTagName('em')[0]\n    , canvas = stat.getElementsByTagName('canvas')[0]\n    , report = fragment('<ul id=\"mocha-report\"></ul>')\n    , stack = [report]\n    , progress\n    , ctx\n    , root = document.getElementById('mocha');\n\n  if (canvas.getContext) {\n    var ratio = window.devicePixelRatio || 1;\n    canvas.style.width = canvas.width;\n    canvas.style.height = canvas.height;\n    canvas.width *= ratio;\n    canvas.height *= ratio;\n    ctx = canvas.getContext('2d');\n    ctx.scale(ratio, ratio);\n    progress = new Progress;\n  }\n\n  if (!root) return error('#mocha div missing, add it to your document');\n\n  // pass toggle\n  on(passesLink, 'click', function(){\n    unhide();\n    var name = /pass/.test(report.className) ? '' : ' pass';\n    report.className = report.className.replace(/fail|pass/g, '') + name;\n    if (report.className.trim()) hideSuitesWithout('test pass');\n  });\n\n  // failure toggle\n  on(failuresLink, 'click', function(){\n    unhide();\n    var name = /fail/.test(report.className) ? '' : ' fail';\n    report.className = report.className.replace(/fail|pass/g, '') + name;\n    if (report.className.trim()) hideSuitesWithout('test fail');\n  });\n\n  root.appendChild(stat);\n  root.appendChild(report);\n\n  if (progress) progress.size(40);\n\n  runner.on('suite', function(suite){\n    if (suite.root) return;\n\n    // suite\n    var url = self.suiteURL(suite);\n    var el = fragment('<li class=\"suite\"><h1><a href=\"%s\">%s</a></h1></li>', url, escape(suite.title));\n\n    // container\n    stack[0].appendChild(el);\n    stack.unshift(document.createElement('ul'));\n    el.appendChild(stack[0]);\n  });\n\n  runner.on('suite end', function(suite){\n    if (suite.root) return;\n    stack.shift();\n  });\n\n  runner.on('fail', function(test, err){\n    if ('hook' == test.type) runner.emit('test end', test);\n  });\n\n  runner.on('test end', function(test){\n    // TODO: add to stats\n    var percent = stats.tests / this.total * 100 | 0;\n    if (progress) progress.update(percent).draw(ctx);\n\n    // update stats\n    var ms = new Date - stats.start;\n    text(passes, stats.passes);\n    text(failures, stats.failures);\n    text(duration, (ms / 1000).toFixed(2));\n\n    // test\n    if ('passed' == test.state) {\n      var url = self.testURL(test);\n      var el = fragment('<li class=\"test pass %e\"><h2>%e<span class=\"duration\">%ems</span> <a href=\"%s\" class=\"replay\">‣</a></h2></li>', test.speed, test.title, test.duration, url);\n    } else if (test.pending) {\n      var el = fragment('<li class=\"test pass pending\"><h2>%e</h2></li>', test.title);\n    } else {\n      var el = fragment('<li class=\"test fail\"><h2>%e <a href=\"?grep=%e\" class=\"replay\">‣</a></h2></li>', test.title, encodeURIComponent(test.fullTitle()));\n      var str = test.err.stack || test.err.toString();\n\n      // FF / Opera do not add the message\n      if (!~str.indexOf(test.err.message)) {\n        str = test.err.message + '\\n' + str;\n      }\n\n      // <=IE7 stringifies to [Object Error]. Since it can be overloaded, we\n      // check for the result of the stringifying.\n      if ('[object Error]' == str) str = test.err.message;\n\n      // Safari doesn't give you a stack. Let's at least provide a source line.\n      if (!test.err.stack && test.err.sourceURL && test.err.line !== undefined) {\n        str += \"\\n(\" + test.err.sourceURL + \":\" + test.err.line + \")\";\n      }\n\n      el.appendChild(fragment('<pre class=\"error\">%e</pre>', str));\n    }\n\n    // toggle code\n    // TODO: defer\n    if (!test.pending) {\n      var h2 = el.getElementsByTagName('h2')[0];\n\n      on(h2, 'click', function(){\n        pre.style.display = 'none' == pre.style.display\n          ? 'block'\n          : 'none';\n      });\n\n      var pre = fragment('<pre><code>%e</code></pre>', utils.clean(test.fn.toString()));\n      el.appendChild(pre);\n      pre.style.display = 'none';\n    }\n\n    // Don't call .appendChild if #mocha-report was already .shift()'ed off the stack.\n    if (stack[0]) stack[0].appendChild(el);\n  });\n}\n\n/**\n * Makes a URL, preserving querystring (\"search\") parameters.\n * @param {string} s\n * @returns {string} your new URL\n */\nvar makeUrl = function makeUrl(s) {\n  var search = window.location.search;\n  return (search ? search + '&' : '?' ) + 'grep=' + encodeURIComponent(s);\n};\n\n/**\n * Provide suite URL\n *\n * @param {Object} [suite]\n */\nHTML.prototype.suiteURL = function(suite){\n  return makeUrl(suite.fullTitle());\n};\n\n/**\n * Provide test URL\n *\n * @param {Object} [test]\n */\n\nHTML.prototype.testURL = function(test){\n  return makeUrl(test.fullTitle());\n};\n\n/**\n * Display error `msg`.\n */\n\nfunction error(msg) {\n  document.body.appendChild(fragment('<div id=\"mocha-error\">%s</div>', msg));\n}\n\n/**\n * Return a DOM fragment from `html`.\n */\n\nfunction fragment(html) {\n  var args = arguments\n    , div = document.createElement('div')\n    , i = 1;\n\n  div.innerHTML = html.replace(/%([se])/g, function(_, type){\n    switch (type) {\n      case 's': return String(args[i++]);\n      case 'e': return escape(args[i++]);\n    }\n  });\n\n  return div.firstChild;\n}\n\n/**\n * Check for suites that do not have elements\n * with `classname`, and hide them.\n */\n\nfunction hideSuitesWithout(classname) {\n  var suites = document.getElementsByClassName('suite');\n  for (var i = 0; i < suites.length; i++) {\n    var els = suites[i].getElementsByClassName(classname);\n    if (0 == els.length) suites[i].className += ' hidden';\n  }\n}\n\n/**\n * Unhide .hidden suites.\n */\n\nfunction unhide() {\n  var els = document.getElementsByClassName('suite hidden');\n  for (var i = 0; i < els.length; ++i) {\n    els[i].className = els[i].className.replace('suite hidden', 'suite');\n  }\n}\n\n/**\n * Set `el` text to `str`.\n */\n\nfunction text(el, str) {\n  if (el.textContent) {\n    el.textContent = str;\n  } else {\n    el.innerText = str;\n  }\n}\n\n/**\n * Listen on `event` with callback `fn`.\n */\n\nfunction on(el, event, fn) {\n  if (el.addEventListener) {\n    el.addEventListener(event, fn, false);\n  } else {\n    el.attachEvent('on' + event, fn);\n  }\n}\n\n}); // module: reporters/html.js\n\nrequire.register(\"reporters/index.js\", function(module, exports, require){\nexports.Base = require('./base');\nexports.Dot = require('./dot');\nexports.Doc = require('./doc');\nexports.TAP = require('./tap');\nexports.JSON = require('./json');\nexports.HTML = require('./html');\nexports.List = require('./list');\nexports.Min = require('./min');\nexports.Spec = require('./spec');\nexports.Nyan = require('./nyan');\nexports.XUnit = require('./xunit');\nexports.Markdown = require('./markdown');\nexports.Progress = require('./progress');\nexports.Landing = require('./landing');\nexports.JSONCov = require('./json-cov');\nexports.HTMLCov = require('./html-cov');\nexports.JSONStream = require('./json-stream');\n\n}); // module: reporters/index.js\n\nrequire.register(\"reporters/json-cov.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\n\n/**\n * Expose `JSONCov`.\n */\n\nexports = module.exports = JSONCov;\n\n/**\n * Initialize a new `JsCoverage` reporter.\n *\n * @param {Runner} runner\n * @param {Boolean} output\n * @api public\n */\n\nfunction JSONCov(runner, output) {\n  var self = this\n    , output = 1 == arguments.length ? true : output;\n\n  Base.call(this, runner);\n\n  var tests = []\n    , failures = []\n    , passes = [];\n\n  runner.on('test end', function(test){\n    tests.push(test);\n  });\n\n  runner.on('pass', function(test){\n    passes.push(test);\n  });\n\n  runner.on('fail', function(test){\n    failures.push(test);\n  });\n\n  runner.on('end', function(){\n    var cov = global._$jscoverage || {};\n    var result = self.cov = map(cov);\n    result.stats = self.stats;\n    result.tests = tests.map(clean);\n    result.failures = failures.map(clean);\n    result.passes = passes.map(clean);\n    if (!output) return;\n    process.stdout.write(JSON.stringify(result, null, 2 ));\n  });\n}\n\n/**\n * Map jscoverage data to a JSON structure\n * suitable for reporting.\n *\n * @param {Object} cov\n * @return {Object}\n * @api private\n */\n\nfunction map(cov) {\n  var ret = {\n      instrumentation: 'node-jscoverage'\n    , sloc: 0\n    , hits: 0\n    , misses: 0\n    , coverage: 0\n    , files: []\n  };\n\n  for (var filename in cov) {\n    var data = coverage(filename, cov[filename]);\n    ret.files.push(data);\n    ret.hits += data.hits;\n    ret.misses += data.misses;\n    ret.sloc += data.sloc;\n  }\n\n  ret.files.sort(function(a, b) {\n    return a.filename.localeCompare(b.filename);\n  });\n\n  if (ret.sloc > 0) {\n    ret.coverage = (ret.hits / ret.sloc) * 100;\n  }\n\n  return ret;\n}\n\n/**\n * Map jscoverage data for a single source file\n * to a JSON structure suitable for reporting.\n *\n * @param {String} filename name of the source file\n * @param {Object} data jscoverage coverage data\n * @return {Object}\n * @api private\n */\n\nfunction coverage(filename, data) {\n  var ret = {\n    filename: filename,\n    coverage: 0,\n    hits: 0,\n    misses: 0,\n    sloc: 0,\n    source: {}\n  };\n\n  data.source.forEach(function(line, num){\n    num++;\n\n    if (data[num] === 0) {\n      ret.misses++;\n      ret.sloc++;\n    } else if (data[num] !== undefined) {\n      ret.hits++;\n      ret.sloc++;\n    }\n\n    ret.source[num] = {\n        source: line\n      , coverage: data[num] === undefined\n        ? ''\n        : data[num]\n    };\n  });\n\n  ret.coverage = ret.hits / ret.sloc * 100;\n\n  return ret;\n}\n\n/**\n * Return a plain-object representation of `test`\n * free of cyclic properties etc.\n *\n * @param {Object} test\n * @return {Object}\n * @api private\n */\n\nfunction clean(test) {\n  return {\n      title: test.title\n    , fullTitle: test.fullTitle()\n    , duration: test.duration\n  }\n}\n\n}); // module: reporters/json-cov.js\n\nrequire.register(\"reporters/json-stream.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , color = Base.color;\n\n/**\n * Expose `List`.\n */\n\nexports = module.exports = List;\n\n/**\n * Initialize a new `List` test reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction List(runner) {\n  Base.call(this, runner);\n\n  var self = this\n    , stats = this.stats\n    , total = runner.total;\n\n  runner.on('start', function(){\n    console.log(JSON.stringify(['start', { total: total }]));\n  });\n\n  runner.on('pass', function(test){\n    console.log(JSON.stringify(['pass', clean(test)]));\n  });\n\n  runner.on('fail', function(test, err){\n    test = clean(test);\n    test.err = err.message;\n    console.log(JSON.stringify(['fail', test]));\n  });\n\n  runner.on('end', function(){\n    process.stdout.write(JSON.stringify(['end', self.stats]));\n  });\n}\n\n/**\n * Return a plain-object representation of `test`\n * free of cyclic properties etc.\n *\n * @param {Object} test\n * @return {Object}\n * @api private\n */\n\nfunction clean(test) {\n  return {\n      title: test.title\n    , fullTitle: test.fullTitle()\n    , duration: test.duration\n  }\n}\n\n}); // module: reporters/json-stream.js\n\nrequire.register(\"reporters/json.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , cursor = Base.cursor\n  , color = Base.color;\n\n/**\n * Expose `JSON`.\n */\n\nexports = module.exports = JSONReporter;\n\n/**\n * Initialize a new `JSON` reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction JSONReporter(runner) {\n  var self = this;\n  Base.call(this, runner);\n\n  var tests = []\n    , pending = []\n    , failures = []\n    , passes = [];\n\n  runner.on('test end', function(test){\n    tests.push(test);\n  });\n\n  runner.on('pass', function(test){\n    passes.push(test);\n  });\n\n  runner.on('fail', function(test){\n    failures.push(test);\n  });\n\n  runner.on('pending', function(test){\n    pending.push(test);\n  });\n\n  runner.on('end', function(){\n    var obj = {\n      stats: self.stats,\n      tests: tests.map(clean),\n      pending: pending.map(clean),\n      failures: failures.map(clean),\n      passes: passes.map(clean)\n    };\n\n    runner.testResults = obj;\n\n    process.stdout.write(JSON.stringify(obj, null, 2));\n  });\n}\n\n/**\n * Return a plain-object representation of `test`\n * free of cyclic properties etc.\n *\n * @param {Object} test\n * @return {Object}\n * @api private\n */\n\nfunction clean(test) {\n  return {\n    title: test.title,\n    fullTitle: test.fullTitle(),\n    duration: test.duration,\n    err: errorJSON(test.err || {})\n  }\n}\n\n/**\n * Transform `error` into a JSON object.\n * @param {Error} err\n * @return {Object}\n */\n\nfunction errorJSON(err) {\n  var res = {};\n  Object.getOwnPropertyNames(err).forEach(function(key) {\n    res[key] = err[key];\n  }, err);\n  return res;\n}\n\n}); // module: reporters/json.js\n\nrequire.register(\"reporters/landing.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , cursor = Base.cursor\n  , color = Base.color;\n\n/**\n * Expose `Landing`.\n */\n\nexports = module.exports = Landing;\n\n/**\n * Airplane color.\n */\n\nBase.colors.plane = 0;\n\n/**\n * Airplane crash color.\n */\n\nBase.colors['plane crash'] = 31;\n\n/**\n * Runway color.\n */\n\nBase.colors.runway = 90;\n\n/**\n * Initialize a new `Landing` reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction Landing(runner) {\n  Base.call(this, runner);\n\n  var self = this\n    , stats = this.stats\n    , width = Base.window.width * .75 | 0\n    , total = runner.total\n    , stream = process.stdout\n    , plane = color('plane', '✈')\n    , crashed = -1\n    , n = 0;\n\n  function runway() {\n    var buf = Array(width).join('-');\n    return '  ' + color('runway', buf);\n  }\n\n  runner.on('start', function(){\n    stream.write('\\n\\n\\n  ');\n    cursor.hide();\n  });\n\n  runner.on('test end', function(test){\n    // check if the plane crashed\n    var col = -1 == crashed\n      ? width * ++n / total | 0\n      : crashed;\n\n    // show the crash\n    if ('failed' == test.state) {\n      plane = color('plane crash', '✈');\n      crashed = col;\n    }\n\n    // render landing strip\n    stream.write('\\u001b['+(width+1)+'D\\u001b[2A');\n    stream.write(runway());\n    stream.write('\\n  ');\n    stream.write(color('runway', Array(col).join('⋅')));\n    stream.write(plane)\n    stream.write(color('runway', Array(width - col).join('⋅') + '\\n'));\n    stream.write(runway());\n    stream.write('\\u001b[0m');\n  });\n\n  runner.on('end', function(){\n    cursor.show();\n    console.log();\n    self.epilogue();\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\n\nfunction F(){};\nF.prototype = Base.prototype;\nLanding.prototype = new F;\nLanding.prototype.constructor = Landing;\n\n\n}); // module: reporters/landing.js\n\nrequire.register(\"reporters/list.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , cursor = Base.cursor\n  , color = Base.color;\n\n/**\n * Expose `List`.\n */\n\nexports = module.exports = List;\n\n/**\n * Initialize a new `List` test reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction List(runner) {\n  Base.call(this, runner);\n\n  var self = this\n    , stats = this.stats\n    , n = 0;\n\n  runner.on('start', function(){\n    console.log();\n  });\n\n  runner.on('test', function(test){\n    process.stdout.write(color('pass', '    ' + test.fullTitle() + ': '));\n  });\n\n  runner.on('pending', function(test){\n    var fmt = color('checkmark', '  -')\n      + color('pending', ' %s');\n    console.log(fmt, test.fullTitle());\n  });\n\n  runner.on('pass', function(test){\n    var fmt = color('checkmark', '  '+Base.symbols.dot)\n      + color('pass', ' %s: ')\n      + color(test.speed, '%dms');\n    cursor.CR();\n    console.log(fmt, test.fullTitle(), test.duration);\n  });\n\n  runner.on('fail', function(test, err){\n    cursor.CR();\n    console.log(color('fail', '  %d) %s'), ++n, test.fullTitle());\n  });\n\n  runner.on('end', self.epilogue.bind(self));\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\n\nfunction F(){};\nF.prototype = Base.prototype;\nList.prototype = new F;\nList.prototype.constructor = List;\n\n\n}); // module: reporters/list.js\n\nrequire.register(\"reporters/markdown.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , utils = require('../utils');\n\n/**\n * Expose `Markdown`.\n */\n\nexports = module.exports = Markdown;\n\n/**\n * Initialize a new `Markdown` reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction Markdown(runner) {\n  Base.call(this, runner);\n\n  var self = this\n    , stats = this.stats\n    , level = 0\n    , buf = '';\n\n  function title(str) {\n    return Array(level).join('#') + ' ' + str;\n  }\n\n  function indent() {\n    return Array(level).join('  ');\n  }\n\n  function mapTOC(suite, obj) {\n    var ret = obj;\n    obj = obj[suite.title] = obj[suite.title] || { suite: suite };\n    suite.suites.forEach(function(suite){\n      mapTOC(suite, obj);\n    });\n    return ret;\n  }\n\n  function stringifyTOC(obj, level) {\n    ++level;\n    var buf = '';\n    var link;\n    for (var key in obj) {\n      if ('suite' == key) continue;\n      if (key) link = ' - [' + key + '](#' + utils.slug(obj[key].suite.fullTitle()) + ')\\n';\n      if (key) buf += Array(level).join('  ') + link;\n      buf += stringifyTOC(obj[key], level);\n    }\n    --level;\n    return buf;\n  }\n\n  function generateTOC(suite) {\n    var obj = mapTOC(suite, {});\n    return stringifyTOC(obj, 0);\n  }\n\n  generateTOC(runner.suite);\n\n  runner.on('suite', function(suite){\n    ++level;\n    var slug = utils.slug(suite.fullTitle());\n    buf += '<a name=\"' + slug + '\"></a>' + '\\n';\n    buf += title(suite.title) + '\\n';\n  });\n\n  runner.on('suite end', function(suite){\n    --level;\n  });\n\n  runner.on('pass', function(test){\n    var code = utils.clean(test.fn.toString());\n    buf += test.title + '.\\n';\n    buf += '\\n```js\\n';\n    buf += code + '\\n';\n    buf += '```\\n\\n';\n  });\n\n  runner.on('end', function(){\n    process.stdout.write('# TOC\\n');\n    process.stdout.write(generateTOC(runner.suite));\n    process.stdout.write(buf);\n  });\n}\n\n}); // module: reporters/markdown.js\n\nrequire.register(\"reporters/min.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base');\n\n/**\n * Expose `Min`.\n */\n\nexports = module.exports = Min;\n\n/**\n * Initialize a new `Min` minimal test reporter (best used with --watch).\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction Min(runner) {\n  Base.call(this, runner);\n\n  runner.on('start', function(){\n    // clear screen\n    process.stdout.write('\\u001b[2J');\n    // set cursor position\n    process.stdout.write('\\u001b[1;3H');\n  });\n\n  runner.on('end', this.epilogue.bind(this));\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\n\nfunction F(){};\nF.prototype = Base.prototype;\nMin.prototype = new F;\nMin.prototype.constructor = Min;\n\n\n}); // module: reporters/min.js\n\nrequire.register(\"reporters/nyan.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , color = Base.color;\n\n/**\n * Expose `Dot`.\n */\n\nexports = module.exports = NyanCat;\n\n/**\n * Initialize a new `Dot` matrix test reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction NyanCat(runner) {\n  Base.call(this, runner);\n  var self = this\n    , stats = this.stats\n    , width = Base.window.width * .75 | 0\n    , rainbowColors = this.rainbowColors = self.generateColors()\n    , colorIndex = this.colorIndex = 0\n    , numerOfLines = this.numberOfLines = 4\n    , trajectories = this.trajectories = [[], [], [], []]\n    , nyanCatWidth = this.nyanCatWidth = 11\n    , trajectoryWidthMax = this.trajectoryWidthMax = (width - nyanCatWidth)\n    , scoreboardWidth = this.scoreboardWidth = 5\n    , tick = this.tick = 0\n    , n = 0;\n\n  runner.on('start', function(){\n    Base.cursor.hide();\n    self.draw();\n  });\n\n  runner.on('pending', function(test){\n    self.draw();\n  });\n\n  runner.on('pass', function(test){\n    self.draw();\n  });\n\n  runner.on('fail', function(test, err){\n    self.draw();\n  });\n\n  runner.on('end', function(){\n    Base.cursor.show();\n    for (var i = 0; i < self.numberOfLines; i++) write('\\n');\n    self.epilogue();\n  });\n}\n\n/**\n * Draw the nyan cat\n *\n * @api private\n */\n\nNyanCat.prototype.draw = function(){\n  this.appendRainbow();\n  this.drawScoreboard();\n  this.drawRainbow();\n  this.drawNyanCat();\n  this.tick = !this.tick;\n};\n\n/**\n * Draw the \"scoreboard\" showing the number\n * of passes, failures and pending tests.\n *\n * @api private\n */\n\nNyanCat.prototype.drawScoreboard = function(){\n  var stats = this.stats;\n  var colors = Base.colors;\n\n  function draw(color, n) {\n    write(' ');\n    write('\\u001b[' + color + 'm' + n + '\\u001b[0m');\n    write('\\n');\n  }\n\n  draw(colors.green, stats.passes);\n  draw(colors.fail, stats.failures);\n  draw(colors.pending, stats.pending);\n  write('\\n');\n\n  this.cursorUp(this.numberOfLines);\n};\n\n/**\n * Append the rainbow.\n *\n * @api private\n */\n\nNyanCat.prototype.appendRainbow = function(){\n  var segment = this.tick ? '_' : '-';\n  var rainbowified = this.rainbowify(segment);\n\n  for (var index = 0; index < this.numberOfLines; index++) {\n    var trajectory = this.trajectories[index];\n    if (trajectory.length >= this.trajectoryWidthMax) trajectory.shift();\n    trajectory.push(rainbowified);\n  }\n};\n\n/**\n * Draw the rainbow.\n *\n * @api private\n */\n\nNyanCat.prototype.drawRainbow = function(){\n  var self = this;\n\n  this.trajectories.forEach(function(line, index) {\n    write('\\u001b[' + self.scoreboardWidth + 'C');\n    write(line.join(''));\n    write('\\n');\n  });\n\n  this.cursorUp(this.numberOfLines);\n};\n\n/**\n * Draw the nyan cat\n *\n * @api private\n */\n\nNyanCat.prototype.drawNyanCat = function() {\n  var self = this;\n  var startWidth = this.scoreboardWidth + this.trajectories[0].length;\n  var color = '\\u001b[' + startWidth + 'C';\n  var padding = '';\n\n  write(color);\n  write('_,------,');\n  write('\\n');\n\n  write(color);\n  padding = self.tick ? '  ' : '   ';\n  write('_|' + padding + '/\\\\_/\\\\ ');\n  write('\\n');\n\n  write(color);\n  padding = self.tick ? '_' : '__';\n  var tail = self.tick ? '~' : '^';\n  var face;\n  write(tail + '|' + padding + this.face() + ' ');\n  write('\\n');\n\n  write(color);\n  padding = self.tick ? ' ' : '  ';\n  write(padding + '\"\"  \"\" ');\n  write('\\n');\n\n  this.cursorUp(this.numberOfLines);\n};\n\n/**\n * Draw nyan cat face.\n *\n * @return {String}\n * @api private\n */\n\nNyanCat.prototype.face = function() {\n  var stats = this.stats;\n  if (stats.failures) {\n    return '( x .x)';\n  } else if (stats.pending) {\n    return '( o .o)';\n  } else if(stats.passes) {\n    return '( ^ .^)';\n  } else {\n    return '( - .-)';\n  }\n};\n\n/**\n * Move cursor up `n`.\n *\n * @param {Number} n\n * @api private\n */\n\nNyanCat.prototype.cursorUp = function(n) {\n  write('\\u001b[' + n + 'A');\n};\n\n/**\n * Move cursor down `n`.\n *\n * @param {Number} n\n * @api private\n */\n\nNyanCat.prototype.cursorDown = function(n) {\n  write('\\u001b[' + n + 'B');\n};\n\n/**\n * Generate rainbow colors.\n *\n * @return {Array}\n * @api private\n */\n\nNyanCat.prototype.generateColors = function(){\n  var colors = [];\n\n  for (var i = 0; i < (6 * 7); i++) {\n    var pi3 = Math.floor(Math.PI / 3);\n    var n = (i * (1.0 / 6));\n    var r = Math.floor(3 * Math.sin(n) + 3);\n    var g = Math.floor(3 * Math.sin(n + 2 * pi3) + 3);\n    var b = Math.floor(3 * Math.sin(n + 4 * pi3) + 3);\n    colors.push(36 * r + 6 * g + b + 16);\n  }\n\n  return colors;\n};\n\n/**\n * Apply rainbow to the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nNyanCat.prototype.rainbowify = function(str){\n  var color = this.rainbowColors[this.colorIndex % this.rainbowColors.length];\n  this.colorIndex += 1;\n  return '\\u001b[38;5;' + color + 'm' + str + '\\u001b[0m';\n};\n\n/**\n * Stdout helper.\n */\n\nfunction write(string) {\n  process.stdout.write(string);\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\n\nfunction F(){};\nF.prototype = Base.prototype;\nNyanCat.prototype = new F;\nNyanCat.prototype.constructor = NyanCat;\n\n\n}); // module: reporters/nyan.js\n\nrequire.register(\"reporters/progress.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , cursor = Base.cursor\n  , color = Base.color;\n\n/**\n * Expose `Progress`.\n */\n\nexports = module.exports = Progress;\n\n/**\n * General progress bar color.\n */\n\nBase.colors.progress = 90;\n\n/**\n * Initialize a new `Progress` bar test reporter.\n *\n * @param {Runner} runner\n * @param {Object} options\n * @api public\n */\n\nfunction Progress(runner, options) {\n  Base.call(this, runner);\n\n  var self = this\n    , options = options || {}\n    , stats = this.stats\n    , width = Base.window.width * .50 | 0\n    , total = runner.total\n    , complete = 0\n    , max = Math.max\n    , lastN = -1;\n\n  // default chars\n  options.open = options.open || '[';\n  options.complete = options.complete || '▬';\n  options.incomplete = options.incomplete || Base.symbols.dot;\n  options.close = options.close || ']';\n  options.verbose = false;\n\n  // tests started\n  runner.on('start', function(){\n    console.log();\n    cursor.hide();\n  });\n\n  // tests complete\n  runner.on('test end', function(){\n    complete++;\n    var incomplete = total - complete\n      , percent = complete / total\n      , n = width * percent | 0\n      , i = width - n;\n\n    if (lastN === n && !options.verbose) {\n      // Don't re-render the line if it hasn't changed\n      return;\n    }\n    lastN = n;\n\n    cursor.CR();\n    process.stdout.write('\\u001b[J');\n    process.stdout.write(color('progress', '  ' + options.open));\n    process.stdout.write(Array(n).join(options.complete));\n    process.stdout.write(Array(i).join(options.incomplete));\n    process.stdout.write(color('progress', options.close));\n    if (options.verbose) {\n      process.stdout.write(color('progress', ' ' + complete + ' of ' + total));\n    }\n  });\n\n  // tests are complete, output some stats\n  // and the failures if any\n  runner.on('end', function(){\n    cursor.show();\n    console.log();\n    self.epilogue();\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\n\nfunction F(){};\nF.prototype = Base.prototype;\nProgress.prototype = new F;\nProgress.prototype.constructor = Progress;\n\n\n}); // module: reporters/progress.js\n\nrequire.register(\"reporters/spec.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , cursor = Base.cursor\n  , color = Base.color;\n\n/**\n * Expose `Spec`.\n */\n\nexports = module.exports = Spec;\n\n/**\n * Initialize a new `Spec` test reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction Spec(runner) {\n  Base.call(this, runner);\n\n  var self = this\n    , stats = this.stats\n    , indents = 0\n    , n = 0;\n\n  function indent() {\n    return Array(indents).join('  ')\n  }\n\n  runner.on('start', function(){\n    console.log();\n  });\n\n  runner.on('suite', function(suite){\n    ++indents;\n    console.log(color('suite', '%s%s'), indent(), suite.title);\n  });\n\n  runner.on('suite end', function(suite){\n    --indents;\n    if (1 == indents) console.log();\n  });\n\n  runner.on('pending', function(test){\n    var fmt = indent() + color('pending', '  - %s');\n    console.log(fmt, test.title);\n  });\n\n  runner.on('pass', function(test){\n    if ('fast' == test.speed) {\n      var fmt = indent()\n        + color('checkmark', '  ' + Base.symbols.ok)\n        + color('pass', ' %s ');\n      cursor.CR();\n      console.log(fmt, test.title);\n    } else {\n      var fmt = indent()\n        + color('checkmark', '  ' + Base.symbols.ok)\n        + color('pass', ' %s ')\n        + color(test.speed, '(%dms)');\n      cursor.CR();\n      console.log(fmt, test.title, test.duration);\n    }\n  });\n\n  runner.on('fail', function(test, err){\n    cursor.CR();\n    console.log(indent() + color('fail', '  %d) %s'), ++n, test.title);\n  });\n\n  runner.on('end', self.epilogue.bind(self));\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\n\nfunction F(){};\nF.prototype = Base.prototype;\nSpec.prototype = new F;\nSpec.prototype.constructor = Spec;\n\n\n}); // module: reporters/spec.js\n\nrequire.register(\"reporters/tap.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , cursor = Base.cursor\n  , color = Base.color;\n\n/**\n * Expose `TAP`.\n */\n\nexports = module.exports = TAP;\n\n/**\n * Initialize a new `TAP` reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction TAP(runner) {\n  Base.call(this, runner);\n\n  var self = this\n    , stats = this.stats\n    , n = 1\n    , passes = 0\n    , failures = 0;\n\n  runner.on('start', function(){\n    var total = runner.grepTotal(runner.suite);\n    console.log('%d..%d', 1, total);\n  });\n\n  runner.on('test end', function(){\n    ++n;\n  });\n\n  runner.on('pending', function(test){\n    console.log('ok %d %s # SKIP -', n, title(test));\n  });\n\n  runner.on('pass', function(test){\n    passes++;\n    console.log('ok %d %s', n, title(test));\n  });\n\n  runner.on('fail', function(test, err){\n    failures++;\n    console.log('not ok %d %s', n, title(test));\n    if (err.stack) console.log(err.stack.replace(/^/gm, '  '));\n  });\n\n  runner.on('end', function(){\n    console.log('# tests ' + (passes + failures));\n    console.log('# pass ' + passes);\n    console.log('# fail ' + failures);\n  });\n}\n\n/**\n * Return a TAP-safe title of `test`\n *\n * @param {Object} test\n * @return {String}\n * @api private\n */\n\nfunction title(test) {\n  return test.fullTitle().replace(/#/g, '');\n}\n\n}); // module: reporters/tap.js\n\nrequire.register(\"reporters/xunit.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Base = require('./base')\n  , utils = require('../utils')\n  , escape = utils.escape;\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\nvar Date = global.Date\n  , setTimeout = global.setTimeout\n  , setInterval = global.setInterval\n  , clearTimeout = global.clearTimeout\n  , clearInterval = global.clearInterval;\n\n/**\n * Expose `XUnit`.\n */\n\nexports = module.exports = XUnit;\n\n/**\n * Initialize a new `XUnit` reporter.\n *\n * @param {Runner} runner\n * @api public\n */\n\nfunction XUnit(runner) {\n  Base.call(this, runner);\n  var stats = this.stats\n    , tests = []\n    , self = this;\n\n  runner.on('pending', function(test){\n    tests.push(test);\n  });\n\n  runner.on('pass', function(test){\n    tests.push(test);\n  });\n\n  runner.on('fail', function(test){\n    tests.push(test);\n  });\n\n  runner.on('end', function(){\n    console.log(tag('testsuite', {\n        name: 'Mocha Tests'\n      , tests: stats.tests\n      , failures: stats.failures\n      , errors: stats.failures\n      , skipped: stats.tests - stats.failures - stats.passes\n      , timestamp: (new Date).toUTCString()\n      , time: (stats.duration / 1000) || 0\n    }, false));\n\n    tests.forEach(test);\n    console.log('</testsuite>');\n  });\n}\n\n/**\n * Inherit from `Base.prototype`.\n */\n\nfunction F(){};\nF.prototype = Base.prototype;\nXUnit.prototype = new F;\nXUnit.prototype.constructor = XUnit;\n\n\n/**\n * Output tag for the given `test.`\n */\n\nfunction test(test) {\n  var attrs = {\n      classname: test.parent.fullTitle()\n    , name: test.title\n    , time: (test.duration / 1000) || 0\n  };\n\n  if ('failed' == test.state) {\n    var err = test.err;\n    console.log(tag('testcase', attrs, false, tag('failure', {}, false, cdata(escape(err.message) + \"\\n\" + err.stack))));\n  } else if (test.pending) {\n    console.log(tag('testcase', attrs, false, tag('skipped', {}, true)));\n  } else {\n    console.log(tag('testcase', attrs, true) );\n  }\n}\n\n/**\n * HTML tag helper.\n */\n\nfunction tag(name, attrs, close, content) {\n  var end = close ? '/>' : '>'\n    , pairs = []\n    , tag;\n\n  for (var key in attrs) {\n    pairs.push(key + '=\"' + escape(attrs[key]) + '\"');\n  }\n\n  tag = '<' + name + (pairs.length ? ' ' + pairs.join(' ') : '') + end;\n  if (content) tag += content + '</' + name + end;\n  return tag;\n}\n\n/**\n * Return cdata escaped CDATA `str`.\n */\n\nfunction cdata(str) {\n  return '<![CDATA[' + escape(str) + ']]>';\n}\n\n}); // module: reporters/xunit.js\n\nrequire.register(\"runnable.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('browser/events').EventEmitter\n  , debug = require('browser/debug')('mocha:runnable')\n  , milliseconds = require('./ms');\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\nvar Date = global.Date\n  , setTimeout = global.setTimeout\n  , setInterval = global.setInterval\n  , clearTimeout = global.clearTimeout\n  , clearInterval = global.clearInterval;\n\n/**\n * Object#toString().\n */\n\nvar toString = Object.prototype.toString;\n\n/**\n * Expose `Runnable`.\n */\n\nmodule.exports = Runnable;\n\n/**\n * Initialize a new `Runnable` with the given `title` and callback `fn`.\n *\n * @param {String} title\n * @param {Function} fn\n * @api private\n */\n\nfunction Runnable(title, fn) {\n  this.title = title;\n  this.fn = fn;\n  this.async = fn && fn.length;\n  this.sync = ! this.async;\n  this._timeout = 2000;\n  this._slow = 75;\n  this._enableTimeouts = true;\n  this.timedOut = false;\n  this._trace = new Error('done() called multiple times')\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\n\nfunction F(){};\nF.prototype = EventEmitter.prototype;\nRunnable.prototype = new F;\nRunnable.prototype.constructor = Runnable;\n\n\n/**\n * Set & get timeout `ms`.\n *\n * @param {Number|String} ms\n * @return {Runnable|Number} ms or self\n * @api private\n */\n\nRunnable.prototype.timeout = function(ms){\n  if (0 == arguments.length) return this._timeout;\n  if (ms === 0) this._enableTimeouts = false;\n  if ('string' == typeof ms) ms = milliseconds(ms);\n  debug('timeout %d', ms);\n  this._timeout = ms;\n  if (this.timer) this.resetTimeout();\n  return this;\n};\n\n/**\n * Set & get slow `ms`.\n *\n * @param {Number|String} ms\n * @return {Runnable|Number} ms or self\n * @api private\n */\n\nRunnable.prototype.slow = function(ms){\n  if (0 === arguments.length) return this._slow;\n  if ('string' == typeof ms) ms = milliseconds(ms);\n  debug('timeout %d', ms);\n  this._slow = ms;\n  return this;\n};\n\n/**\n * Set and & get timeout `enabled`.\n *\n * @param {Boolean} enabled\n * @return {Runnable|Boolean} enabled or self\n * @api private\n */\n\nRunnable.prototype.enableTimeouts = function(enabled){\n  if (arguments.length === 0) return this._enableTimeouts;\n  debug('enableTimeouts %s', enabled);\n  this._enableTimeouts = enabled;\n  return this;\n};\n\n/**\n * Return the full title generated by recursively\n * concatenating the parent's full title.\n *\n * @return {String}\n * @api public\n */\n\nRunnable.prototype.fullTitle = function(){\n  return this.parent.fullTitle() + ' ' + this.title;\n};\n\n/**\n * Clear the timeout.\n *\n * @api private\n */\n\nRunnable.prototype.clearTimeout = function(){\n  clearTimeout(this.timer);\n};\n\n/**\n * Inspect the runnable void of private properties.\n *\n * @return {String}\n * @api private\n */\n\nRunnable.prototype.inspect = function(){\n  return JSON.stringify(this, function(key, val){\n    if ('_' == key[0]) return;\n    if ('parent' == key) return '#<Suite>';\n    if ('ctx' == key) return '#<Context>';\n    return val;\n  }, 2);\n};\n\n/**\n * Reset the timeout.\n *\n * @api private\n */\n\nRunnable.prototype.resetTimeout = function(){\n  var self = this;\n  var ms = this.timeout() || 1e9;\n\n  if (!this._enableTimeouts) return;\n  this.clearTimeout();\n  this.timer = setTimeout(function(){\n    if (!self._enableTimeouts) return;\n    self.callback(new Error('timeout of ' + ms + 'ms exceeded'));\n    self.timedOut = true;\n  }, ms);\n};\n\n/**\n * Whitelist these globals for this test run\n *\n * @api private\n */\nRunnable.prototype.globals = function(arr){\n  var self = this;\n  this._allowedGlobals = arr;\n};\n\n/**\n * Run the test and invoke `fn(err)`.\n *\n * @param {Function} fn\n * @api private\n */\n\nRunnable.prototype.run = function(fn){\n  var self = this\n    , start = new Date\n    , ctx = this.ctx\n    , finished\n    , emitted;\n\n  // Some times the ctx exists but it is not runnable\n  if (ctx && ctx.runnable) ctx.runnable(this);\n\n  // called multiple times\n  function multiple(err) {\n    if (emitted) return;\n    emitted = true;\n    self.emit('error', err || new Error('done() called multiple times; stacktrace may be inaccurate'));\n  }\n\n  // finished\n  function done(err) {\n    var ms = self.timeout();\n    if (self.timedOut) return;\n    if (finished) return multiple(err || self._trace);\n    self.clearTimeout();\n    self.duration = new Date - start;\n    finished = true;\n    if (!err && self.duration > ms && self._enableTimeouts) err = new Error('timeout of ' + ms + 'ms exceeded');\n    fn(err);\n  }\n\n  // for .resetTimeout()\n  this.callback = done;\n\n  // explicit async with `done` argument\n  if (this.async) {\n    this.resetTimeout();\n\n    try {\n      this.fn.call(ctx, function(err){\n        if (err instanceof Error || toString.call(err) === \"[object Error]\") return done(err);\n        if (null != err) {\n          if (Object.prototype.toString.call(err) === '[object Object]') {\n            return done(new Error('done() invoked with non-Error: ' + JSON.stringify(err)));\n          } else {\n            return done(new Error('done() invoked with non-Error: ' + err));\n          }\n        }\n        done();\n      });\n    } catch (err) {\n      done(err);\n    }\n    return;\n  }\n\n  if (this.asyncOnly) {\n    return done(new Error('--async-only option in use without declaring `done()`'));\n  }\n\n  // sync or promise-returning\n  try {\n    if (this.pending) {\n      done();\n    } else {\n      callFn(this.fn);\n    }\n  } catch (err) {\n    done(err);\n  }\n\n  function callFn(fn) {\n    var result = fn.call(ctx);\n    if (result && typeof result.then === 'function') {\n      self.resetTimeout();\n      result\n        .then(function() {\n          done()\n        },\n        function(reason) {\n          done(reason || new Error('Promise rejected with no or falsy reason'))\n        });\n    } else {\n      done();\n    }\n  }\n};\n\n}); // module: runnable.js\n\nrequire.register(\"runner.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('browser/events').EventEmitter\n  , debug = require('browser/debug')('mocha:runner')\n  , Test = require('./test')\n  , utils = require('./utils')\n  , filter = utils.filter\n  , keys = utils.keys;\n\n/**\n * Non-enumerable globals.\n */\n\nvar globals = [\n  'setTimeout',\n  'clearTimeout',\n  'setInterval',\n  'clearInterval',\n  'XMLHttpRequest',\n  'Date'\n];\n\n/**\n * Expose `Runner`.\n */\n\nmodule.exports = Runner;\n\n/**\n * Initialize a `Runner` for the given `suite`.\n *\n * Events:\n *\n *   - `start`  execution started\n *   - `end`  execution complete\n *   - `suite`  (suite) test suite execution started\n *   - `suite end`  (suite) all tests (and sub-suites) have finished\n *   - `test`  (test) test execution started\n *   - `test end`  (test) test completed\n *   - `hook`  (hook) hook execution started\n *   - `hook end`  (hook) hook complete\n *   - `pass`  (test) test passed\n *   - `fail`  (test, err) test failed\n *   - `pending`  (test) test pending\n *\n * @api public\n */\n\nfunction Runner(suite) {\n  var self = this;\n  this._globals = [];\n  this._abort = false;\n  this.suite = suite;\n  this.total = suite.total();\n  this.failures = 0;\n  this.on('test end', function(test){ self.checkGlobals(test); });\n  this.on('hook end', function(hook){ self.checkGlobals(hook); });\n  this.grep(/.*/);\n  this.globals(this.globalProps().concat(extraGlobals()));\n}\n\n/**\n * Wrapper for setImmediate, process.nextTick, or browser polyfill.\n *\n * @param {Function} fn\n * @api private\n */\n\nRunner.immediately = global.setImmediate || process.nextTick;\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\n\nfunction F(){};\nF.prototype = EventEmitter.prototype;\nRunner.prototype = new F;\nRunner.prototype.constructor = Runner;\n\n\n/**\n * Run tests with full titles matching `re`. Updates runner.total\n * with number of tests matched.\n *\n * @param {RegExp} re\n * @param {Boolean} invert\n * @return {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.grep = function(re, invert){\n  debug('grep %s', re);\n  this._grep = re;\n  this._invert = invert;\n  this.total = this.grepTotal(this.suite);\n  return this;\n};\n\n/**\n * Returns the number of tests matching the grep search for the\n * given suite.\n *\n * @param {Suite} suite\n * @return {Number}\n * @api public\n */\n\nRunner.prototype.grepTotal = function(suite) {\n  var self = this;\n  var total = 0;\n\n  suite.eachTest(function(test){\n    var match = self._grep.test(test.fullTitle());\n    if (self._invert) match = !match;\n    if (match) total++;\n  });\n\n  return total;\n};\n\n/**\n * Return a list of global properties.\n *\n * @return {Array}\n * @api private\n */\n\nRunner.prototype.globalProps = function() {\n  var props = utils.keys(global);\n\n  // non-enumerables\n  for (var i = 0; i < globals.length; ++i) {\n    if (~utils.indexOf(props, globals[i])) continue;\n    props.push(globals[i]);\n  }\n\n  return props;\n};\n\n/**\n * Allow the given `arr` of globals.\n *\n * @param {Array} arr\n * @return {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.globals = function(arr){\n  if (0 == arguments.length) return this._globals;\n  debug('globals %j', arr);\n  this._globals = this._globals.concat(arr);\n  return this;\n};\n\n/**\n * Check for global variable leaks.\n *\n * @api private\n */\n\nRunner.prototype.checkGlobals = function(test){\n  if (this.ignoreLeaks) return;\n  var ok = this._globals;\n\n  var globals = this.globalProps();\n  var leaks;\n\n  if (test) {\n    ok = ok.concat(test._allowedGlobals || []);\n  }\n\n  if(this.prevGlobalsLength == globals.length) return;\n  this.prevGlobalsLength = globals.length;\n\n  leaks = filterLeaks(ok, globals);\n  this._globals = this._globals.concat(leaks);\n\n  if (leaks.length > 1) {\n    this.fail(test, new Error('global leaks detected: ' + leaks.join(', ') + ''));\n  } else if (leaks.length) {\n    this.fail(test, new Error('global leak detected: ' + leaks[0]));\n  }\n};\n\n/**\n * Fail the given `test`.\n *\n * @param {Test} test\n * @param {Error} err\n * @api private\n */\n\nRunner.prototype.fail = function(test, err){\n  ++this.failures;\n  test.state = 'failed';\n\n  if ('string' == typeof err) {\n    err = new Error('the string \"' + err + '\" was thrown, throw an Error :)');\n  }\n\n  this.emit('fail', test, err);\n};\n\n/**\n * Fail the given `hook` with `err`.\n *\n * Hook failures work in the following pattern:\n * - If bail, then exit\n * - Failed `before` hook skips all tests in a suite and subsuites,\n *   but jumps to corresponding `after` hook\n * - Failed `before each` hook skips remaining tests in a\n *   suite and jumps to corresponding `after each` hook,\n *   which is run only once\n * - Failed `after` hook does not alter\n *   execution order\n * - Failed `after each` hook skips remaining tests in a\n *   suite and subsuites, but executes other `after each`\n *   hooks\n *\n * @param {Hook} hook\n * @param {Error} err\n * @api private\n */\n\nRunner.prototype.failHook = function(hook, err){\n  this.fail(hook, err);\n  if (this.suite.bail()) {\n    this.emit('end');\n  }\n};\n\n/**\n * Run hook `name` callbacks and then invoke `fn()`.\n *\n * @param {String} name\n * @param {Function} function\n * @api private\n */\n\nRunner.prototype.hook = function(name, fn){\n  var suite = this.suite\n    , hooks = suite['_' + name]\n    , self = this\n    , timer;\n\n  function next(i) {\n    var hook = hooks[i];\n    if (!hook) return fn();\n    if (self.failures && suite.bail()) return fn();\n    self.currentRunnable = hook;\n\n    hook.ctx.currentTest = self.test;\n\n    self.emit('hook', hook);\n\n    hook.on('error', function(err){\n      self.failHook(hook, err);\n    });\n\n    hook.run(function(err){\n      hook.removeAllListeners('error');\n      var testError = hook.error();\n      if (testError) self.fail(self.test, testError);\n      if (err) {\n        self.failHook(hook, err);\n\n        // stop executing hooks, notify callee of hook err\n        return fn(err);\n      }\n      self.emit('hook end', hook);\n      delete hook.ctx.currentTest;\n      next(++i);\n    });\n  }\n\n  Runner.immediately(function(){\n    next(0);\n  });\n};\n\n/**\n * Run hook `name` for the given array of `suites`\n * in order, and callback `fn(err, errSuite)`.\n *\n * @param {String} name\n * @param {Array} suites\n * @param {Function} fn\n * @api private\n */\n\nRunner.prototype.hooks = function(name, suites, fn){\n  var self = this\n    , orig = this.suite;\n\n  function next(suite) {\n    self.suite = suite;\n\n    if (!suite) {\n      self.suite = orig;\n      return fn();\n    }\n\n    self.hook(name, function(err){\n      if (err) {\n        var errSuite = self.suite;\n        self.suite = orig;\n        return fn(err, errSuite);\n      }\n\n      next(suites.pop());\n    });\n  }\n\n  next(suites.pop());\n};\n\n/**\n * Run hooks from the top level down.\n *\n * @param {String} name\n * @param {Function} fn\n * @api private\n */\n\nRunner.prototype.hookUp = function(name, fn){\n  var suites = [this.suite].concat(this.parents()).reverse();\n  this.hooks(name, suites, fn);\n};\n\n/**\n * Run hooks from the bottom up.\n *\n * @param {String} name\n * @param {Function} fn\n * @api private\n */\n\nRunner.prototype.hookDown = function(name, fn){\n  var suites = [this.suite].concat(this.parents());\n  this.hooks(name, suites, fn);\n};\n\n/**\n * Return an array of parent Suites from\n * closest to furthest.\n *\n * @return {Array}\n * @api private\n */\n\nRunner.prototype.parents = function(){\n  var suite = this.suite\n    , suites = [];\n  while (suite = suite.parent) suites.push(suite);\n  return suites;\n};\n\n/**\n * Run the current test and callback `fn(err)`.\n *\n * @param {Function} fn\n * @api private\n */\n\nRunner.prototype.runTest = function(fn){\n  var test = this.test\n    , self = this;\n\n  if (this.asyncOnly) test.asyncOnly = true;\n\n  try {\n    test.on('error', function(err){\n      self.fail(test, err);\n    });\n    test.run(fn);\n  } catch (err) {\n    fn(err);\n  }\n};\n\n/**\n * Run tests in the given `suite` and invoke\n * the callback `fn()` when complete.\n *\n * @param {Suite} suite\n * @param {Function} fn\n * @api private\n */\n\nRunner.prototype.runTests = function(suite, fn){\n  var self = this\n    , tests = suite.tests.slice()\n    , test;\n\n\n  function hookErr(err, errSuite, after) {\n    // before/after Each hook for errSuite failed:\n    var orig = self.suite;\n\n    // for failed 'after each' hook start from errSuite parent,\n    // otherwise start from errSuite itself\n    self.suite = after ? errSuite.parent : errSuite;\n\n    if (self.suite) {\n      // call hookUp afterEach\n      self.hookUp('afterEach', function(err2, errSuite2) {\n        self.suite = orig;\n        // some hooks may fail even now\n        if (err2) return hookErr(err2, errSuite2, true);\n        // report error suite\n        fn(errSuite);\n      });\n    } else {\n      // there is no need calling other 'after each' hooks\n      self.suite = orig;\n      fn(errSuite);\n    }\n  }\n\n  function next(err, errSuite) {\n    // if we bail after first err\n    if (self.failures && suite._bail) return fn();\n\n    if (self._abort) return fn();\n\n    if (err) return hookErr(err, errSuite, true);\n\n    // next test\n    test = tests.shift();\n\n    // all done\n    if (!test) return fn();\n\n    // grep\n    var match = self._grep.test(test.fullTitle());\n    if (self._invert) match = !match;\n    if (!match) return next();\n\n    // pending\n    if (test.pending) {\n      self.emit('pending', test);\n      self.emit('test end', test);\n      return next();\n    }\n\n    // execute test and hook(s)\n    self.emit('test', self.test = test);\n    self.hookDown('beforeEach', function(err, errSuite){\n\n      if (err) return hookErr(err, errSuite, false);\n\n      self.currentRunnable = self.test;\n      self.runTest(function(err){\n        test = self.test;\n\n        if (err) {\n          self.fail(test, err);\n          self.emit('test end', test);\n          return self.hookUp('afterEach', next);\n        }\n\n        test.state = 'passed';\n        self.emit('pass', test);\n        self.emit('test end', test);\n        self.hookUp('afterEach', next);\n      });\n    });\n  }\n\n  this.next = next;\n  next();\n};\n\n/**\n * Run the given `suite` and invoke the\n * callback `fn()` when complete.\n *\n * @param {Suite} suite\n * @param {Function} fn\n * @api private\n */\n\nRunner.prototype.runSuite = function(suite, fn){\n  var total = this.grepTotal(suite)\n    , self = this\n    , i = 0;\n\n  debug('run suite %s', suite.fullTitle());\n\n  if (!total) return fn();\n\n  this.emit('suite', this.suite = suite);\n\n  function next(errSuite) {\n    if (errSuite) {\n      // current suite failed on a hook from errSuite\n      if (errSuite == suite) {\n        // if errSuite is current suite\n        // continue to the next sibling suite\n        return done();\n      } else {\n        // errSuite is among the parents of current suite\n        // stop execution of errSuite and all sub-suites\n        return done(errSuite);\n      }\n    }\n\n    if (self._abort) return done();\n\n    var curr = suite.suites[i++];\n    if (!curr) return done();\n    self.runSuite(curr, next);\n  }\n\n  function done(errSuite) {\n    self.suite = suite;\n    self.hook('afterAll', function(){\n      self.emit('suite end', suite);\n      fn(errSuite);\n    });\n  }\n\n  this.hook('beforeAll', function(err){\n    if (err) return done();\n    self.runTests(suite, next);\n  });\n};\n\n/**\n * Handle uncaught exceptions.\n *\n * @param {Error} err\n * @api private\n */\n\nRunner.prototype.uncaught = function(err){\n  if (err) {\n    debug('uncaught exception %s', err !== function () {\n      return this;\n    }.call(err) ? err : ( err.message || err ));\n  } else {\n    debug('uncaught undefined exception');\n    err = new Error('Caught undefined error, did you throw without specifying what?');\n  }\n  err.uncaught = true;\n\n  var runnable = this.currentRunnable;\n  if (!runnable) return;\n\n  var wasAlreadyDone = runnable.state;\n  this.fail(runnable, err);\n\n  runnable.clearTimeout();\n\n  if (wasAlreadyDone) return;\n\n  // recover from test\n  if ('test' == runnable.type) {\n    this.emit('test end', runnable);\n    this.hookUp('afterEach', this.next);\n    return;\n  }\n\n  // bail on hooks\n  this.emit('end');\n};\n\n/**\n * Run the root suite and invoke `fn(failures)`\n * on completion.\n *\n * @param {Function} fn\n * @return {Runner} for chaining\n * @api public\n */\n\nRunner.prototype.run = function(fn){\n  var self = this\n    , fn = fn || function(){};\n\n  function uncaught(err){\n    self.uncaught(err);\n  }\n\n  debug('start');\n\n  // callback\n  this.on('end', function(){\n    debug('end');\n    process.removeListener('uncaughtException', uncaught);\n    fn(self.failures);\n  });\n\n  // run suites\n  this.emit('start');\n  this.runSuite(this.suite, function(){\n    debug('finished running');\n    self.emit('end');\n  });\n\n  // uncaught exception\n  process.on('uncaughtException', uncaught);\n\n  return this;\n};\n\n/**\n * Cleanly abort execution\n *\n * @return {Runner} for chaining\n * @api public\n */\nRunner.prototype.abort = function(){\n  debug('aborting');\n  this._abort = true;\n};\n\n/**\n * Filter leaks with the given globals flagged as `ok`.\n *\n * @param {Array} ok\n * @param {Array} globals\n * @return {Array}\n * @api private\n */\n\nfunction filterLeaks(ok, globals) {\n  return filter(globals, function(key){\n    // Firefox and Chrome exposes iframes as index inside the window object\n    if (/^d+/.test(key)) return false;\n\n    // in firefox\n    // if runner runs in an iframe, this iframe's window.getInterface method not init at first\n    // it is assigned in some seconds\n    if (global.navigator && /^getInterface/.test(key)) return false;\n\n    // an iframe could be approached by window[iframeIndex]\n    // in ie6,7,8 and opera, iframeIndex is enumerable, this could cause leak\n    if (global.navigator && /^\\d+/.test(key)) return false;\n\n    // Opera and IE expose global variables for HTML element IDs (issue #243)\n    if (/^mocha-/.test(key)) return false;\n\n    var matched = filter(ok, function(ok){\n      if (~ok.indexOf('*')) return 0 == key.indexOf(ok.split('*')[0]);\n      return key == ok;\n    });\n    return matched.length == 0 && (!global.navigator || 'onerror' !== key);\n  });\n}\n\n/**\n * Array of globals dependent on the environment.\n *\n * @return {Array}\n * @api private\n */\n\n function extraGlobals() {\n  if (typeof(process) === 'object' &&\n      typeof(process.version) === 'string') {\n\n    var nodeVersion = process.version.split('.').reduce(function(a, v) {\n      return a << 8 | v;\n    });\n\n    // 'errno' was renamed to process._errno in v0.9.11.\n\n    if (nodeVersion < 0x00090B) {\n      return ['errno'];\n    }\n  }\n\n  return [];\n }\n\n}); // module: runner.js\n\nrequire.register(\"suite.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar EventEmitter = require('browser/events').EventEmitter\n  , debug = require('browser/debug')('mocha:suite')\n  , milliseconds = require('./ms')\n  , utils = require('./utils')\n  , Hook = require('./hook');\n\n/**\n * Expose `Suite`.\n */\n\nexports = module.exports = Suite;\n\n/**\n * Create a new `Suite` with the given `title`\n * and parent `Suite`. When a suite with the\n * same title is already present, that suite\n * is returned to provide nicer reporter\n * and more flexible meta-testing.\n *\n * @param {Suite} parent\n * @param {String} title\n * @return {Suite}\n * @api public\n */\n\nexports.create = function(parent, title){\n  var suite = new Suite(title, parent.ctx);\n  suite.parent = parent;\n  if (parent.pending) suite.pending = true;\n  title = suite.fullTitle();\n  parent.addSuite(suite);\n  return suite;\n};\n\n/**\n * Initialize a new `Suite` with the given\n * `title` and `ctx`.\n *\n * @param {String} title\n * @param {Context} ctx\n * @api private\n */\n\nfunction Suite(title, parentContext) {\n  this.title = title;\n  var context = function() {};\n  context.prototype = parentContext;\n  this.ctx = new context();\n  this.suites = [];\n  this.tests = [];\n  this.pending = false;\n  this._beforeEach = [];\n  this._beforeAll = [];\n  this._afterEach = [];\n  this._afterAll = [];\n  this.root = !title;\n  this._timeout = 2000;\n  this._enableTimeouts = true;\n  this._slow = 75;\n  this._bail = false;\n}\n\n/**\n * Inherit from `EventEmitter.prototype`.\n */\n\nfunction F(){};\nF.prototype = EventEmitter.prototype;\nSuite.prototype = new F;\nSuite.prototype.constructor = Suite;\n\n\n/**\n * Return a clone of this `Suite`.\n *\n * @return {Suite}\n * @api private\n */\n\nSuite.prototype.clone = function(){\n  var suite = new Suite(this.title);\n  debug('clone');\n  suite.ctx = this.ctx;\n  suite.timeout(this.timeout());\n  suite.enableTimeouts(this.enableTimeouts());\n  suite.slow(this.slow());\n  suite.bail(this.bail());\n  return suite;\n};\n\n/**\n * Set timeout `ms` or short-hand such as \"2s\".\n *\n * @param {Number|String} ms\n * @return {Suite|Number} for chaining\n * @api private\n */\n\nSuite.prototype.timeout = function(ms){\n  if (0 == arguments.length) return this._timeout;\n  if (ms === 0) this._enableTimeouts = false;\n  if ('string' == typeof ms) ms = milliseconds(ms);\n  debug('timeout %d', ms);\n  this._timeout = parseInt(ms, 10);\n  return this;\n};\n\n/**\n  * Set timeout `enabled`.\n  *\n  * @param {Boolean} enabled\n  * @return {Suite|Boolean} self or enabled\n  * @api private\n  */\n\nSuite.prototype.enableTimeouts = function(enabled){\n  if (arguments.length === 0) return this._enableTimeouts;\n  debug('enableTimeouts %s', enabled);\n  this._enableTimeouts = enabled;\n  return this;\n};\n\n/**\n * Set slow `ms` or short-hand such as \"2s\".\n *\n * @param {Number|String} ms\n * @return {Suite|Number} for chaining\n * @api private\n */\n\nSuite.prototype.slow = function(ms){\n  if (0 === arguments.length) return this._slow;\n  if ('string' == typeof ms) ms = milliseconds(ms);\n  debug('slow %d', ms);\n  this._slow = ms;\n  return this;\n};\n\n/**\n * Sets whether to bail after first error.\n *\n * @parma {Boolean} bail\n * @return {Suite|Number} for chaining\n * @api private\n */\n\nSuite.prototype.bail = function(bail){\n  if (0 == arguments.length) return this._bail;\n  debug('bail %s', bail);\n  this._bail = bail;\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` before running tests.\n *\n * @param {Function} fn\n * @return {Suite} for chaining\n * @api private\n */\n\nSuite.prototype.beforeAll = function(title, fn){\n  if (this.pending) return this;\n  if ('function' === typeof title) {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"before all\" hook' + (title ? ': ' + title : '');\n\n  var hook = new Hook(title, fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.enableTimeouts(this.enableTimeouts());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  this._beforeAll.push(hook);\n  this.emit('beforeAll', hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` after running tests.\n *\n * @param {Function} fn\n * @return {Suite} for chaining\n * @api private\n */\n\nSuite.prototype.afterAll = function(title, fn){\n  if (this.pending) return this;\n  if ('function' === typeof title) {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"after all\" hook' + (title ? ': ' + title : '');\n\n  var hook = new Hook(title, fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.enableTimeouts(this.enableTimeouts());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  this._afterAll.push(hook);\n  this.emit('afterAll', hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` before each test case.\n *\n * @param {Function} fn\n * @return {Suite} for chaining\n * @api private\n */\n\nSuite.prototype.beforeEach = function(title, fn){\n  if (this.pending) return this;\n  if ('function' === typeof title) {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"before each\" hook' + (title ? ': ' + title : '');\n\n  var hook = new Hook(title, fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.enableTimeouts(this.enableTimeouts());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  this._beforeEach.push(hook);\n  this.emit('beforeEach', hook);\n  return this;\n};\n\n/**\n * Run `fn(test[, done])` after each test case.\n *\n * @param {Function} fn\n * @return {Suite} for chaining\n * @api private\n */\n\nSuite.prototype.afterEach = function(title, fn){\n  if (this.pending) return this;\n  if ('function' === typeof title) {\n    fn = title;\n    title = fn.name;\n  }\n  title = '\"after each\" hook' + (title ? ': ' + title : '');\n\n  var hook = new Hook(title, fn);\n  hook.parent = this;\n  hook.timeout(this.timeout());\n  hook.enableTimeouts(this.enableTimeouts());\n  hook.slow(this.slow());\n  hook.ctx = this.ctx;\n  this._afterEach.push(hook);\n  this.emit('afterEach', hook);\n  return this;\n};\n\n/**\n * Add a test `suite`.\n *\n * @param {Suite} suite\n * @return {Suite} for chaining\n * @api private\n */\n\nSuite.prototype.addSuite = function(suite){\n  suite.parent = this;\n  suite.timeout(this.timeout());\n  suite.enableTimeouts(this.enableTimeouts());\n  suite.slow(this.slow());\n  suite.bail(this.bail());\n  this.suites.push(suite);\n  this.emit('suite', suite);\n  return this;\n};\n\n/**\n * Add a `test` to this suite.\n *\n * @param {Test} test\n * @return {Suite} for chaining\n * @api private\n */\n\nSuite.prototype.addTest = function(test){\n  test.parent = this;\n  test.timeout(this.timeout());\n  test.enableTimeouts(this.enableTimeouts());\n  test.slow(this.slow());\n  test.ctx = this.ctx;\n  this.tests.push(test);\n  this.emit('test', test);\n  return this;\n};\n\n/**\n * Return the full title generated by recursively\n * concatenating the parent's full title.\n *\n * @return {String}\n * @api public\n */\n\nSuite.prototype.fullTitle = function(){\n  if (this.parent) {\n    var full = this.parent.fullTitle();\n    if (full) return full + ' ' + this.title;\n  }\n  return this.title;\n};\n\n/**\n * Return the total number of tests.\n *\n * @return {Number}\n * @api public\n */\n\nSuite.prototype.total = function(){\n  return utils.reduce(this.suites, function(sum, suite){\n    return sum + suite.total();\n  }, 0) + this.tests.length;\n};\n\n/**\n * Iterates through each suite recursively to find\n * all tests. Applies a function in the format\n * `fn(test)`.\n *\n * @param {Function} fn\n * @return {Suite}\n * @api private\n */\n\nSuite.prototype.eachTest = function(fn){\n  utils.forEach(this.tests, fn);\n  utils.forEach(this.suites, function(suite){\n    suite.eachTest(fn);\n  });\n  return this;\n};\n\n}); // module: suite.js\n\nrequire.register(\"test.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar Runnable = require('./runnable');\n\n/**\n * Expose `Test`.\n */\n\nmodule.exports = Test;\n\n/**\n * Initialize a new `Test` with the given `title` and callback `fn`.\n *\n * @param {String} title\n * @param {Function} fn\n * @api private\n */\n\nfunction Test(title, fn) {\n  Runnable.call(this, title, fn);\n  this.pending = !fn;\n  this.type = 'test';\n}\n\n/**\n * Inherit from `Runnable.prototype`.\n */\n\nfunction F(){};\nF.prototype = Runnable.prototype;\nTest.prototype = new F;\nTest.prototype.constructor = Test;\n\n\n}); // module: test.js\n\nrequire.register(\"utils.js\", function(module, exports, require){\n/**\n * Module dependencies.\n */\n\nvar fs = require('browser/fs')\n  , path = require('browser/path')\n  , basename = path.basename\n  , exists = fs.existsSync || path.existsSync\n  , glob = require('browser/glob')\n  , join = path.join\n  , debug = require('browser/debug')('mocha:watch');\n\n/**\n * Ignored directories.\n */\n\nvar ignore = ['node_modules', '.git'];\n\n/**\n * Escape special characters in the given string of html.\n *\n * @param  {String} html\n * @return {String}\n * @api private\n */\n\nexports.escape = function(html){\n  return String(html)\n    .replace(/&/g, '&amp;')\n    .replace(/\"/g, '&quot;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;');\n};\n\n/**\n * Array#forEach (<=IE8)\n *\n * @param {Array} array\n * @param {Function} fn\n * @param {Object} scope\n * @api private\n */\n\nexports.forEach = function(arr, fn, scope){\n  for (var i = 0, l = arr.length; i < l; i++)\n    fn.call(scope, arr[i], i);\n};\n\n/**\n * Array#map (<=IE8)\n *\n * @param {Array} array\n * @param {Function} fn\n * @param {Object} scope\n * @api private\n */\n\nexports.map = function(arr, fn, scope){\n  var result = [];\n  for (var i = 0, l = arr.length; i < l; i++)\n    result.push(fn.call(scope, arr[i], i));\n  return result;\n};\n\n/**\n * Array#indexOf (<=IE8)\n *\n * @parma {Array} arr\n * @param {Object} obj to find index of\n * @param {Number} start\n * @api private\n */\n\nexports.indexOf = function(arr, obj, start){\n  for (var i = start || 0, l = arr.length; i < l; i++) {\n    if (arr[i] === obj)\n      return i;\n  }\n  return -1;\n};\n\n/**\n * Array#reduce (<=IE8)\n *\n * @param {Array} array\n * @param {Function} fn\n * @param {Object} initial value\n * @api private\n */\n\nexports.reduce = function(arr, fn, val){\n  var rval = val;\n\n  for (var i = 0, l = arr.length; i < l; i++) {\n    rval = fn(rval, arr[i], i, arr);\n  }\n\n  return rval;\n};\n\n/**\n * Array#filter (<=IE8)\n *\n * @param {Array} array\n * @param {Function} fn\n * @api private\n */\n\nexports.filter = function(arr, fn){\n  var ret = [];\n\n  for (var i = 0, l = arr.length; i < l; i++) {\n    var val = arr[i];\n    if (fn(val, i, arr)) ret.push(val);\n  }\n\n  return ret;\n};\n\n/**\n * Object.keys (<=IE8)\n *\n * @param {Object} obj\n * @return {Array} keys\n * @api private\n */\n\nexports.keys = Object.keys || function(obj) {\n  var keys = []\n    , has = Object.prototype.hasOwnProperty // for `window` on <=IE8\n\n  for (var key in obj) {\n    if (has.call(obj, key)) {\n      keys.push(key);\n    }\n  }\n\n  return keys;\n};\n\n/**\n * Watch the given `files` for changes\n * and invoke `fn(file)` on modification.\n *\n * @param {Array} files\n * @param {Function} fn\n * @api private\n */\n\nexports.watch = function(files, fn){\n  var options = { interval: 100 };\n  files.forEach(function(file){\n    debug('file %s', file);\n    fs.watchFile(file, options, function(curr, prev){\n      if (prev.mtime < curr.mtime) fn(file);\n    });\n  });\n};\n\n/**\n * Ignored files.\n */\n\nfunction ignored(path){\n  return !~ignore.indexOf(path);\n}\n\n/**\n * Lookup files in the given `dir`.\n *\n * @return {Array}\n * @api private\n */\n\nexports.files = function(dir, ext, ret){\n  ret = ret || [];\n  ext = ext || ['js'];\n\n  var re = new RegExp('\\\\.(' + ext.join('|') + ')$');\n\n  fs.readdirSync(dir)\n  .filter(ignored)\n  .forEach(function(path){\n    path = join(dir, path);\n    if (fs.statSync(path).isDirectory()) {\n      exports.files(path, ext, ret);\n    } else if (path.match(re)) {\n      ret.push(path);\n    }\n  });\n\n  return ret;\n};\n\n/**\n * Compute a slug from the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nexports.slug = function(str){\n  return str\n    .toLowerCase()\n    .replace(/ +/g, '-')\n    .replace(/[^-\\w]/g, '');\n};\n\n/**\n * Strip the function definition from `str`,\n * and re-indent for pre whitespace.\n */\n\nexports.clean = function(str) {\n  str = str\n    .replace(/\\r\\n?|[\\n\\u2028\\u2029]/g, \"\\n\").replace(/^\\uFEFF/, '')\n    .replace(/^function *\\(.*\\) *{|\\(.*\\) *=> *{?/, '')\n    .replace(/\\s+\\}$/, '');\n\n  var spaces = str.match(/^\\n?( *)/)[1].length\n    , tabs = str.match(/^\\n?(\\t*)/)[1].length\n    , re = new RegExp('^\\n?' + (tabs ? '\\t' : ' ') + '{' + (tabs ? tabs : spaces) + '}', 'gm');\n\n  str = str.replace(re, '');\n\n  return exports.trim(str);\n};\n\n/**\n * Trim the given `str`.\n *\n * @param {String} str\n * @return {String}\n * @api private\n */\n\nexports.trim = function(str){\n  return str.replace(/^\\s+|\\s+$/g, '');\n};\n\n/**\n * Parse the given `qs`.\n *\n * @param {String} qs\n * @return {Object}\n * @api private\n */\n\nexports.parseQuery = function(qs){\n  return exports.reduce(qs.replace('?', '').split('&'), function(obj, pair){\n    var i = pair.indexOf('=')\n      , key = pair.slice(0, i)\n      , val = pair.slice(++i);\n\n    obj[key] = decodeURIComponent(val);\n    return obj;\n  }, {});\n};\n\n/**\n * Highlight the given string of `js`.\n *\n * @param {String} js\n * @return {String}\n * @api private\n */\n\nfunction highlight(js) {\n  return js\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\\/\\/(.*)/gm, '<span class=\"comment\">//$1</span>')\n    .replace(/('.*?')/gm, '<span class=\"string\">$1</span>')\n    .replace(/(\\d+\\.\\d+)/gm, '<span class=\"number\">$1</span>')\n    .replace(/(\\d+)/gm, '<span class=\"number\">$1</span>')\n    .replace(/\\bnew[ \\t]+(\\w+)/gm, '<span class=\"keyword\">new</span> <span class=\"init\">$1</span>')\n    .replace(/\\b(function|new|throw|return|var|if|else)\\b/gm, '<span class=\"keyword\">$1</span>')\n}\n\n/**\n * Highlight the contents of tag `name`.\n *\n * @param {String} name\n * @api private\n */\n\nexports.highlightTags = function(name) {\n  var code = document.getElementById('mocha').getElementsByTagName(name);\n  for (var i = 0, len = code.length; i < len; ++i) {\n    code[i].innerHTML = highlight(code[i].innerHTML);\n  }\n};\n\n\n/**\n * Stringify `obj`.\n *\n * @param {Object} obj\n * @return {String}\n * @api private\n */\n\nexports.stringify = function(obj) {\n  if (obj instanceof RegExp) return obj.toString();\n  return JSON.stringify(exports.canonicalize(obj), null, 2).replace(/,(\\n|$)/g, '$1');\n};\n\n/**\n * Return a new object that has the keys in sorted order.\n * @param {Object} obj\n * @param {Array} [stack]\n * @return {Object}\n * @api private\n */\n\nexports.canonicalize = function(obj, stack) {\n  stack = stack || [];\n\n  if (exports.indexOf(stack, obj) !== -1) return '[Circular]';\n\n  var canonicalizedObj;\n\n  if ({}.toString.call(obj) === '[object Array]') {\n    stack.push(obj);\n    canonicalizedObj = exports.map(obj, function (item) {\n      return exports.canonicalize(item, stack);\n    });\n    stack.pop();\n  } else if (typeof obj === 'object' && obj !== null) {\n    stack.push(obj);\n    canonicalizedObj = {};\n    exports.forEach(exports.keys(obj).sort(), function (key) {\n      canonicalizedObj[key] = exports.canonicalize(obj[key], stack);\n    });\n    stack.pop();\n  } else {\n    canonicalizedObj = obj;\n  }\n\n  return canonicalizedObj;\n };\n\n/**\n * Lookup file names at the given `path`.\n */\nexports.lookupFiles = function lookupFiles(path, extensions, recursive) {\n  var files = [];\n  var re = new RegExp('\\\\.(' + extensions.join('|') + ')$');\n\n  if (!exists(path)) {\n    if (exists(path + '.js')) {\n      path += '.js';\n    } else {\n      files = glob.sync(path);\n      if (!files.length) throw new Error(\"cannot resolve path (or pattern) '\" + path + \"'\");\n      return files;\n    }\n  }\n\n  try {\n    var stat = fs.statSync(path);\n    if (stat.isFile()) return path;\n  }\n  catch (ignored) {\n    return;\n  }\n\n  fs.readdirSync(path).forEach(function(file){\n    file = join(path, file);\n    try {\n      var stat = fs.statSync(file);\n      if (stat.isDirectory()) {\n        if (recursive) {\n          files = files.concat(lookupFiles(file, extensions, recursive));\n        }\n        return;\n      }\n    }\n    catch (ignored) {\n      return;\n    }\n    if (!stat.isFile() || !re.test(file) || basename(file)[0] === '.') return;\n    files.push(file);\n  });\n\n  return files;\n};\n\n}); // module: utils.js\n// The global object is \"self\" in Web Workers.\nvar global = (function() { return this; })();\n\n/**\n * Save timer references to avoid Sinon interfering (see GH-237).\n */\n\nvar Date = global.Date;\nvar setTimeout = global.setTimeout;\nvar setInterval = global.setInterval;\nvar clearTimeout = global.clearTimeout;\nvar clearInterval = global.clearInterval;\n\n/**\n * Node shims.\n *\n * These are meant only to allow\n * mocha.js to run untouched, not\n * to allow running node code in\n * the browser.\n */\n\nvar process = {};\nprocess.exit = function(status){};\nprocess.stdout = {};\n\nvar uncaughtExceptionHandlers = [];\n\nvar originalOnerrorHandler = global.onerror;\n\n/**\n * Remove uncaughtException listener.\n * Revert to original onerror handler if previously defined.\n */\n\nprocess.removeListener = function(e, fn){\n  if ('uncaughtException' == e) {\n    if (originalOnerrorHandler) {\n      global.onerror = originalOnerrorHandler;\n    } else {\n      global.onerror = function() {};\n    }\n    var i = Mocha.utils.indexOf(uncaughtExceptionHandlers, fn);\n    if (i != -1) { uncaughtExceptionHandlers.splice(i, 1); }\n  }\n};\n\n/**\n * Implements uncaughtException listener.\n */\n\nprocess.on = function(e, fn){\n  if ('uncaughtException' == e) {\n    global.onerror = function(err, url, line){\n      fn(new Error(err + ' (' + url + ':' + line + ')'));\n      return true;\n    };\n    uncaughtExceptionHandlers.push(fn);\n  }\n};\n\n/**\n * Expose mocha.\n */\n\nvar Mocha = global.Mocha = require('mocha'),\n    mocha = global.mocha = new Mocha({ reporter: 'html' });\n\n// The BDD UI is registered by default, but no UI will be functional in the\n// browser without an explicit call to the overridden `mocha.ui` (see below).\n// Ensure that this default UI does not expose its methods to the global scope.\nmocha.suite.removeAllListeners('pre-require');\n\nvar immediateQueue = []\n  , immediateTimeout;\n\nfunction timeslice() {\n  var immediateStart = new Date().getTime();\n  while (immediateQueue.length && (new Date().getTime() - immediateStart) < 100) {\n    immediateQueue.shift()();\n  }\n  if (immediateQueue.length) {\n    immediateTimeout = setTimeout(timeslice, 0);\n  } else {\n    immediateTimeout = null;\n  }\n}\n\n/**\n * High-performance override of Runner.immediately.\n */\n\nMocha.Runner.immediately = function(callback) {\n  immediateQueue.push(callback);\n  if (!immediateTimeout) {\n    immediateTimeout = setTimeout(timeslice, 0);\n  }\n};\n\n/**\n * Function to allow assertion libraries to throw errors directly into mocha.\n * This is useful when running tests in a browser because window.onerror will\n * only receive the 'message' attribute of the Error.\n */\nmocha.throwError = function(err) {\n  Mocha.utils.forEach(uncaughtExceptionHandlers, function (fn) {\n    fn(err);\n  });\n  throw err;\n};\n\n/**\n * Override ui to ensure that the ui functions are initialized.\n * Normally this would happen in Mocha.prototype.loadFiles.\n */\n\nmocha.ui = function(ui){\n  Mocha.prototype.ui.call(this, ui);\n  this.suite.emit('pre-require', global, null, this);\n  return this;\n};\n\n/**\n * Setup mocha with the given setting options.\n */\n\nmocha.setup = function(opts){\n  if ('string' == typeof opts) opts = { ui: opts };\n  for (var opt in opts) this[opt](opts[opt]);\n  return this;\n};\n\n/**\n * Run mocha, returning the Runner.\n */\n\nmocha.run = function(fn){\n  var options = mocha.options;\n  mocha.globals('location');\n\n  var query = Mocha.utils.parseQuery(global.location.search || '');\n  if (query.grep) mocha.grep(query.grep);\n  if (query.invert) mocha.invert();\n\n  return Mocha.prototype.run.call(mocha, function(err){\n    // The DOM Document is not available in Web Workers.\n    var document = global.document;\n    if (document && document.getElementById('mocha') && options.noHighlighting !== true) {\n      Mocha.utils.highlightTags('code');\n    }\n    if (fn) fn(err);\n  });\n};\n\n/**\n * Expose the process shim.\n */\n\nMocha.process = process;\n})();\n"

/***/ },
/* 17 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * chai
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	var used = []
	  , exports = module.exports = {};
	
	/*!
	 * Chai version
	 */
	
	exports.version = '1.10.0';
	
	/*!
	 * Assertion Error
	 */
	
	exports.AssertionError = __webpack_require__(52);
	
	/*!
	 * Utils for plugins (not exported)
	 */
	
	var util = __webpack_require__(25);
	
	/**
	 * # .use(function)
	 *
	 * Provides a way to extend the internals of Chai
	 *
	 * @param {Function}
	 * @returns {this} for chaining
	 * @api public
	 */
	
	exports.use = function (fn) {
	  if (!~used.indexOf(fn)) {
	    fn(this, util);
	    used.push(fn);
	  }
	
	  return this;
	};
	
	/*!
	 * Configuration
	 */
	
	var config = __webpack_require__(23);
	exports.config = config;
	
	/*!
	 * Primary `Assertion` prototype
	 */
	
	var assertion = __webpack_require__(24);
	exports.use(assertion);
	
	/*!
	 * Core Assertions
	 */
	
	var core = __webpack_require__(26);
	exports.use(core);
	
	/*!
	 * Expect interface
	 */
	
	var expect = __webpack_require__(27);
	exports.use(expect);
	
	/*!
	 * Should interface
	 */
	
	var should = __webpack_require__(28);
	exports.use(should);
	
	/*!
	 * Assert interface
	 */
	
	var assert = __webpack_require__(29);
	exports.use(assert);


/***/ },
/* 18 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function() {
		var list = [];
		list.toString = function toString() {
			var result = [];
			for(var i = 0; i < this.length; i++) {
				var item = this[i];
				if(item[2]) {
					result.push("@media " + item[2] + "{" + item[1] + "}");
				} else {
					result.push(item[1]);
				}
			}
			return result.join("");
		};
		return list;
	}

/***/ },
/* 19 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(process) {// vim:ts=4:sts=4:sw=4:
	/*!
	 *
	 * Copyright 2009-2012 Kris Kowal under the terms of the MIT
	 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
	 *
	 * With parts by Tyler Close
	 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
	 * at http://www.opensource.org/licenses/mit-license.html
	 * Forked at ref_send.js version: 2009-05-11
	 *
	 * With parts by Mark Miller
	 * Copyright (C) 2011 Google Inc.
	 *
	 * Licensed under the Apache License, Version 2.0 (the "License");
	 * you may not use this file except in compliance with the License.
	 * You may obtain a copy of the License at
	 *
	 * http://www.apache.org/licenses/LICENSE-2.0
	 *
	 * Unless required by applicable law or agreed to in writing, software
	 * distributed under the License is distributed on an "AS IS" BASIS,
	 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
	 * See the License for the specific language governing permissions and
	 * limitations under the License.
	 *
	 */
	
	(function (definition) {
	    "use strict";
	
	    // This file will function properly as a <script> tag, or a module
	    // using CommonJS and NodeJS or RequireJS module formats.  In
	    // Common/Node/RequireJS, the module exports the Q API and when
	    // executed as a simple <script>, it creates a Q global instead.
	
	    // Montage Require
	    if (typeof bootstrap === "function") {
	        bootstrap("promise", definition);
	
	    // CommonJS
	    } else if (true) {
	        module.exports = definition();
	
	    // RequireJS
	    } else if (typeof define === "function" && define.amd) {
	        define(definition);
	
	    // SES (Secure EcmaScript)
	    } else if (typeof ses !== "undefined") {
	        if (!ses.ok()) {
	            return;
	        } else {
	            ses.makeQ = definition;
	        }
	
	    // <script>
	    } else if (typeof self !== "undefined") {
	        self.Q = definition();
	
	    } else {
	        throw new Error("This environment was not anticiapted by Q. Please file a bug.");
	    }
	
	})(function () {
	"use strict";
	
	var hasStacks = false;
	try {
	    throw new Error();
	} catch (e) {
	    hasStacks = !!e.stack;
	}
	
	// All code after this point will be filtered from stack traces reported
	// by Q.
	var qStartingLine = captureLine();
	var qFileName;
	
	// shims
	
	// used for fallback in "allResolved"
	var noop = function () {};
	
	// Use the fastest possible means to execute a task in a future turn
	// of the event loop.
	var nextTick =(function () {
	    // linked list of tasks (single, with head node)
	    var head = {task: void 0, next: null};
	    var tail = head;
	    var flushing = false;
	    var requestTick = void 0;
	    var isNodeJS = false;
	
	    function flush() {
	        /* jshint loopfunc: true */
	
	        while (head.next) {
	            head = head.next;
	            var task = head.task;
	            head.task = void 0;
	            var domain = head.domain;
	
	            if (domain) {
	                head.domain = void 0;
	                domain.enter();
	            }
	
	            try {
	                task();
	
	            } catch (e) {
	                if (isNodeJS) {
	                    // In node, uncaught exceptions are considered fatal errors.
	                    // Re-throw them synchronously to interrupt flushing!
	
	                    // Ensure continuation if the uncaught exception is suppressed
	                    // listening "uncaughtException" events (as domains does).
	                    // Continue in next event to avoid tick recursion.
	                    if (domain) {
	                        domain.exit();
	                    }
	                    setTimeout(flush, 0);
	                    if (domain) {
	                        domain.enter();
	                    }
	
	                    throw e;
	
	                } else {
	                    // In browsers, uncaught exceptions are not fatal.
	                    // Re-throw them asynchronously to avoid slow-downs.
	                    setTimeout(function() {
	                       throw e;
	                    }, 0);
	                }
	            }
	
	            if (domain) {
	                domain.exit();
	            }
	        }
	
	        flushing = false;
	    }
	
	    nextTick = function (task) {
	        tail = tail.next = {
	            task: task,
	            domain: isNodeJS && process.domain,
	            next: null
	        };
	
	        if (!flushing) {
	            flushing = true;
	            requestTick();
	        }
	    };
	
	    if (typeof process !== "undefined" && process.nextTick) {
	        // Node.js before 0.9. Note that some fake-Node environments, like the
	        // Mocha test runner, introduce a `process` global without a `nextTick`.
	        isNodeJS = true;
	
	        requestTick = function () {
	            process.nextTick(flush);
	        };
	
	    } else if (typeof setImmediate === "function") {
	        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
	        if (typeof window !== "undefined") {
	            requestTick = setImmediate.bind(window, flush);
	        } else {
	            requestTick = function () {
	                setImmediate(flush);
	            };
	        }
	
	    } else if (typeof MessageChannel !== "undefined") {
	        // modern browsers
	        // http://www.nonblocking.io/2011/06/windownexttick.html
	        var channel = new MessageChannel();
	        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
	        // working message ports the first time a page loads.
	        channel.port1.onmessage = function () {
	            requestTick = requestPortTick;
	            channel.port1.onmessage = flush;
	            flush();
	        };
	        var requestPortTick = function () {
	            // Opera requires us to provide a message payload, regardless of
	            // whether we use it.
	            channel.port2.postMessage(0);
	        };
	        requestTick = function () {
	            setTimeout(flush, 0);
	            requestPortTick();
	        };
	
	    } else {
	        // old browsers
	        requestTick = function () {
	            setTimeout(flush, 0);
	        };
	    }
	
	    return nextTick;
	})();
	
	// Attempt to make generics safe in the face of downstream
	// modifications.
	// There is no situation where this is necessary.
	// If you need a security guarantee, these primordials need to be
	// deeply frozen anyway, and if you don’t need a security guarantee,
	// this is just plain paranoid.
	// However, this **might** have the nice side-effect of reducing the size of
	// the minified code by reducing x.call() to merely x()
	// See Mark Miller’s explanation of what this does.
	// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
	var call = Function.call;
	function uncurryThis(f) {
	    return function () {
	        return call.apply(f, arguments);
	    };
	}
	// This is equivalent, but slower:
	// uncurryThis = Function_bind.bind(Function_bind.call);
	// http://jsperf.com/uncurrythis
	
	var array_slice = uncurryThis(Array.prototype.slice);
	
	var array_reduce = uncurryThis(
	    Array.prototype.reduce || function (callback, basis) {
	        var index = 0,
	            length = this.length;
	        // concerning the initial value, if one is not provided
	        if (arguments.length === 1) {
	            // seek to the first value in the array, accounting
	            // for the possibility that is is a sparse array
	            do {
	                if (index in this) {
	                    basis = this[index++];
	                    break;
	                }
	                if (++index >= length) {
	                    throw new TypeError();
	                }
	            } while (1);
	        }
	        // reduce
	        for (; index < length; index++) {
	            // account for the possibility that the array is sparse
	            if (index in this) {
	                basis = callback(basis, this[index], index);
	            }
	        }
	        return basis;
	    }
	);
	
	var array_indexOf = uncurryThis(
	    Array.prototype.indexOf || function (value) {
	        // not a very good shim, but good enough for our one use of it
	        for (var i = 0; i < this.length; i++) {
	            if (this[i] === value) {
	                return i;
	            }
	        }
	        return -1;
	    }
	);
	
	var array_map = uncurryThis(
	    Array.prototype.map || function (callback, thisp) {
	        var self = this;
	        var collect = [];
	        array_reduce(self, function (undefined, value, index) {
	            collect.push(callback.call(thisp, value, index, self));
	        }, void 0);
	        return collect;
	    }
	);
	
	var object_create = Object.create || function (prototype) {
	    function Type() { }
	    Type.prototype = prototype;
	    return new Type();
	};
	
	var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);
	
	var object_keys = Object.keys || function (object) {
	    var keys = [];
	    for (var key in object) {
	        if (object_hasOwnProperty(object, key)) {
	            keys.push(key);
	        }
	    }
	    return keys;
	};
	
	var object_toString = uncurryThis(Object.prototype.toString);
	
	function isObject(value) {
	    return value === Object(value);
	}
	
	// generator related shims
	
	// FIXME: Remove this function once ES6 generators are in SpiderMonkey.
	function isStopIteration(exception) {
	    return (
	        object_toString(exception) === "[object StopIteration]" ||
	        exception instanceof QReturnValue
	    );
	}
	
	// FIXME: Remove this helper and Q.return once ES6 generators are in
	// SpiderMonkey.
	var QReturnValue;
	if (typeof ReturnValue !== "undefined") {
	    QReturnValue = ReturnValue;
	} else {
	    QReturnValue = function (value) {
	        this.value = value;
	    };
	}
	
	// long stack traces
	
	var STACK_JUMP_SEPARATOR = "From previous event:";
	
	function makeStackTraceLong(error, promise) {
	    // If possible, transform the error stack trace by removing Node and Q
	    // cruft, then concatenating with the stack trace of `promise`. See #57.
	    if (hasStacks &&
	        promise.stack &&
	        typeof error === "object" &&
	        error !== null &&
	        error.stack &&
	        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
	    ) {
	        var stacks = [];
	        for (var p = promise; !!p; p = p.source) {
	            if (p.stack) {
	                stacks.unshift(p.stack);
	            }
	        }
	        stacks.unshift(error.stack);
	
	        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
	        error.stack = filterStackString(concatedStacks);
	    }
	}
	
	function filterStackString(stackString) {
	    var lines = stackString.split("\n");
	    var desiredLines = [];
	    for (var i = 0; i < lines.length; ++i) {
	        var line = lines[i];
	
	        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
	            desiredLines.push(line);
	        }
	    }
	    return desiredLines.join("\n");
	}
	
	function isNodeFrame(stackLine) {
	    return stackLine.indexOf("(module.js:") !== -1 ||
	           stackLine.indexOf("(node.js:") !== -1;
	}
	
	function getFileNameAndLineNumber(stackLine) {
	    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
	    // In IE10 function name can have spaces ("Anonymous function") O_o
	    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
	    if (attempt1) {
	        return [attempt1[1], Number(attempt1[2])];
	    }
	
	    // Anonymous functions: "at filename:lineNumber:columnNumber"
	    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
	    if (attempt2) {
	        return [attempt2[1], Number(attempt2[2])];
	    }
	
	    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
	    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
	    if (attempt3) {
	        return [attempt3[1], Number(attempt3[2])];
	    }
	}
	
	function isInternalFrame(stackLine) {
	    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);
	
	    if (!fileNameAndLineNumber) {
	        return false;
	    }
	
	    var fileName = fileNameAndLineNumber[0];
	    var lineNumber = fileNameAndLineNumber[1];
	
	    return fileName === qFileName &&
	        lineNumber >= qStartingLine &&
	        lineNumber <= qEndingLine;
	}
	
	// discover own file name and line number range for filtering stack
	// traces
	function captureLine() {
	    if (!hasStacks) {
	        return;
	    }
	
	    try {
	        throw new Error();
	    } catch (e) {
	        var lines = e.stack.split("\n");
	        var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
	        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
	        if (!fileNameAndLineNumber) {
	            return;
	        }
	
	        qFileName = fileNameAndLineNumber[0];
	        return fileNameAndLineNumber[1];
	    }
	}
	
	function deprecate(callback, name, alternative) {
	    return function () {
	        if (typeof console !== "undefined" &&
	            typeof console.warn === "function") {
	            console.warn(name + " is deprecated, use " + alternative +
	                         " instead.", new Error("").stack);
	        }
	        return callback.apply(callback, arguments);
	    };
	}
	
	// end of shims
	// beginning of real work
	
	/**
	 * Constructs a promise for an immediate reference, passes promises through, or
	 * coerces promises from different systems.
	 * @param value immediate reference or promise
	 */
	function Q(value) {
	    // If the object is already a Promise, return it directly.  This enables
	    // the resolve function to both be used to created references from objects,
	    // but to tolerably coerce non-promises to promises.
	    if (value instanceof Promise) {
	        return value;
	    }
	
	    // assimilate thenables
	    if (isPromiseAlike(value)) {
	        return coerce(value);
	    } else {
	        return fulfill(value);
	    }
	}
	Q.resolve = Q;
	
	/**
	 * Performs a task in a future turn of the event loop.
	 * @param {Function} task
	 */
	Q.nextTick = nextTick;
	
	/**
	 * Controls whether or not long stack traces will be on
	 */
	Q.longStackSupport = false;
	
	// enable long stacks if Q_DEBUG is set
	if (typeof process === "object" && process && process.env && process.env.Q_DEBUG) {
	    Q.longStackSupport = true;
	}
	
	/**
	 * Constructs a {promise, resolve, reject} object.
	 *
	 * `resolve` is a callback to invoke with a more resolved value for the
	 * promise. To fulfill the promise, invoke `resolve` with any value that is
	 * not a thenable. To reject the promise, invoke `resolve` with a rejected
	 * thenable, or invoke `reject` with the reason directly. To resolve the
	 * promise to another thenable, thus putting it in the same state, invoke
	 * `resolve` with that other thenable.
	 */
	Q.defer = defer;
	function defer() {
	    // if "messages" is an "Array", that indicates that the promise has not yet
	    // been resolved.  If it is "undefined", it has been resolved.  Each
	    // element of the messages array is itself an array of complete arguments to
	    // forward to the resolved promise.  We coerce the resolution value to a
	    // promise using the `resolve` function because it handles both fully
	    // non-thenable values and other thenables gracefully.
	    var messages = [], progressListeners = [], resolvedPromise;
	
	    var deferred = object_create(defer.prototype);
	    var promise = object_create(Promise.prototype);
	
	    promise.promiseDispatch = function (resolve, op, operands) {
	        var args = array_slice(arguments);
	        if (messages) {
	            messages.push(args);
	            if (op === "when" && operands[1]) { // progress operand
	                progressListeners.push(operands[1]);
	            }
	        } else {
	            Q.nextTick(function () {
	                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
	            });
	        }
	    };
	
	    // XXX deprecated
	    promise.valueOf = function () {
	        if (messages) {
	            return promise;
	        }
	        var nearerValue = nearer(resolvedPromise);
	        if (isPromise(nearerValue)) {
	            resolvedPromise = nearerValue; // shorten chain
	        }
	        return nearerValue;
	    };
	
	    promise.inspect = function () {
	        if (!resolvedPromise) {
	            return { state: "pending" };
	        }
	        return resolvedPromise.inspect();
	    };
	
	    if (Q.longStackSupport && hasStacks) {
	        try {
	            throw new Error();
	        } catch (e) {
	            // NOTE: don't try to use `Error.captureStackTrace` or transfer the
	            // accessor around; that causes memory leaks as per GH-111. Just
	            // reify the stack trace as a string ASAP.
	            //
	            // At the same time, cut off the first line; it's always just
	            // "[object Promise]\n", as per the `toString`.
	            promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
	        }
	    }
	
	    // NOTE: we do the checks for `resolvedPromise` in each method, instead of
	    // consolidating them into `become`, since otherwise we'd create new
	    // promises with the lines `become(whatever(value))`. See e.g. GH-252.
	
	    function become(newPromise) {
	        resolvedPromise = newPromise;
	        promise.source = newPromise;
	
	        array_reduce(messages, function (undefined, message) {
	            Q.nextTick(function () {
	                newPromise.promiseDispatch.apply(newPromise, message);
	            });
	        }, void 0);
	
	        messages = void 0;
	        progressListeners = void 0;
	    }
	
	    deferred.promise = promise;
	    deferred.resolve = function (value) {
	        if (resolvedPromise) {
	            return;
	        }
	
	        become(Q(value));
	    };
	
	    deferred.fulfill = function (value) {
	        if (resolvedPromise) {
	            return;
	        }
	
	        become(fulfill(value));
	    };
	    deferred.reject = function (reason) {
	        if (resolvedPromise) {
	            return;
	        }
	
	        become(reject(reason));
	    };
	    deferred.notify = function (progress) {
	        if (resolvedPromise) {
	            return;
	        }
	
	        array_reduce(progressListeners, function (undefined, progressListener) {
	            Q.nextTick(function () {
	                progressListener(progress);
	            });
	        }, void 0);
	    };
	
	    return deferred;
	}
	
	/**
	 * Creates a Node-style callback that will resolve or reject the deferred
	 * promise.
	 * @returns a nodeback
	 */
	defer.prototype.makeNodeResolver = function () {
	    var self = this;
	    return function (error, value) {
	        if (error) {
	            self.reject(error);
	        } else if (arguments.length > 2) {
	            self.resolve(array_slice(arguments, 1));
	        } else {
	            self.resolve(value);
	        }
	    };
	};
	
	/**
	 * @param resolver {Function} a function that returns nothing and accepts
	 * the resolve, reject, and notify functions for a deferred.
	 * @returns a promise that may be resolved with the given resolve and reject
	 * functions, or rejected by a thrown exception in resolver
	 */
	Q.Promise = promise; // ES6
	Q.promise = promise;
	function promise(resolver) {
	    if (typeof resolver !== "function") {
	        throw new TypeError("resolver must be a function.");
	    }
	    var deferred = defer();
	    try {
	        resolver(deferred.resolve, deferred.reject, deferred.notify);
	    } catch (reason) {
	        deferred.reject(reason);
	    }
	    return deferred.promise;
	}
	
	promise.race = race; // ES6
	promise.all = all; // ES6
	promise.reject = reject; // ES6
	promise.resolve = Q; // ES6
	
	// XXX experimental.  This method is a way to denote that a local value is
	// serializable and should be immediately dispatched to a remote upon request,
	// instead of passing a reference.
	Q.passByCopy = function (object) {
	    //freeze(object);
	    //passByCopies.set(object, true);
	    return object;
	};
	
	Promise.prototype.passByCopy = function () {
	    //freeze(object);
	    //passByCopies.set(object, true);
	    return this;
	};
	
	/**
	 * If two promises eventually fulfill to the same value, promises that value,
	 * but otherwise rejects.
	 * @param x {Any*}
	 * @param y {Any*}
	 * @returns {Any*} a promise for x and y if they are the same, but a rejection
	 * otherwise.
	 *
	 */
	Q.join = function (x, y) {
	    return Q(x).join(y);
	};
	
	Promise.prototype.join = function (that) {
	    return Q([this, that]).spread(function (x, y) {
	        if (x === y) {
	            // TODO: "===" should be Object.is or equiv
	            return x;
	        } else {
	            throw new Error("Can't join: not the same: " + x + " " + y);
	        }
	    });
	};
	
	/**
	 * Returns a promise for the first of an array of promises to become settled.
	 * @param answers {Array[Any*]} promises to race
	 * @returns {Any*} the first promise to be settled
	 */
	Q.race = race;
	function race(answerPs) {
	    return promise(function(resolve, reject) {
	        // Switch to this once we can assume at least ES5
	        // answerPs.forEach(function(answerP) {
	        //     Q(answerP).then(resolve, reject);
	        // });
	        // Use this in the meantime
	        for (var i = 0, len = answerPs.length; i < len; i++) {
	            Q(answerPs[i]).then(resolve, reject);
	        }
	    });
	}
	
	Promise.prototype.race = function () {
	    return this.then(Q.race);
	};
	
	/**
	 * Constructs a Promise with a promise descriptor object and optional fallback
	 * function.  The descriptor contains methods like when(rejected), get(name),
	 * set(name, value), post(name, args), and delete(name), which all
	 * return either a value, a promise for a value, or a rejection.  The fallback
	 * accepts the operation name, a resolver, and any further arguments that would
	 * have been forwarded to the appropriate method above had a method been
	 * provided with the proper name.  The API makes no guarantees about the nature
	 * of the returned object, apart from that it is usable whereever promises are
	 * bought and sold.
	 */
	Q.makePromise = Promise;
	function Promise(descriptor, fallback, inspect) {
	    if (fallback === void 0) {
	        fallback = function (op) {
	            return reject(new Error(
	                "Promise does not support operation: " + op
	            ));
	        };
	    }
	    if (inspect === void 0) {
	        inspect = function () {
	            return {state: "unknown"};
	        };
	    }
	
	    var promise = object_create(Promise.prototype);
	
	    promise.promiseDispatch = function (resolve, op, args) {
	        var result;
	        try {
	            if (descriptor[op]) {
	                result = descriptor[op].apply(promise, args);
	            } else {
	                result = fallback.call(promise, op, args);
	            }
	        } catch (exception) {
	            result = reject(exception);
	        }
	        if (resolve) {
	            resolve(result);
	        }
	    };
	
	    promise.inspect = inspect;
	
	    // XXX deprecated `valueOf` and `exception` support
	    if (inspect) {
	        var inspected = inspect();
	        if (inspected.state === "rejected") {
	            promise.exception = inspected.reason;
	        }
	
	        promise.valueOf = function () {
	            var inspected = inspect();
	            if (inspected.state === "pending" ||
	                inspected.state === "rejected") {
	                return promise;
	            }
	            return inspected.value;
	        };
	    }
	
	    return promise;
	}
	
	Promise.prototype.toString = function () {
	    return "[object Promise]";
	};
	
	Promise.prototype.then = function (fulfilled, rejected, progressed) {
	    var self = this;
	    var deferred = defer();
	    var done = false;   // ensure the untrusted promise makes at most a
	                        // single call to one of the callbacks
	
	    function _fulfilled(value) {
	        try {
	            return typeof fulfilled === "function" ? fulfilled(value) : value;
	        } catch (exception) {
	            return reject(exception);
	        }
	    }
	
	    function _rejected(exception) {
	        if (typeof rejected === "function") {
	            makeStackTraceLong(exception, self);
	            try {
	                return rejected(exception);
	            } catch (newException) {
	                return reject(newException);
	            }
	        }
	        return reject(exception);
	    }
	
	    function _progressed(value) {
	        return typeof progressed === "function" ? progressed(value) : value;
	    }
	
	    Q.nextTick(function () {
	        self.promiseDispatch(function (value) {
	            if (done) {
	                return;
	            }
	            done = true;
	
	            deferred.resolve(_fulfilled(value));
	        }, "when", [function (exception) {
	            if (done) {
	                return;
	            }
	            done = true;
	
	            deferred.resolve(_rejected(exception));
	        }]);
	    });
	
	    // Progress propagator need to be attached in the current tick.
	    self.promiseDispatch(void 0, "when", [void 0, function (value) {
	        var newValue;
	        var threw = false;
	        try {
	            newValue = _progressed(value);
	        } catch (e) {
	            threw = true;
	            if (Q.onerror) {
	                Q.onerror(e);
	            } else {
	                throw e;
	            }
	        }
	
	        if (!threw) {
	            deferred.notify(newValue);
	        }
	    }]);
	
	    return deferred.promise;
	};
	
	Q.tap = function (promise, callback) {
	    return Q(promise).tap(callback);
	};
	
	/**
	 * Works almost like "finally", but not called for rejections.
	 * Original resolution value is passed through callback unaffected.
	 * Callback may return a promise that will be awaited for.
	 * @param {Function} callback
	 * @returns {Q.Promise}
	 * @example
	 * doSomething()
	 *   .then(...)
	 *   .tap(console.log)
	 *   .then(...);
	 */
	Promise.prototype.tap = function (callback) {
	    callback = Q(callback);
	
	    return this.then(function (value) {
	        return callback.fcall(value).thenResolve(value);
	    });
	};
	
	/**
	 * Registers an observer on a promise.
	 *
	 * Guarantees:
	 *
	 * 1. that fulfilled and rejected will be called only once.
	 * 2. that either the fulfilled callback or the rejected callback will be
	 *    called, but not both.
	 * 3. that fulfilled and rejected will not be called in this turn.
	 *
	 * @param value      promise or immediate reference to observe
	 * @param fulfilled  function to be called with the fulfilled value
	 * @param rejected   function to be called with the rejection exception
	 * @param progressed function to be called on any progress notifications
	 * @return promise for the return value from the invoked callback
	 */
	Q.when = when;
	function when(value, fulfilled, rejected, progressed) {
	    return Q(value).then(fulfilled, rejected, progressed);
	}
	
	Promise.prototype.thenResolve = function (value) {
	    return this.then(function () { return value; });
	};
	
	Q.thenResolve = function (promise, value) {
	    return Q(promise).thenResolve(value);
	};
	
	Promise.prototype.thenReject = function (reason) {
	    return this.then(function () { throw reason; });
	};
	
	Q.thenReject = function (promise, reason) {
	    return Q(promise).thenReject(reason);
	};
	
	/**
	 * If an object is not a promise, it is as "near" as possible.
	 * If a promise is rejected, it is as "near" as possible too.
	 * If it’s a fulfilled promise, the fulfillment value is nearer.
	 * If it’s a deferred promise and the deferred has been resolved, the
	 * resolution is "nearer".
	 * @param object
	 * @returns most resolved (nearest) form of the object
	 */
	
	// XXX should we re-do this?
	Q.nearer = nearer;
	function nearer(value) {
	    if (isPromise(value)) {
	        var inspected = value.inspect();
	        if (inspected.state === "fulfilled") {
	            return inspected.value;
	        }
	    }
	    return value;
	}
	
	/**
	 * @returns whether the given object is a promise.
	 * Otherwise it is a fulfilled value.
	 */
	Q.isPromise = isPromise;
	function isPromise(object) {
	    return object instanceof Promise;
	}
	
	Q.isPromiseAlike = isPromiseAlike;
	function isPromiseAlike(object) {
	    return isObject(object) && typeof object.then === "function";
	}
	
	/**
	 * @returns whether the given object is a pending promise, meaning not
	 * fulfilled or rejected.
	 */
	Q.isPending = isPending;
	function isPending(object) {
	    return isPromise(object) && object.inspect().state === "pending";
	}
	
	Promise.prototype.isPending = function () {
	    return this.inspect().state === "pending";
	};
	
	/**
	 * @returns whether the given object is a value or fulfilled
	 * promise.
	 */
	Q.isFulfilled = isFulfilled;
	function isFulfilled(object) {
	    return !isPromise(object) || object.inspect().state === "fulfilled";
	}
	
	Promise.prototype.isFulfilled = function () {
	    return this.inspect().state === "fulfilled";
	};
	
	/**
	 * @returns whether the given object is a rejected promise.
	 */
	Q.isRejected = isRejected;
	function isRejected(object) {
	    return isPromise(object) && object.inspect().state === "rejected";
	}
	
	Promise.prototype.isRejected = function () {
	    return this.inspect().state === "rejected";
	};
	
	//// BEGIN UNHANDLED REJECTION TRACKING
	
	// This promise library consumes exceptions thrown in handlers so they can be
	// handled by a subsequent promise.  The exceptions get added to this array when
	// they are created, and removed when they are handled.  Note that in ES6 or
	// shimmed environments, this would naturally be a `Set`.
	var unhandledReasons = [];
	var unhandledRejections = [];
	var trackUnhandledRejections = true;
	
	function resetUnhandledRejections() {
	    unhandledReasons.length = 0;
	    unhandledRejections.length = 0;
	
	    if (!trackUnhandledRejections) {
	        trackUnhandledRejections = true;
	    }
	}
	
	function trackRejection(promise, reason) {
	    if (!trackUnhandledRejections) {
	        return;
	    }
	
	    unhandledRejections.push(promise);
	    if (reason && typeof reason.stack !== "undefined") {
	        unhandledReasons.push(reason.stack);
	    } else {
	        unhandledReasons.push("(no stack) " + reason);
	    }
	}
	
	function untrackRejection(promise) {
	    if (!trackUnhandledRejections) {
	        return;
	    }
	
	    var at = array_indexOf(unhandledRejections, promise);
	    if (at !== -1) {
	        unhandledRejections.splice(at, 1);
	        unhandledReasons.splice(at, 1);
	    }
	}
	
	Q.resetUnhandledRejections = resetUnhandledRejections;
	
	Q.getUnhandledReasons = function () {
	    // Make a copy so that consumers can't interfere with our internal state.
	    return unhandledReasons.slice();
	};
	
	Q.stopUnhandledRejectionTracking = function () {
	    resetUnhandledRejections();
	    trackUnhandledRejections = false;
	};
	
	resetUnhandledRejections();
	
	//// END UNHANDLED REJECTION TRACKING
	
	/**
	 * Constructs a rejected promise.
	 * @param reason value describing the failure
	 */
	Q.reject = reject;
	function reject(reason) {
	    var rejection = Promise({
	        "when": function (rejected) {
	            // note that the error has been handled
	            if (rejected) {
	                untrackRejection(this);
	            }
	            return rejected ? rejected(reason) : this;
	        }
	    }, function fallback() {
	        return this;
	    }, function inspect() {
	        return { state: "rejected", reason: reason };
	    });
	
	    // Note that the reason has not been handled.
	    trackRejection(rejection, reason);
	
	    return rejection;
	}
	
	/**
	 * Constructs a fulfilled promise for an immediate reference.
	 * @param value immediate reference
	 */
	Q.fulfill = fulfill;
	function fulfill(value) {
	    return Promise({
	        "when": function () {
	            return value;
	        },
	        "get": function (name) {
	            return value[name];
	        },
	        "set": function (name, rhs) {
	            value[name] = rhs;
	        },
	        "delete": function (name) {
	            delete value[name];
	        },
	        "post": function (name, args) {
	            // Mark Miller proposes that post with no name should apply a
	            // promised function.
	            if (name === null || name === void 0) {
	                return value.apply(void 0, args);
	            } else {
	                return value[name].apply(value, args);
	            }
	        },
	        "apply": function (thisp, args) {
	            return value.apply(thisp, args);
	        },
	        "keys": function () {
	            return object_keys(value);
	        }
	    }, void 0, function inspect() {
	        return { state: "fulfilled", value: value };
	    });
	}
	
	/**
	 * Converts thenables to Q promises.
	 * @param promise thenable promise
	 * @returns a Q promise
	 */
	function coerce(promise) {
	    var deferred = defer();
	    Q.nextTick(function () {
	        try {
	            promise.then(deferred.resolve, deferred.reject, deferred.notify);
	        } catch (exception) {
	            deferred.reject(exception);
	        }
	    });
	    return deferred.promise;
	}
	
	/**
	 * Annotates an object such that it will never be
	 * transferred away from this process over any promise
	 * communication channel.
	 * @param object
	 * @returns promise a wrapping of that object that
	 * additionally responds to the "isDef" message
	 * without a rejection.
	 */
	Q.master = master;
	function master(object) {
	    return Promise({
	        "isDef": function () {}
	    }, function fallback(op, args) {
	        return dispatch(object, op, args);
	    }, function () {
	        return Q(object).inspect();
	    });
	}
	
	/**
	 * Spreads the values of a promised array of arguments into the
	 * fulfillment callback.
	 * @param fulfilled callback that receives variadic arguments from the
	 * promised array
	 * @param rejected callback that receives the exception if the promise
	 * is rejected.
	 * @returns a promise for the return value or thrown exception of
	 * either callback.
	 */
	Q.spread = spread;
	function spread(value, fulfilled, rejected) {
	    return Q(value).spread(fulfilled, rejected);
	}
	
	Promise.prototype.spread = function (fulfilled, rejected) {
	    return this.all().then(function (array) {
	        return fulfilled.apply(void 0, array);
	    }, rejected);
	};
	
	/**
	 * The async function is a decorator for generator functions, turning
	 * them into asynchronous generators.  Although generators are only part
	 * of the newest ECMAScript 6 drafts, this code does not cause syntax
	 * errors in older engines.  This code should continue to work and will
	 * in fact improve over time as the language improves.
	 *
	 * ES6 generators are currently part of V8 version 3.19 with the
	 * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
	 * for longer, but under an older Python-inspired form.  This function
	 * works on both kinds of generators.
	 *
	 * Decorates a generator function such that:
	 *  - it may yield promises
	 *  - execution will continue when that promise is fulfilled
	 *  - the value of the yield expression will be the fulfilled value
	 *  - it returns a promise for the return value (when the generator
	 *    stops iterating)
	 *  - the decorated function returns a promise for the return value
	 *    of the generator or the first rejected promise among those
	 *    yielded.
	 *  - if an error is thrown in the generator, it propagates through
	 *    every following yield until it is caught, or until it escapes
	 *    the generator function altogether, and is translated into a
	 *    rejection for the promise returned by the decorated generator.
	 */
	Q.async = async;
	function async(makeGenerator) {
	    return function () {
	        // when verb is "send", arg is a value
	        // when verb is "throw", arg is an exception
	        function continuer(verb, arg) {
	            var result;
	
	            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
	            // engine that has a deployed base of browsers that support generators.
	            // However, SM's generators use the Python-inspired semantics of
	            // outdated ES6 drafts.  We would like to support ES6, but we'd also
	            // like to make it possible to use generators in deployed browsers, so
	            // we also support Python-style generators.  At some point we can remove
	            // this block.
	
	            if (typeof StopIteration === "undefined") {
	                // ES6 Generators
	                try {
	                    result = generator[verb](arg);
	                } catch (exception) {
	                    return reject(exception);
	                }
	                if (result.done) {
	                    return Q(result.value);
	                } else {
	                    return when(result.value, callback, errback);
	                }
	            } else {
	                // SpiderMonkey Generators
	                // FIXME: Remove this case when SM does ES6 generators.
	                try {
	                    result = generator[verb](arg);
	                } catch (exception) {
	                    if (isStopIteration(exception)) {
	                        return Q(exception.value);
	                    } else {
	                        return reject(exception);
	                    }
	                }
	                return when(result, callback, errback);
	            }
	        }
	        var generator = makeGenerator.apply(this, arguments);
	        var callback = continuer.bind(continuer, "next");
	        var errback = continuer.bind(continuer, "throw");
	        return callback();
	    };
	}
	
	/**
	 * The spawn function is a small wrapper around async that immediately
	 * calls the generator and also ends the promise chain, so that any
	 * unhandled errors are thrown instead of forwarded to the error
	 * handler. This is useful because it's extremely common to run
	 * generators at the top-level to work with libraries.
	 */
	Q.spawn = spawn;
	function spawn(makeGenerator) {
	    Q.done(Q.async(makeGenerator)());
	}
	
	// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
	/**
	 * Throws a ReturnValue exception to stop an asynchronous generator.
	 *
	 * This interface is a stop-gap measure to support generator return
	 * values in older Firefox/SpiderMonkey.  In browsers that support ES6
	 * generators like Chromium 29, just use "return" in your generator
	 * functions.
	 *
	 * @param value the return value for the surrounding generator
	 * @throws ReturnValue exception with the value.
	 * @example
	 * // ES6 style
	 * Q.async(function* () {
	 *      var foo = yield getFooPromise();
	 *      var bar = yield getBarPromise();
	 *      return foo + bar;
	 * })
	 * // Older SpiderMonkey style
	 * Q.async(function () {
	 *      var foo = yield getFooPromise();
	 *      var bar = yield getBarPromise();
	 *      Q.return(foo + bar);
	 * })
	 */
	Q["return"] = _return;
	function _return(value) {
	    throw new QReturnValue(value);
	}
	
	/**
	 * The promised function decorator ensures that any promise arguments
	 * are settled and passed as values (`this` is also settled and passed
	 * as a value).  It will also ensure that the result of a function is
	 * always a promise.
	 *
	 * @example
	 * var add = Q.promised(function (a, b) {
	 *     return a + b;
	 * });
	 * add(Q(a), Q(B));
	 *
	 * @param {function} callback The function to decorate
	 * @returns {function} a function that has been decorated.
	 */
	Q.promised = promised;
	function promised(callback) {
	    return function () {
	        return spread([this, all(arguments)], function (self, args) {
	            return callback.apply(self, args);
	        });
	    };
	}
	
	/**
	 * sends a message to a value in a future turn
	 * @param object* the recipient
	 * @param op the name of the message operation, e.g., "when",
	 * @param args further arguments to be forwarded to the operation
	 * @returns result {Promise} a promise for the result of the operation
	 */
	Q.dispatch = dispatch;
	function dispatch(object, op, args) {
	    return Q(object).dispatch(op, args);
	}
	
	Promise.prototype.dispatch = function (op, args) {
	    var self = this;
	    var deferred = defer();
	    Q.nextTick(function () {
	        self.promiseDispatch(deferred.resolve, op, args);
	    });
	    return deferred.promise;
	};
	
	/**
	 * Gets the value of a property in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of property to get
	 * @return promise for the property value
	 */
	Q.get = function (object, key) {
	    return Q(object).dispatch("get", [key]);
	};
	
	Promise.prototype.get = function (key) {
	    return this.dispatch("get", [key]);
	};
	
	/**
	 * Sets the value of a property in a future turn.
	 * @param object    promise or immediate reference for object object
	 * @param name      name of property to set
	 * @param value     new value of property
	 * @return promise for the return value
	 */
	Q.set = function (object, key, value) {
	    return Q(object).dispatch("set", [key, value]);
	};
	
	Promise.prototype.set = function (key, value) {
	    return this.dispatch("set", [key, value]);
	};
	
	/**
	 * Deletes a property in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of property to delete
	 * @return promise for the return value
	 */
	Q.del = // XXX legacy
	Q["delete"] = function (object, key) {
	    return Q(object).dispatch("delete", [key]);
	};
	
	Promise.prototype.del = // XXX legacy
	Promise.prototype["delete"] = function (key) {
	    return this.dispatch("delete", [key]);
	};
	
	/**
	 * Invokes a method in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of method to invoke
	 * @param value     a value to post, typically an array of
	 *                  invocation arguments for promises that
	 *                  are ultimately backed with `resolve` values,
	 *                  as opposed to those backed with URLs
	 *                  wherein the posted value can be any
	 *                  JSON serializable object.
	 * @return promise for the return value
	 */
	// bound locally because it is used by other methods
	Q.mapply = // XXX As proposed by "Redsandro"
	Q.post = function (object, name, args) {
	    return Q(object).dispatch("post", [name, args]);
	};
	
	Promise.prototype.mapply = // XXX As proposed by "Redsandro"
	Promise.prototype.post = function (name, args) {
	    return this.dispatch("post", [name, args]);
	};
	
	/**
	 * Invokes a method in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @param name      name of method to invoke
	 * @param ...args   array of invocation arguments
	 * @return promise for the return value
	 */
	Q.send = // XXX Mark Miller's proposed parlance
	Q.mcall = // XXX As proposed by "Redsandro"
	Q.invoke = function (object, name /*...args*/) {
	    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
	};
	
	Promise.prototype.send = // XXX Mark Miller's proposed parlance
	Promise.prototype.mcall = // XXX As proposed by "Redsandro"
	Promise.prototype.invoke = function (name /*...args*/) {
	    return this.dispatch("post", [name, array_slice(arguments, 1)]);
	};
	
	/**
	 * Applies the promised function in a future turn.
	 * @param object    promise or immediate reference for target function
	 * @param args      array of application arguments
	 */
	Q.fapply = function (object, args) {
	    return Q(object).dispatch("apply", [void 0, args]);
	};
	
	Promise.prototype.fapply = function (args) {
	    return this.dispatch("apply", [void 0, args]);
	};
	
	/**
	 * Calls the promised function in a future turn.
	 * @param object    promise or immediate reference for target function
	 * @param ...args   array of application arguments
	 */
	Q["try"] =
	Q.fcall = function (object /* ...args*/) {
	    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
	};
	
	Promise.prototype.fcall = function (/*...args*/) {
	    return this.dispatch("apply", [void 0, array_slice(arguments)]);
	};
	
	/**
	 * Binds the promised function, transforming return values into a fulfilled
	 * promise and thrown errors into a rejected one.
	 * @param object    promise or immediate reference for target function
	 * @param ...args   array of application arguments
	 */
	Q.fbind = function (object /*...args*/) {
	    var promise = Q(object);
	    var args = array_slice(arguments, 1);
	    return function fbound() {
	        return promise.dispatch("apply", [
	            this,
	            args.concat(array_slice(arguments))
	        ]);
	    };
	};
	Promise.prototype.fbind = function (/*...args*/) {
	    var promise = this;
	    var args = array_slice(arguments);
	    return function fbound() {
	        return promise.dispatch("apply", [
	            this,
	            args.concat(array_slice(arguments))
	        ]);
	    };
	};
	
	/**
	 * Requests the names of the owned properties of a promised
	 * object in a future turn.
	 * @param object    promise or immediate reference for target object
	 * @return promise for the keys of the eventually settled object
	 */
	Q.keys = function (object) {
	    return Q(object).dispatch("keys", []);
	};
	
	Promise.prototype.keys = function () {
	    return this.dispatch("keys", []);
	};
	
	/**
	 * Turns an array of promises into a promise for an array.  If any of
	 * the promises gets rejected, the whole array is rejected immediately.
	 * @param {Array*} an array (or promise for an array) of values (or
	 * promises for values)
	 * @returns a promise for an array of the corresponding values
	 */
	// By Mark Miller
	// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
	Q.all = all;
	function all(promises) {
	    return when(promises, function (promises) {
	        var countDown = 0;
	        var deferred = defer();
	        array_reduce(promises, function (undefined, promise, index) {
	            var snapshot;
	            if (
	                isPromise(promise) &&
	                (snapshot = promise.inspect()).state === "fulfilled"
	            ) {
	                promises[index] = snapshot.value;
	            } else {
	                ++countDown;
	                when(
	                    promise,
	                    function (value) {
	                        promises[index] = value;
	                        if (--countDown === 0) {
	                            deferred.resolve(promises);
	                        }
	                    },
	                    deferred.reject,
	                    function (progress) {
	                        deferred.notify({ index: index, value: progress });
	                    }
	                );
	            }
	        }, void 0);
	        if (countDown === 0) {
	            deferred.resolve(promises);
	        }
	        return deferred.promise;
	    });
	}
	
	Promise.prototype.all = function () {
	    return all(this);
	};
	
	/**
	 * Waits for all promises to be settled, either fulfilled or
	 * rejected.  This is distinct from `all` since that would stop
	 * waiting at the first rejection.  The promise returned by
	 * `allResolved` will never be rejected.
	 * @param promises a promise for an array (or an array) of promises
	 * (or values)
	 * @return a promise for an array of promises
	 */
	Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
	function allResolved(promises) {
	    return when(promises, function (promises) {
	        promises = array_map(promises, Q);
	        return when(all(array_map(promises, function (promise) {
	            return when(promise, noop, noop);
	        })), function () {
	            return promises;
	        });
	    });
	}
	
	Promise.prototype.allResolved = function () {
	    return allResolved(this);
	};
	
	/**
	 * @see Promise#allSettled
	 */
	Q.allSettled = allSettled;
	function allSettled(promises) {
	    return Q(promises).allSettled();
	}
	
	/**
	 * Turns an array of promises into a promise for an array of their states (as
	 * returned by `inspect`) when they have all settled.
	 * @param {Array[Any*]} values an array (or promise for an array) of values (or
	 * promises for values)
	 * @returns {Array[State]} an array of states for the respective values.
	 */
	Promise.prototype.allSettled = function () {
	    return this.then(function (promises) {
	        return all(array_map(promises, function (promise) {
	            promise = Q(promise);
	            function regardless() {
	                return promise.inspect();
	            }
	            return promise.then(regardless, regardless);
	        }));
	    });
	};
	
	/**
	 * Captures the failure of a promise, giving an oportunity to recover
	 * with a callback.  If the given promise is fulfilled, the returned
	 * promise is fulfilled.
	 * @param {Any*} promise for something
	 * @param {Function} callback to fulfill the returned promise if the
	 * given promise is rejected
	 * @returns a promise for the return value of the callback
	 */
	Q.fail = // XXX legacy
	Q["catch"] = function (object, rejected) {
	    return Q(object).then(void 0, rejected);
	};
	
	Promise.prototype.fail = // XXX legacy
	Promise.prototype["catch"] = function (rejected) {
	    return this.then(void 0, rejected);
	};
	
	/**
	 * Attaches a listener that can respond to progress notifications from a
	 * promise's originating deferred. This listener receives the exact arguments
	 * passed to ``deferred.notify``.
	 * @param {Any*} promise for something
	 * @param {Function} callback to receive any progress notifications
	 * @returns the given promise, unchanged
	 */
	Q.progress = progress;
	function progress(object, progressed) {
	    return Q(object).then(void 0, void 0, progressed);
	}
	
	Promise.prototype.progress = function (progressed) {
	    return this.then(void 0, void 0, progressed);
	};
	
	/**
	 * Provides an opportunity to observe the settling of a promise,
	 * regardless of whether the promise is fulfilled or rejected.  Forwards
	 * the resolution to the returned promise when the callback is done.
	 * The callback can return a promise to defer completion.
	 * @param {Any*} promise
	 * @param {Function} callback to observe the resolution of the given
	 * promise, takes no arguments.
	 * @returns a promise for the resolution of the given promise when
	 * ``fin`` is done.
	 */
	Q.fin = // XXX legacy
	Q["finally"] = function (object, callback) {
	    return Q(object)["finally"](callback);
	};
	
	Promise.prototype.fin = // XXX legacy
	Promise.prototype["finally"] = function (callback) {
	    callback = Q(callback);
	    return this.then(function (value) {
	        return callback.fcall().then(function () {
	            return value;
	        });
	    }, function (reason) {
	        // TODO attempt to recycle the rejection with "this".
	        return callback.fcall().then(function () {
	            throw reason;
	        });
	    });
	};
	
	/**
	 * Terminates a chain of promises, forcing rejections to be
	 * thrown as exceptions.
	 * @param {Any*} promise at the end of a chain of promises
	 * @returns nothing
	 */
	Q.done = function (object, fulfilled, rejected, progress) {
	    return Q(object).done(fulfilled, rejected, progress);
	};
	
	Promise.prototype.done = function (fulfilled, rejected, progress) {
	    var onUnhandledError = function (error) {
	        // forward to a future turn so that ``when``
	        // does not catch it and turn it into a rejection.
	        Q.nextTick(function () {
	            makeStackTraceLong(error, promise);
	            if (Q.onerror) {
	                Q.onerror(error);
	            } else {
	                throw error;
	            }
	        });
	    };
	
	    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
	    var promise = fulfilled || rejected || progress ?
	        this.then(fulfilled, rejected, progress) :
	        this;
	
	    if (typeof process === "object" && process && process.domain) {
	        onUnhandledError = process.domain.bind(onUnhandledError);
	    }
	
	    promise.then(void 0, onUnhandledError);
	};
	
	/**
	 * Causes a promise to be rejected if it does not get fulfilled before
	 * some milliseconds time out.
	 * @param {Any*} promise
	 * @param {Number} milliseconds timeout
	 * @param {Any*} custom error message or Error object (optional)
	 * @returns a promise for the resolution of the given promise if it is
	 * fulfilled before the timeout, otherwise rejected.
	 */
	Q.timeout = function (object, ms, error) {
	    return Q(object).timeout(ms, error);
	};
	
	Promise.prototype.timeout = function (ms, error) {
	    var deferred = defer();
	    var timeoutId = setTimeout(function () {
	        if (!error || "string" === typeof error) {
	            error = new Error(error || "Timed out after " + ms + " ms");
	            error.code = "ETIMEDOUT";
	        }
	        deferred.reject(error);
	    }, ms);
	
	    this.then(function (value) {
	        clearTimeout(timeoutId);
	        deferred.resolve(value);
	    }, function (exception) {
	        clearTimeout(timeoutId);
	        deferred.reject(exception);
	    }, deferred.notify);
	
	    return deferred.promise;
	};
	
	/**
	 * Returns a promise for the given value (or promised value), some
	 * milliseconds after it resolved. Passes rejections immediately.
	 * @param {Any*} promise
	 * @param {Number} milliseconds
	 * @returns a promise for the resolution of the given promise after milliseconds
	 * time has elapsed since the resolution of the given promise.
	 * If the given promise rejects, that is passed immediately.
	 */
	Q.delay = function (object, timeout) {
	    if (timeout === void 0) {
	        timeout = object;
	        object = void 0;
	    }
	    return Q(object).delay(timeout);
	};
	
	Promise.prototype.delay = function (timeout) {
	    return this.then(function (value) {
	        var deferred = defer();
	        setTimeout(function () {
	            deferred.resolve(value);
	        }, timeout);
	        return deferred.promise;
	    });
	};
	
	/**
	 * Passes a continuation to a Node function, which is called with the given
	 * arguments provided as an array, and returns a promise.
	 *
	 *      Q.nfapply(FS.readFile, [__filename])
	 *      .then(function (content) {
	 *      })
	 *
	 */
	Q.nfapply = function (callback, args) {
	    return Q(callback).nfapply(args);
	};
	
	Promise.prototype.nfapply = function (args) {
	    var deferred = defer();
	    var nodeArgs = array_slice(args);
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.fapply(nodeArgs).fail(deferred.reject);
	    return deferred.promise;
	};
	
	/**
	 * Passes a continuation to a Node function, which is called with the given
	 * arguments provided individually, and returns a promise.
	 * @example
	 * Q.nfcall(FS.readFile, __filename)
	 * .then(function (content) {
	 * })
	 *
	 */
	Q.nfcall = function (callback /*...args*/) {
	    var args = array_slice(arguments, 1);
	    return Q(callback).nfapply(args);
	};
	
	Promise.prototype.nfcall = function (/*...args*/) {
	    var nodeArgs = array_slice(arguments);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.fapply(nodeArgs).fail(deferred.reject);
	    return deferred.promise;
	};
	
	/**
	 * Wraps a NodeJS continuation passing function and returns an equivalent
	 * version that returns a promise.
	 * @example
	 * Q.nfbind(FS.readFile, __filename)("utf-8")
	 * .then(console.log)
	 * .done()
	 */
	Q.nfbind =
	Q.denodeify = function (callback /*...args*/) {
	    var baseArgs = array_slice(arguments, 1);
	    return function () {
	        var nodeArgs = baseArgs.concat(array_slice(arguments));
	        var deferred = defer();
	        nodeArgs.push(deferred.makeNodeResolver());
	        Q(callback).fapply(nodeArgs).fail(deferred.reject);
	        return deferred.promise;
	    };
	};
	
	Promise.prototype.nfbind =
	Promise.prototype.denodeify = function (/*...args*/) {
	    var args = array_slice(arguments);
	    args.unshift(this);
	    return Q.denodeify.apply(void 0, args);
	};
	
	Q.nbind = function (callback, thisp /*...args*/) {
	    var baseArgs = array_slice(arguments, 2);
	    return function () {
	        var nodeArgs = baseArgs.concat(array_slice(arguments));
	        var deferred = defer();
	        nodeArgs.push(deferred.makeNodeResolver());
	        function bound() {
	            return callback.apply(thisp, arguments);
	        }
	        Q(bound).fapply(nodeArgs).fail(deferred.reject);
	        return deferred.promise;
	    };
	};
	
	Promise.prototype.nbind = function (/*thisp, ...args*/) {
	    var args = array_slice(arguments, 0);
	    args.unshift(this);
	    return Q.nbind.apply(void 0, args);
	};
	
	/**
	 * Calls a method of a Node-style object that accepts a Node-style
	 * callback with a given array of arguments, plus a provided callback.
	 * @param object an object that has the named method
	 * @param {String} name name of the method of object
	 * @param {Array} args arguments to pass to the method; the callback
	 * will be provided by Q and appended to these arguments.
	 * @returns a promise for the value or error
	 */
	Q.nmapply = // XXX As proposed by "Redsandro"
	Q.npost = function (object, name, args) {
	    return Q(object).npost(name, args);
	};
	
	Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
	Promise.prototype.npost = function (name, args) {
	    var nodeArgs = array_slice(args || []);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
	    return deferred.promise;
	};
	
	/**
	 * Calls a method of a Node-style object that accepts a Node-style
	 * callback, forwarding the given variadic arguments, plus a provided
	 * callback argument.
	 * @param object an object that has the named method
	 * @param {String} name name of the method of object
	 * @param ...args arguments to pass to the method; the callback will
	 * be provided by Q and appended to these arguments.
	 * @returns a promise for the value or error
	 */
	Q.nsend = // XXX Based on Mark Miller's proposed "send"
	Q.nmcall = // XXX Based on "Redsandro's" proposal
	Q.ninvoke = function (object, name /*...args*/) {
	    var nodeArgs = array_slice(arguments, 2);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
	    return deferred.promise;
	};
	
	Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
	Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
	Promise.prototype.ninvoke = function (name /*...args*/) {
	    var nodeArgs = array_slice(arguments, 1);
	    var deferred = defer();
	    nodeArgs.push(deferred.makeNodeResolver());
	    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
	    return deferred.promise;
	};
	
	/**
	 * If a function would like to support both Node continuation-passing-style and
	 * promise-returning-style, it can end its internal promise chain with
	 * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
	 * elects to use a nodeback, the result will be sent there.  If they do not
	 * pass a nodeback, they will receive the result promise.
	 * @param object a result (or a promise for a result)
	 * @param {Function} nodeback a Node.js-style callback
	 * @returns either the promise or nothing
	 */
	Q.nodeify = nodeify;
	function nodeify(object, nodeback) {
	    return Q(object).nodeify(nodeback);
	}
	
	Promise.prototype.nodeify = function (nodeback) {
	    if (nodeback) {
	        this.then(function (value) {
	            Q.nextTick(function () {
	                nodeback(null, value);
	            });
	        }, function (error) {
	            Q.nextTick(function () {
	                nodeback(error);
	            });
	        });
	    } else {
	        return this;
	    }
	};
	
	// All code before this point will be filtered from stack traces.
	var qEndingLine = captureLine();
	
	return Q;
	
	});
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(10)))

/***/ },
/* 20 */
/***/ function(module, exports, __webpack_require__) {

	var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;//     Underscore.js 1.7.0
	//     http://underscorejs.org
	//     (c) 2009-2014 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
	//     Underscore may be freely distributed under the MIT license.
	
	(function() {
	
	  // Baseline setup
	  // --------------
	
	  // Establish the root object, `window` in the browser, or `exports` on the server.
	  var root = this;
	
	  // Save the previous value of the `_` variable.
	  var previousUnderscore = root._;
	
	  // Save bytes in the minified (but not gzipped) version:
	  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;
	
	  // Create quick reference variables for speed access to core prototypes.
	  var
	    push             = ArrayProto.push,
	    slice            = ArrayProto.slice,
	    concat           = ArrayProto.concat,
	    toString         = ObjProto.toString,
	    hasOwnProperty   = ObjProto.hasOwnProperty;
	
	  // All **ECMAScript 5** native function implementations that we hope to use
	  // are declared here.
	  var
	    nativeIsArray      = Array.isArray,
	    nativeKeys         = Object.keys,
	    nativeBind         = FuncProto.bind;
	
	  // Create a safe reference to the Underscore object for use below.
	  var _ = function(obj) {
	    if (obj instanceof _) return obj;
	    if (!(this instanceof _)) return new _(obj);
	    this._wrapped = obj;
	  };
	
	  // Export the Underscore object for **Node.js**, with
	  // backwards-compatibility for the old `require()` API. If we're in
	  // the browser, add `_` as a global object.
	  if (true) {
	    if (typeof module !== 'undefined' && module.exports) {
	      exports = module.exports = _;
	    }
	    exports._ = _;
	  } else {
	    root._ = _;
	  }
	
	  // Current version.
	  _.VERSION = '1.7.0';
	
	  // Internal function that returns an efficient (for current engines) version
	  // of the passed-in callback, to be repeatedly applied in other Underscore
	  // functions.
	  var createCallback = function(func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	      case 1: return function(value) {
	        return func.call(context, value);
	      };
	      case 2: return function(value, other) {
	        return func.call(context, value, other);
	      };
	      case 3: return function(value, index, collection) {
	        return func.call(context, value, index, collection);
	      };
	      case 4: return function(accumulator, value, index, collection) {
	        return func.call(context, accumulator, value, index, collection);
	      };
	    }
	    return function() {
	      return func.apply(context, arguments);
	    };
	  };
	
	  // A mostly-internal function to generate callbacks that can be applied
	  // to each element in a collection, returning the desired result — either
	  // identity, an arbitrary callback, a property matcher, or a property accessor.
	  _.iteratee = function(value, context, argCount) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return createCallback(value, context, argCount);
	    if (_.isObject(value)) return _.matches(value);
	    return _.property(value);
	  };
	
	  // Collection Functions
	  // --------------------
	
	  // The cornerstone, an `each` implementation, aka `forEach`.
	  // Handles raw objects in addition to array-likes. Treats all
	  // sparse array-likes as if they were dense.
	  _.each = _.forEach = function(obj, iteratee, context) {
	    if (obj == null) return obj;
	    iteratee = createCallback(iteratee, context);
	    var i, length = obj.length;
	    if (length === +length) {
	      for (i = 0; i < length; i++) {
	        iteratee(obj[i], i, obj);
	      }
	    } else {
	      var keys = _.keys(obj);
	      for (i = 0, length = keys.length; i < length; i++) {
	        iteratee(obj[keys[i]], keys[i], obj);
	      }
	    }
	    return obj;
	  };
	
	  // Return the results of applying the iteratee to each element.
	  _.map = _.collect = function(obj, iteratee, context) {
	    if (obj == null) return [];
	    iteratee = _.iteratee(iteratee, context);
	    var keys = obj.length !== +obj.length && _.keys(obj),
	        length = (keys || obj).length,
	        results = Array(length),
	        currentKey;
	    for (var index = 0; index < length; index++) {
	      currentKey = keys ? keys[index] : index;
	      results[index] = iteratee(obj[currentKey], currentKey, obj);
	    }
	    return results;
	  };
	
	  var reduceError = 'Reduce of empty array with no initial value';
	
	  // **Reduce** builds up a single result from a list of values, aka `inject`,
	  // or `foldl`.
	  _.reduce = _.foldl = _.inject = function(obj, iteratee, memo, context) {
	    if (obj == null) obj = [];
	    iteratee = createCallback(iteratee, context, 4);
	    var keys = obj.length !== +obj.length && _.keys(obj),
	        length = (keys || obj).length,
	        index = 0, currentKey;
	    if (arguments.length < 3) {
	      if (!length) throw new TypeError(reduceError);
	      memo = obj[keys ? keys[index++] : index++];
	    }
	    for (; index < length; index++) {
	      currentKey = keys ? keys[index] : index;
	      memo = iteratee(memo, obj[currentKey], currentKey, obj);
	    }
	    return memo;
	  };
	
	  // The right-associative version of reduce, also known as `foldr`.
	  _.reduceRight = _.foldr = function(obj, iteratee, memo, context) {
	    if (obj == null) obj = [];
	    iteratee = createCallback(iteratee, context, 4);
	    var keys = obj.length !== + obj.length && _.keys(obj),
	        index = (keys || obj).length,
	        currentKey;
	    if (arguments.length < 3) {
	      if (!index) throw new TypeError(reduceError);
	      memo = obj[keys ? keys[--index] : --index];
	    }
	    while (index--) {
	      currentKey = keys ? keys[index] : index;
	      memo = iteratee(memo, obj[currentKey], currentKey, obj);
	    }
	    return memo;
	  };
	
	  // Return the first value which passes a truth test. Aliased as `detect`.
	  _.find = _.detect = function(obj, predicate, context) {
	    var result;
	    predicate = _.iteratee(predicate, context);
	    _.some(obj, function(value, index, list) {
	      if (predicate(value, index, list)) {
	        result = value;
	        return true;
	      }
	    });
	    return result;
	  };
	
	  // Return all the elements that pass a truth test.
	  // Aliased as `select`.
	  _.filter = _.select = function(obj, predicate, context) {
	    var results = [];
	    if (obj == null) return results;
	    predicate = _.iteratee(predicate, context);
	    _.each(obj, function(value, index, list) {
	      if (predicate(value, index, list)) results.push(value);
	    });
	    return results;
	  };
	
	  // Return all the elements for which a truth test fails.
	  _.reject = function(obj, predicate, context) {
	    return _.filter(obj, _.negate(_.iteratee(predicate)), context);
	  };
	
	  // Determine whether all of the elements match a truth test.
	  // Aliased as `all`.
	  _.every = _.all = function(obj, predicate, context) {
	    if (obj == null) return true;
	    predicate = _.iteratee(predicate, context);
	    var keys = obj.length !== +obj.length && _.keys(obj),
	        length = (keys || obj).length,
	        index, currentKey;
	    for (index = 0; index < length; index++) {
	      currentKey = keys ? keys[index] : index;
	      if (!predicate(obj[currentKey], currentKey, obj)) return false;
	    }
	    return true;
	  };
	
	  // Determine if at least one element in the object matches a truth test.
	  // Aliased as `any`.
	  _.some = _.any = function(obj, predicate, context) {
	    if (obj == null) return false;
	    predicate = _.iteratee(predicate, context);
	    var keys = obj.length !== +obj.length && _.keys(obj),
	        length = (keys || obj).length,
	        index, currentKey;
	    for (index = 0; index < length; index++) {
	      currentKey = keys ? keys[index] : index;
	      if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	  };
	
	  // Determine if the array or object contains a given value (using `===`).
	  // Aliased as `include`.
	  _.contains = _.include = function(obj, target) {
	    if (obj == null) return false;
	    if (obj.length !== +obj.length) obj = _.values(obj);
	    return _.indexOf(obj, target) >= 0;
	  };
	
	  // Invoke a method (with arguments) on every item in a collection.
	  _.invoke = function(obj, method) {
	    var args = slice.call(arguments, 2);
	    var isFunc = _.isFunction(method);
	    return _.map(obj, function(value) {
	      return (isFunc ? method : value[method]).apply(value, args);
	    });
	  };
	
	  // Convenience version of a common use case of `map`: fetching a property.
	  _.pluck = function(obj, key) {
	    return _.map(obj, _.property(key));
	  };
	
	  // Convenience version of a common use case of `filter`: selecting only objects
	  // containing specific `key:value` pairs.
	  _.where = function(obj, attrs) {
	    return _.filter(obj, _.matches(attrs));
	  };
	
	  // Convenience version of a common use case of `find`: getting the first object
	  // containing specific `key:value` pairs.
	  _.findWhere = function(obj, attrs) {
	    return _.find(obj, _.matches(attrs));
	  };
	
	  // Return the maximum element (or element-based computation).
	  _.max = function(obj, iteratee, context) {
	    var result = -Infinity, lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = obj.length === +obj.length ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value > result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = _.iteratee(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };
	
	  // Return the minimum element (or element-based computation).
	  _.min = function(obj, iteratee, context) {
	    var result = Infinity, lastComputed = Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	      obj = obj.length === +obj.length ? obj : _.values(obj);
	      for (var i = 0, length = obj.length; i < length; i++) {
	        value = obj[i];
	        if (value < result) {
	          result = value;
	        }
	      }
	    } else {
	      iteratee = _.iteratee(iteratee, context);
	      _.each(obj, function(value, index, list) {
	        computed = iteratee(value, index, list);
	        if (computed < lastComputed || computed === Infinity && result === Infinity) {
	          result = value;
	          lastComputed = computed;
	        }
	      });
	    }
	    return result;
	  };
	
	  // Shuffle a collection, using the modern version of the
	  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
	  _.shuffle = function(obj) {
	    var set = obj && obj.length === +obj.length ? obj : _.values(obj);
	    var length = set.length;
	    var shuffled = Array(length);
	    for (var index = 0, rand; index < length; index++) {
	      rand = _.random(0, index);
	      if (rand !== index) shuffled[index] = shuffled[rand];
	      shuffled[rand] = set[index];
	    }
	    return shuffled;
	  };
	
	  // Sample **n** random values from a collection.
	  // If **n** is not specified, returns a single random element.
	  // The internal `guard` argument allows it to work with `map`.
	  _.sample = function(obj, n, guard) {
	    if (n == null || guard) {
	      if (obj.length !== +obj.length) obj = _.values(obj);
	      return obj[_.random(obj.length - 1)];
	    }
	    return _.shuffle(obj).slice(0, Math.max(0, n));
	  };
	
	  // Sort the object's values by a criterion produced by an iteratee.
	  _.sortBy = function(obj, iteratee, context) {
	    iteratee = _.iteratee(iteratee, context);
	    return _.pluck(_.map(obj, function(value, index, list) {
	      return {
	        value: value,
	        index: index,
	        criteria: iteratee(value, index, list)
	      };
	    }).sort(function(left, right) {
	      var a = left.criteria;
	      var b = right.criteria;
	      if (a !== b) {
	        if (a > b || a === void 0) return 1;
	        if (a < b || b === void 0) return -1;
	      }
	      return left.index - right.index;
	    }), 'value');
	  };
	
	  // An internal function used for aggregate "group by" operations.
	  var group = function(behavior) {
	    return function(obj, iteratee, context) {
	      var result = {};
	      iteratee = _.iteratee(iteratee, context);
	      _.each(obj, function(value, index) {
	        var key = iteratee(value, index, obj);
	        behavior(result, value, key);
	      });
	      return result;
	    };
	  };
	
	  // Groups the object's values by a criterion. Pass either a string attribute
	  // to group by, or a function that returns the criterion.
	  _.groupBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
	  });
	
	  // Indexes the object's values by a criterion, similar to `groupBy`, but for
	  // when you know that your index values will be unique.
	  _.indexBy = group(function(result, value, key) {
	    result[key] = value;
	  });
	
	  // Counts instances of an object that group by a certain criterion. Pass
	  // either a string attribute to count by, or a function that returns the
	  // criterion.
	  _.countBy = group(function(result, value, key) {
	    if (_.has(result, key)) result[key]++; else result[key] = 1;
	  });
	
	  // Use a comparator function to figure out the smallest index at which
	  // an object should be inserted so as to maintain order. Uses binary search.
	  _.sortedIndex = function(array, obj, iteratee, context) {
	    iteratee = _.iteratee(iteratee, context, 1);
	    var value = iteratee(obj);
	    var low = 0, high = array.length;
	    while (low < high) {
	      var mid = low + high >>> 1;
	      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
	    }
	    return low;
	  };
	
	  // Safely create a real, live array from anything iterable.
	  _.toArray = function(obj) {
	    if (!obj) return [];
	    if (_.isArray(obj)) return slice.call(obj);
	    if (obj.length === +obj.length) return _.map(obj, _.identity);
	    return _.values(obj);
	  };
	
	  // Return the number of elements in an object.
	  _.size = function(obj) {
	    if (obj == null) return 0;
	    return obj.length === +obj.length ? obj.length : _.keys(obj).length;
	  };
	
	  // Split a collection into two arrays: one whose elements all satisfy the given
	  // predicate, and one whose elements all do not satisfy the predicate.
	  _.partition = function(obj, predicate, context) {
	    predicate = _.iteratee(predicate, context);
	    var pass = [], fail = [];
	    _.each(obj, function(value, key, obj) {
	      (predicate(value, key, obj) ? pass : fail).push(value);
	    });
	    return [pass, fail];
	  };
	
	  // Array Functions
	  // ---------------
	
	  // Get the first element of an array. Passing **n** will return the first N
	  // values in the array. Aliased as `head` and `take`. The **guard** check
	  // allows it to work with `_.map`.
	  _.first = _.head = _.take = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[0];
	    if (n < 0) return [];
	    return slice.call(array, 0, n);
	  };
	
	  // Returns everything but the last entry of the array. Especially useful on
	  // the arguments object. Passing **n** will return all the values in
	  // the array, excluding the last N. The **guard** check allows it to work with
	  // `_.map`.
	  _.initial = function(array, n, guard) {
	    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
	  };
	
	  // Get the last element of an array. Passing **n** will return the last N
	  // values in the array. The **guard** check allows it to work with `_.map`.
	  _.last = function(array, n, guard) {
	    if (array == null) return void 0;
	    if (n == null || guard) return array[array.length - 1];
	    return slice.call(array, Math.max(array.length - n, 0));
	  };
	
	  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
	  // Especially useful on the arguments object. Passing an **n** will return
	  // the rest N values in the array. The **guard**
	  // check allows it to work with `_.map`.
	  _.rest = _.tail = _.drop = function(array, n, guard) {
	    return slice.call(array, n == null || guard ? 1 : n);
	  };
	
	  // Trim out all falsy values from an array.
	  _.compact = function(array) {
	    return _.filter(array, _.identity);
	  };
	
	  // Internal implementation of a recursive `flatten` function.
	  var flatten = function(input, shallow, strict, output) {
	    if (shallow && _.every(input, _.isArray)) {
	      return concat.apply(output, input);
	    }
	    for (var i = 0, length = input.length; i < length; i++) {
	      var value = input[i];
	      if (!_.isArray(value) && !_.isArguments(value)) {
	        if (!strict) output.push(value);
	      } else if (shallow) {
	        push.apply(output, value);
	      } else {
	        flatten(value, shallow, strict, output);
	      }
	    }
	    return output;
	  };
	
	  // Flatten out an array, either recursively (by default), or just one level.
	  _.flatten = function(array, shallow) {
	    return flatten(array, shallow, false, []);
	  };
	
	  // Return a version of the array that does not contain the specified value(s).
	  _.without = function(array) {
	    return _.difference(array, slice.call(arguments, 1));
	  };
	
	  // Produce a duplicate-free version of the array. If the array has already
	  // been sorted, you have the option of using a faster algorithm.
	  // Aliased as `unique`.
	  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
	    if (array == null) return [];
	    if (!_.isBoolean(isSorted)) {
	      context = iteratee;
	      iteratee = isSorted;
	      isSorted = false;
	    }
	    if (iteratee != null) iteratee = _.iteratee(iteratee, context);
	    var result = [];
	    var seen = [];
	    for (var i = 0, length = array.length; i < length; i++) {
	      var value = array[i];
	      if (isSorted) {
	        if (!i || seen !== value) result.push(value);
	        seen = value;
	      } else if (iteratee) {
	        var computed = iteratee(value, i, array);
	        if (_.indexOf(seen, computed) < 0) {
	          seen.push(computed);
	          result.push(value);
	        }
	      } else if (_.indexOf(result, value) < 0) {
	        result.push(value);
	      }
	    }
	    return result;
	  };
	
	  // Produce an array that contains the union: each distinct element from all of
	  // the passed-in arrays.
	  _.union = function() {
	    return _.uniq(flatten(arguments, true, true, []));
	  };
	
	  // Produce an array that contains every item shared between all the
	  // passed-in arrays.
	  _.intersection = function(array) {
	    if (array == null) return [];
	    var result = [];
	    var argsLength = arguments.length;
	    for (var i = 0, length = array.length; i < length; i++) {
	      var item = array[i];
	      if (_.contains(result, item)) continue;
	      for (var j = 1; j < argsLength; j++) {
	        if (!_.contains(arguments[j], item)) break;
	      }
	      if (j === argsLength) result.push(item);
	    }
	    return result;
	  };
	
	  // Take the difference between one array and a number of other arrays.
	  // Only the elements present in just the first array will remain.
	  _.difference = function(array) {
	    var rest = flatten(slice.call(arguments, 1), true, true, []);
	    return _.filter(array, function(value){
	      return !_.contains(rest, value);
	    });
	  };
	
	  // Zip together multiple lists into a single array -- elements that share
	  // an index go together.
	  _.zip = function(array) {
	    if (array == null) return [];
	    var length = _.max(arguments, 'length').length;
	    var results = Array(length);
	    for (var i = 0; i < length; i++) {
	      results[i] = _.pluck(arguments, i);
	    }
	    return results;
	  };
	
	  // Converts lists into objects. Pass either a single array of `[key, value]`
	  // pairs, or two parallel arrays of the same length -- one of keys, and one of
	  // the corresponding values.
	  _.object = function(list, values) {
	    if (list == null) return {};
	    var result = {};
	    for (var i = 0, length = list.length; i < length; i++) {
	      if (values) {
	        result[list[i]] = values[i];
	      } else {
	        result[list[i][0]] = list[i][1];
	      }
	    }
	    return result;
	  };
	
	  // Return the position of the first occurrence of an item in an array,
	  // or -1 if the item is not included in the array.
	  // If the array is large and already in sort order, pass `true`
	  // for **isSorted** to use binary search.
	  _.indexOf = function(array, item, isSorted) {
	    if (array == null) return -1;
	    var i = 0, length = array.length;
	    if (isSorted) {
	      if (typeof isSorted == 'number') {
	        i = isSorted < 0 ? Math.max(0, length + isSorted) : isSorted;
	      } else {
	        i = _.sortedIndex(array, item);
	        return array[i] === item ? i : -1;
	      }
	    }
	    for (; i < length; i++) if (array[i] === item) return i;
	    return -1;
	  };
	
	  _.lastIndexOf = function(array, item, from) {
	    if (array == null) return -1;
	    var idx = array.length;
	    if (typeof from == 'number') {
	      idx = from < 0 ? idx + from + 1 : Math.min(idx, from + 1);
	    }
	    while (--idx >= 0) if (array[idx] === item) return idx;
	    return -1;
	  };
	
	  // Generate an integer Array containing an arithmetic progression. A port of
	  // the native Python `range()` function. See
	  // [the Python documentation](http://docs.python.org/library/functions.html#range).
	  _.range = function(start, stop, step) {
	    if (arguments.length <= 1) {
	      stop = start || 0;
	      start = 0;
	    }
	    step = step || 1;
	
	    var length = Math.max(Math.ceil((stop - start) / step), 0);
	    var range = Array(length);
	
	    for (var idx = 0; idx < length; idx++, start += step) {
	      range[idx] = start;
	    }
	
	    return range;
	  };
	
	  // Function (ahem) Functions
	  // ------------------
	
	  // Reusable constructor function for prototype setting.
	  var Ctor = function(){};
	
	  // Create a function bound to a given object (assigning `this`, and arguments,
	  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	  // available.
	  _.bind = function(func, context) {
	    var args, bound;
	    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
	    args = slice.call(arguments, 2);
	    bound = function() {
	      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
	      Ctor.prototype = func.prototype;
	      var self = new Ctor;
	      Ctor.prototype = null;
	      var result = func.apply(self, args.concat(slice.call(arguments)));
	      if (_.isObject(result)) return result;
	      return self;
	    };
	    return bound;
	  };
	
	  // Partially apply a function by creating a version that has had some of its
	  // arguments pre-filled, without changing its dynamic `this` context. _ acts
	  // as a placeholder, allowing any combination of arguments to be pre-filled.
	  _.partial = function(func) {
	    var boundArgs = slice.call(arguments, 1);
	    return function() {
	      var position = 0;
	      var args = boundArgs.slice();
	      for (var i = 0, length = args.length; i < length; i++) {
	        if (args[i] === _) args[i] = arguments[position++];
	      }
	      while (position < arguments.length) args.push(arguments[position++]);
	      return func.apply(this, args);
	    };
	  };
	
	  // Bind a number of an object's methods to that object. Remaining arguments
	  // are the method names to be bound. Useful for ensuring that all callbacks
	  // defined on an object belong to it.
	  _.bindAll = function(obj) {
	    var i, length = arguments.length, key;
	    if (length <= 1) throw new Error('bindAll must be passed function names');
	    for (i = 1; i < length; i++) {
	      key = arguments[i];
	      obj[key] = _.bind(obj[key], obj);
	    }
	    return obj;
	  };
	
	  // Memoize an expensive function by storing its results.
	  _.memoize = function(func, hasher) {
	    var memoize = function(key) {
	      var cache = memoize.cache;
	      var address = hasher ? hasher.apply(this, arguments) : key;
	      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
	      return cache[address];
	    };
	    memoize.cache = {};
	    return memoize;
	  };
	
	  // Delays a function for the given number of milliseconds, and then calls
	  // it with the arguments supplied.
	  _.delay = function(func, wait) {
	    var args = slice.call(arguments, 2);
	    return setTimeout(function(){
	      return func.apply(null, args);
	    }, wait);
	  };
	
	  // Defers a function, scheduling it to run after the current call stack has
	  // cleared.
	  _.defer = function(func) {
	    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
	  };
	
	  // Returns a function, that, when invoked, will only be triggered at most once
	  // during a given window of time. Normally, the throttled function will run
	  // as much as it can, without ever going more than once per `wait` duration;
	  // but if you'd like to disable the execution on the leading edge, pass
	  // `{leading: false}`. To disable execution on the trailing edge, ditto.
	  _.throttle = function(func, wait, options) {
	    var context, args, result;
	    var timeout = null;
	    var previous = 0;
	    if (!options) options = {};
	    var later = function() {
	      previous = options.leading === false ? 0 : _.now();
	      timeout = null;
	      result = func.apply(context, args);
	      if (!timeout) context = args = null;
	    };
	    return function() {
	      var now = _.now();
	      if (!previous && options.leading === false) previous = now;
	      var remaining = wait - (now - previous);
	      context = this;
	      args = arguments;
	      if (remaining <= 0 || remaining > wait) {
	        clearTimeout(timeout);
	        timeout = null;
	        previous = now;
	        result = func.apply(context, args);
	        if (!timeout) context = args = null;
	      } else if (!timeout && options.trailing !== false) {
	        timeout = setTimeout(later, remaining);
	      }
	      return result;
	    };
	  };
	
	  // Returns a function, that, as long as it continues to be invoked, will not
	  // be triggered. The function will be called after it stops being called for
	  // N milliseconds. If `immediate` is passed, trigger the function on the
	  // leading edge, instead of the trailing.
	  _.debounce = function(func, wait, immediate) {
	    var timeout, args, context, timestamp, result;
	
	    var later = function() {
	      var last = _.now() - timestamp;
	
	      if (last < wait && last > 0) {
	        timeout = setTimeout(later, wait - last);
	      } else {
	        timeout = null;
	        if (!immediate) {
	          result = func.apply(context, args);
	          if (!timeout) context = args = null;
	        }
	      }
	    };
	
	    return function() {
	      context = this;
	      args = arguments;
	      timestamp = _.now();
	      var callNow = immediate && !timeout;
	      if (!timeout) timeout = setTimeout(later, wait);
	      if (callNow) {
	        result = func.apply(context, args);
	        context = args = null;
	      }
	
	      return result;
	    };
	  };
	
	  // Returns the first function passed as an argument to the second,
	  // allowing you to adjust arguments, run code before and after, and
	  // conditionally execute the original function.
	  _.wrap = function(func, wrapper) {
	    return _.partial(wrapper, func);
	  };
	
	  // Returns a negated version of the passed-in predicate.
	  _.negate = function(predicate) {
	    return function() {
	      return !predicate.apply(this, arguments);
	    };
	  };
	
	  // Returns a function that is the composition of a list of functions, each
	  // consuming the return value of the function that follows.
	  _.compose = function() {
	    var args = arguments;
	    var start = args.length - 1;
	    return function() {
	      var i = start;
	      var result = args[start].apply(this, arguments);
	      while (i--) result = args[i].call(this, result);
	      return result;
	    };
	  };
	
	  // Returns a function that will only be executed after being called N times.
	  _.after = function(times, func) {
	    return function() {
	      if (--times < 1) {
	        return func.apply(this, arguments);
	      }
	    };
	  };
	
	  // Returns a function that will only be executed before being called N times.
	  _.before = function(times, func) {
	    var memo;
	    return function() {
	      if (--times > 0) {
	        memo = func.apply(this, arguments);
	      } else {
	        func = null;
	      }
	      return memo;
	    };
	  };
	
	  // Returns a function that will be executed at most one time, no matter how
	  // often you call it. Useful for lazy initialization.
	  _.once = _.partial(_.before, 2);
	
	  // Object Functions
	  // ----------------
	
	  // Retrieve the names of an object's properties.
	  // Delegates to **ECMAScript 5**'s native `Object.keys`
	  _.keys = function(obj) {
	    if (!_.isObject(obj)) return [];
	    if (nativeKeys) return nativeKeys(obj);
	    var keys = [];
	    for (var key in obj) if (_.has(obj, key)) keys.push(key);
	    return keys;
	  };
	
	  // Retrieve the values of an object's properties.
	  _.values = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var values = Array(length);
	    for (var i = 0; i < length; i++) {
	      values[i] = obj[keys[i]];
	    }
	    return values;
	  };
	
	  // Convert an object into a list of `[key, value]` pairs.
	  _.pairs = function(obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	      pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	  };
	
	  // Invert the keys and values of an object. The values must be serializable.
	  _.invert = function(obj) {
	    var result = {};
	    var keys = _.keys(obj);
	    for (var i = 0, length = keys.length; i < length; i++) {
	      result[obj[keys[i]]] = keys[i];
	    }
	    return result;
	  };
	
	  // Return a sorted list of the function names available on the object.
	  // Aliased as `methods`
	  _.functions = _.methods = function(obj) {
	    var names = [];
	    for (var key in obj) {
	      if (_.isFunction(obj[key])) names.push(key);
	    }
	    return names.sort();
	  };
	
	  // Extend a given object with all the properties in passed-in object(s).
	  _.extend = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    var source, prop;
	    for (var i = 1, length = arguments.length; i < length; i++) {
	      source = arguments[i];
	      for (prop in source) {
	        if (hasOwnProperty.call(source, prop)) {
	            obj[prop] = source[prop];
	        }
	      }
	    }
	    return obj;
	  };
	
	  // Return a copy of the object only containing the whitelisted properties.
	  _.pick = function(obj, iteratee, context) {
	    var result = {}, key;
	    if (obj == null) return result;
	    if (_.isFunction(iteratee)) {
	      iteratee = createCallback(iteratee, context);
	      for (key in obj) {
	        var value = obj[key];
	        if (iteratee(value, key, obj)) result[key] = value;
	      }
	    } else {
	      var keys = concat.apply([], slice.call(arguments, 1));
	      obj = new Object(obj);
	      for (var i = 0, length = keys.length; i < length; i++) {
	        key = keys[i];
	        if (key in obj) result[key] = obj[key];
	      }
	    }
	    return result;
	  };
	
	   // Return a copy of the object without the blacklisted properties.
	  _.omit = function(obj, iteratee, context) {
	    if (_.isFunction(iteratee)) {
	      iteratee = _.negate(iteratee);
	    } else {
	      var keys = _.map(concat.apply([], slice.call(arguments, 1)), String);
	      iteratee = function(value, key) {
	        return !_.contains(keys, key);
	      };
	    }
	    return _.pick(obj, iteratee, context);
	  };
	
	  // Fill in a given object with default properties.
	  _.defaults = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    for (var i = 1, length = arguments.length; i < length; i++) {
	      var source = arguments[i];
	      for (var prop in source) {
	        if (obj[prop] === void 0) obj[prop] = source[prop];
	      }
	    }
	    return obj;
	  };
	
	  // Create a (shallow-cloned) duplicate of an object.
	  _.clone = function(obj) {
	    if (!_.isObject(obj)) return obj;
	    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
	  };
	
	  // Invokes interceptor with the obj, and then returns obj.
	  // The primary purpose of this method is to "tap into" a method chain, in
	  // order to perform operations on intermediate results within the chain.
	  _.tap = function(obj, interceptor) {
	    interceptor(obj);
	    return obj;
	  };
	
	  // Internal recursive comparison function for `isEqual`.
	  var eq = function(a, b, aStack, bStack) {
	    // Identical objects are equal. `0 === -0`, but they aren't identical.
	    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
	    if (a === b) return a !== 0 || 1 / a === 1 / b;
	    // A strict comparison is necessary because `null == undefined`.
	    if (a == null || b == null) return a === b;
	    // Unwrap any wrapped objects.
	    if (a instanceof _) a = a._wrapped;
	    if (b instanceof _) b = b._wrapped;
	    // Compare `[[Class]]` names.
	    var className = toString.call(a);
	    if (className !== toString.call(b)) return false;
	    switch (className) {
	      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
	      case '[object RegExp]':
	      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
	      case '[object String]':
	        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
	        // equivalent to `new String("5")`.
	        return '' + a === '' + b;
	      case '[object Number]':
	        // `NaN`s are equivalent, but non-reflexive.
	        // Object(NaN) is equivalent to NaN
	        if (+a !== +a) return +b !== +b;
	        // An `egal` comparison is performed for other numeric values.
	        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
	      case '[object Date]':
	      case '[object Boolean]':
	        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
	        // millisecond representations. Note that invalid dates with millisecond representations
	        // of `NaN` are not equivalent.
	        return +a === +b;
	    }
	    if (typeof a != 'object' || typeof b != 'object') return false;
	    // Assume equality for cyclic structures. The algorithm for detecting cyclic
	    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
	    var length = aStack.length;
	    while (length--) {
	      // Linear search. Performance is inversely proportional to the number of
	      // unique nested structures.
	      if (aStack[length] === a) return bStack[length] === b;
	    }
	    // Objects with different constructors are not equivalent, but `Object`s
	    // from different frames are.
	    var aCtor = a.constructor, bCtor = b.constructor;
	    if (
	      aCtor !== bCtor &&
	      // Handle Object.create(x) cases
	      'constructor' in a && 'constructor' in b &&
	      !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
	        _.isFunction(bCtor) && bCtor instanceof bCtor)
	    ) {
	      return false;
	    }
	    // Add the first object to the stack of traversed objects.
	    aStack.push(a);
	    bStack.push(b);
	    var size, result;
	    // Recursively compare objects and arrays.
	    if (className === '[object Array]') {
	      // Compare array lengths to determine if a deep comparison is necessary.
	      size = a.length;
	      result = size === b.length;
	      if (result) {
	        // Deep compare the contents, ignoring non-numeric properties.
	        while (size--) {
	          if (!(result = eq(a[size], b[size], aStack, bStack))) break;
	        }
	      }
	    } else {
	      // Deep compare objects.
	      var keys = _.keys(a), key;
	      size = keys.length;
	      // Ensure that both objects contain the same number of properties before comparing deep equality.
	      result = _.keys(b).length === size;
	      if (result) {
	        while (size--) {
	          // Deep compare each member
	          key = keys[size];
	          if (!(result = _.has(b, key) && eq(a[key], b[key], aStack, bStack))) break;
	        }
	      }
	    }
	    // Remove the first object from the stack of traversed objects.
	    aStack.pop();
	    bStack.pop();
	    return result;
	  };
	
	  // Perform a deep comparison to check if two objects are equal.
	  _.isEqual = function(a, b) {
	    return eq(a, b, [], []);
	  };
	
	  // Is a given array, string, or object empty?
	  // An "empty" object has no enumerable own-properties.
	  _.isEmpty = function(obj) {
	    if (obj == null) return true;
	    if (_.isArray(obj) || _.isString(obj) || _.isArguments(obj)) return obj.length === 0;
	    for (var key in obj) if (_.has(obj, key)) return false;
	    return true;
	  };
	
	  // Is a given value a DOM element?
	  _.isElement = function(obj) {
	    return !!(obj && obj.nodeType === 1);
	  };
	
	  // Is a given value an array?
	  // Delegates to ECMA5's native Array.isArray
	  _.isArray = nativeIsArray || function(obj) {
	    return toString.call(obj) === '[object Array]';
	  };
	
	  // Is a given variable an object?
	  _.isObject = function(obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	  };
	
	  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp.
	  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp'], function(name) {
	    _['is' + name] = function(obj) {
	      return toString.call(obj) === '[object ' + name + ']';
	    };
	  });
	
	  // Define a fallback version of the method in browsers (ahem, IE), where
	  // there isn't any inspectable "Arguments" type.
	  if (!_.isArguments(arguments)) {
	    _.isArguments = function(obj) {
	      return _.has(obj, 'callee');
	    };
	  }
	
	  // Optimize `isFunction` if appropriate. Work around an IE 11 bug.
	  if (true) {
	    _.isFunction = function(obj) {
	      return typeof obj == 'function' || false;
	    };
	  }
	
	  // Is a given object a finite number?
	  _.isFinite = function(obj) {
	    return isFinite(obj) && !isNaN(parseFloat(obj));
	  };
	
	  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
	  _.isNaN = function(obj) {
	    return _.isNumber(obj) && obj !== +obj;
	  };
	
	  // Is a given value a boolean?
	  _.isBoolean = function(obj) {
	    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
	  };
	
	  // Is a given value equal to null?
	  _.isNull = function(obj) {
	    return obj === null;
	  };
	
	  // Is a given variable undefined?
	  _.isUndefined = function(obj) {
	    return obj === void 0;
	  };
	
	  // Shortcut function for checking if an object has a given property directly
	  // on itself (in other words, not on a prototype).
	  _.has = function(obj, key) {
	    return obj != null && hasOwnProperty.call(obj, key);
	  };
	
	  // Utility Functions
	  // -----------------
	
	  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
	  // previous owner. Returns a reference to the Underscore object.
	  _.noConflict = function() {
	    root._ = previousUnderscore;
	    return this;
	  };
	
	  // Keep the identity function around for default iteratees.
	  _.identity = function(value) {
	    return value;
	  };
	
	  _.constant = function(value) {
	    return function() {
	      return value;
	    };
	  };
	
	  _.noop = function(){};
	
	  _.property = function(key) {
	    return function(obj) {
	      return obj[key];
	    };
	  };
	
	  // Returns a predicate for checking whether an object has a given set of `key:value` pairs.
	  _.matches = function(attrs) {
	    var pairs = _.pairs(attrs), length = pairs.length;
	    return function(obj) {
	      if (obj == null) return !length;
	      obj = new Object(obj);
	      for (var i = 0; i < length; i++) {
	        var pair = pairs[i], key = pair[0];
	        if (pair[1] !== obj[key] || !(key in obj)) return false;
	      }
	      return true;
	    };
	  };
	
	  // Run a function **n** times.
	  _.times = function(n, iteratee, context) {
	    var accum = Array(Math.max(0, n));
	    iteratee = createCallback(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	  };
	
	  // Return a random integer between min and max (inclusive).
	  _.random = function(min, max) {
	    if (max == null) {
	      max = min;
	      min = 0;
	    }
	    return min + Math.floor(Math.random() * (max - min + 1));
	  };
	
	  // A (possibly faster) way to get the current timestamp as an integer.
	  _.now = Date.now || function() {
	    return new Date().getTime();
	  };
	
	   // List of HTML entities for escaping.
	  var escapeMap = {
	    '&': '&amp;',
	    '<': '&lt;',
	    '>': '&gt;',
	    '"': '&quot;',
	    "'": '&#x27;',
	    '`': '&#x60;'
	  };
	  var unescapeMap = _.invert(escapeMap);
	
	  // Functions for escaping and unescaping strings to/from HTML interpolation.
	  var createEscaper = function(map) {
	    var escaper = function(match) {
	      return map[match];
	    };
	    // Regexes for identifying a key that needs to be escaped
	    var source = '(?:' + _.keys(map).join('|') + ')';
	    var testRegexp = RegExp(source);
	    var replaceRegexp = RegExp(source, 'g');
	    return function(string) {
	      string = string == null ? '' : '' + string;
	      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
	    };
	  };
	  _.escape = createEscaper(escapeMap);
	  _.unescape = createEscaper(unescapeMap);
	
	  // If the value of the named `property` is a function then invoke it with the
	  // `object` as context; otherwise, return it.
	  _.result = function(object, property) {
	    if (object == null) return void 0;
	    var value = object[property];
	    return _.isFunction(value) ? object[property]() : value;
	  };
	
	  // Generate a unique integer id (unique within the entire client session).
	  // Useful for temporary DOM ids.
	  var idCounter = 0;
	  _.uniqueId = function(prefix) {
	    var id = ++idCounter + '';
	    return prefix ? prefix + id : id;
	  };
	
	  // By default, Underscore uses ERB-style template delimiters, change the
	  // following template settings to use alternative delimiters.
	  _.templateSettings = {
	    evaluate    : /<%([\s\S]+?)%>/g,
	    interpolate : /<%=([\s\S]+?)%>/g,
	    escape      : /<%-([\s\S]+?)%>/g
	  };
	
	  // When customizing `templateSettings`, if you don't want to define an
	  // interpolation, evaluation or escaping regex, we need one that is
	  // guaranteed not to match.
	  var noMatch = /(.)^/;
	
	  // Certain characters need to be escaped so that they can be put into a
	  // string literal.
	  var escapes = {
	    "'":      "'",
	    '\\':     '\\',
	    '\r':     'r',
	    '\n':     'n',
	    '\u2028': 'u2028',
	    '\u2029': 'u2029'
	  };
	
	  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;
	
	  var escapeChar = function(match) {
	    return '\\' + escapes[match];
	  };
	
	  // JavaScript micro-templating, similar to John Resig's implementation.
	  // Underscore templating handles arbitrary delimiters, preserves whitespace,
	  // and correctly escapes quotes within interpolated code.
	  // NB: `oldSettings` only exists for backwards compatibility.
	  _.template = function(text, settings, oldSettings) {
	    if (!settings && oldSettings) settings = oldSettings;
	    settings = _.defaults({}, settings, _.templateSettings);
	
	    // Combine delimiters into one regular expression via alternation.
	    var matcher = RegExp([
	      (settings.escape || noMatch).source,
	      (settings.interpolate || noMatch).source,
	      (settings.evaluate || noMatch).source
	    ].join('|') + '|$', 'g');
	
	    // Compile the template source, escaping string literals appropriately.
	    var index = 0;
	    var source = "__p+='";
	    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
	      source += text.slice(index, offset).replace(escaper, escapeChar);
	      index = offset + match.length;
	
	      if (escape) {
	        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
	      } else if (interpolate) {
	        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
	      } else if (evaluate) {
	        source += "';\n" + evaluate + "\n__p+='";
	      }
	
	      // Adobe VMs need the match returned to produce the correct offest.
	      return match;
	    });
	    source += "';\n";
	
	    // If a variable is not specified, place data values in local scope.
	    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';
	
	    source = "var __t,__p='',__j=Array.prototype.join," +
	      "print=function(){__p+=__j.call(arguments,'');};\n" +
	      source + 'return __p;\n';
	
	    try {
	      var render = new Function(settings.variable || 'obj', '_', source);
	    } catch (e) {
	      e.source = source;
	      throw e;
	    }
	
	    var template = function(data) {
	      return render.call(this, data, _);
	    };
	
	    // Provide the compiled source as a convenience for precompilation.
	    var argument = settings.variable || 'obj';
	    template.source = 'function(' + argument + '){\n' + source + '}';
	
	    return template;
	  };
	
	  // Add a "chain" function. Start chaining a wrapped Underscore object.
	  _.chain = function(obj) {
	    var instance = _(obj);
	    instance._chain = true;
	    return instance;
	  };
	
	  // OOP
	  // ---------------
	  // If Underscore is called as a function, it returns a wrapped object that
	  // can be used OO-style. This wrapper holds altered versions of all the
	  // underscore functions. Wrapped objects may be chained.
	
	  // Helper function to continue chaining intermediate results.
	  var result = function(obj) {
	    return this._chain ? _(obj).chain() : obj;
	  };
	
	  // Add your own custom functions to the Underscore object.
	  _.mixin = function(obj) {
	    _.each(_.functions(obj), function(name) {
	      var func = _[name] = obj[name];
	      _.prototype[name] = function() {
	        var args = [this._wrapped];
	        push.apply(args, arguments);
	        return result.call(this, func.apply(_, args));
	      };
	    });
	  };
	
	  // Add all of the Underscore functions to the wrapper object.
	  _.mixin(_);
	
	  // Add all mutator Array functions to the wrapper.
	  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      var obj = this._wrapped;
	      method.apply(obj, arguments);
	      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
	      return result.call(this, obj);
	    };
	  });
	
	  // Add all accessor Array functions to the wrapper.
	  _.each(['concat', 'join', 'slice'], function(name) {
	    var method = ArrayProto[name];
	    _.prototype[name] = function() {
	      return result.call(this, method.apply(this._wrapped, arguments));
	    };
	  });
	
	  // Extracts the result from a wrapped and chained object.
	  _.prototype.value = function() {
	    return this._wrapped;
	  };
	
	  // AMD registration happens at the end for compatibility with AMD loaders
	  // that may not enforce next-turn semantics on modules. Even though general
	  // practice for AMD registration is to be anonymous, underscore registers
	  // as a named module because, like jQuery, it is a base library that is
	  // popular enough to be bundled in a third party lib, but not be part of
	  // an AMD load request. Those cases could generate an error when an
	  // anonymous define() is called outside of a loader request.
	  if (true) {
	    !(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = function() {
	      return _;
	    }.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__), __WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	  }
	}.call(this));


/***/ },
/* 21 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(49),
	    CollectionRegistry = __webpack_require__(30).CollectionRegistry,
	    Collection = __webpack_require__(31),
	    cache = __webpack_require__(32),
	    Model = __webpack_require__(33),
	    error = __webpack_require__(34),
	    events = __webpack_require__(35),
	    RelationshipType = __webpack_require__(36),
	    ReactiveQuery = __webpack_require__(37),
	    ManyToManyProxy = __webpack_require__(38),
	    OneToOneProxy = __webpack_require__(39),
	    OneToManyProxy = __webpack_require__(40),
	    RelationshipProxy = __webpack_require__(41),
	    modelEvents = __webpack_require__(42),
	    Query = __webpack_require__(43),
	    querySet = __webpack_require__(44),
	    log = __webpack_require__(45),
	    _ = util._;
	
	
	// Initialise siesta object. Strange format facilities using submodules with requireJS (eventually)
	var siesta = function (ext) {
	    if (!siesta.ext) siesta.ext = {};
	    _.extend(siesta.ext, ext || {});
	    return siesta;
	};
	
	Object.defineProperty(siesta, 'q', {
	    get: function () {
	        return this._q || window.q || window.Q
	    },
	    set: function (q) {
	        this._q = q;
	    }
	});
	
	// Notifications
	_.extend(siesta, {
	    on: events.on.bind(events),
	    off: events.removeListener.bind(events),
	    once: events.once.bind(events),
	    removeAllListeners: events.removeAllListeners.bind(events)
	});
	_.extend(siesta, {
	    removeListener: siesta.off,
	    addListener: siesta.on
	});
	
	// Expose some stuff for usage by extensions and/or users
	_.extend(siesta, {
	    RelationshipType: RelationshipType,
	    ModelEventType: modelEvents.ModelEventType,
	    log: log.Level,
	    InsertionPolicy: ReactiveQuery.InsertionPolicy,
	    _internal: {
	        log: log,
	        Model: Model,
	        error: error,
	        ModelEventType: modelEvents.ModelEventType,
	        ModelInstance: __webpack_require__(46),
	        extend: __webpack_require__(70),
	        MappingOperation: __webpack_require__(47),
	        events: events,
	        ProxyEventEmitter: events.ProxyEventEmitter,
	        cache: __webpack_require__(32),
	        modelEvents: modelEvents,
	        CollectionRegistry: __webpack_require__(30).CollectionRegistry,
	        Collection: Collection,
	        utils: util,
	        util: util,
	        _: util._,
	        querySet: querySet,
	        observe: __webpack_require__(71),
	        Query: Query,
	        Store: __webpack_require__(48),
	        ManyToManyProxy: ManyToManyProxy,
	        OneToManyProxy: OneToManyProxy,
	        OneToOneProxy: OneToOneProxy,
	        RelationshipProxy: RelationshipProxy
	    },
	    _: util._,
	    async: util.async,
	    isArray: util.isArray,
	    isString: util.isString
	});
	
	siesta.ext = {};
	
	var installed = false,
	    installing = false;
	
	
	_.extend(siesta, {
	    /**
	     * Wipe everything. Used during test generally.
	     */
	    reset: function (cb) {
	        installed = false;
	        installing = false;
	        delete this.queuedTasks;
	        cache.reset();
	        CollectionRegistry.reset();
	        events.removeAllListeners();
	        if (siesta.ext.httpEnabled) {
	            siesta.ext.http.DescriptorRegistry.reset();
	        }
	        if (siesta.ext.storageEnabled) {
	            siesta.ext.storage._reset(cb);
	        }
	        else {
	            cb();
	        }
	    },
	    /**
	     * Removes all data. Used during tests generally.
	     * @param [cb]
	     */
	    resetData: function (cb) {
	        var deferred = util.defer(cb);
	        cb = deferred.finish.bind(deferred);
	        siesta.ext.storage._reset(function () {
	            var collectionNames = [],
	                tasks = CollectionRegistry.collectionNames.reduce(function (memo, collectionName) {
	                    var collection = CollectionRegistry[collectionName],
	                        models = collection._models;
	                    collectionNames.push(collectionName);
	                    Object.keys(models).forEach(function (k) {
	                        var model = models[k];
	                        memo.push(function (done) {
	                            model.all(function (err, res) {
	                                if (!err) res.remove();
	                                done(err);
	                            });
	                        });
	                    });
	                    return memo;
	                }, []);
	            util.async.series(
	                [
	                    _.partial(util.async.parallel, tasks)
	                ],
	                cb);
	        });
	        return deferred.promise;
	    },
	    /**
	     * Creates and registers a new Collection.
	     * @param  {String} name
	     * @param  {Object} [opts]
	     * @return {Collection}
	     */
	    collection: function (name, opts) {
	        return new Collection(name, opts);
	    },
	    /**
	     * Install all collections.
	     * @param {Function} [cb]
	     * @returns {q.Promise}
	     */
	    install: function (cb) {
	        if (!(installing || installed)) {
	            installing = true;
	            var deferred = util.defer(cb);
	            cb = deferred.finish.bind(deferred);
	
	            var collectionNames = CollectionRegistry.collectionNames,
	                collectionInstallTasks = _.map(collectionNames, function (n) {
	                    return function (done) {
	                        CollectionRegistry[n].install(done);
	                    }
	                });
	            if (siesta.ext.storageEnabled) {
	                collectionInstallTasks.unshift(siesta.ext.storage.ensureIndexesForAll);
	            }
	            var self = this;
	            siesta.async.series(collectionInstallTasks, function (err) {
	                if (err) {
	                    cb(err);
	                }
	                else {
	                    if (siesta.ext.httpEnabled) {
	                        var errors = [];
	
	                        function setupDescriptors(descriptors) {
	                            Object.keys(descriptors).forEach(function (collectionName) {
	                                var descriptorsForCollection = descriptors[collectionName];
	                                descriptorsForCollection.forEach(function (d) {
	                                    var error = d._resolveCollectionAndModel();
	                                    if (error) errors.push(error);
	                                });
	                            });
	                        }
	
	                        var descriptorRegistry = siesta.ext.http.DescriptorRegistry,
	                            requestDescriptors = descriptorRegistry.requestDescriptors,
	                            responseDescriptors = descriptorRegistry.responseDescriptors;
	                        setupDescriptors(requestDescriptors);
	                        setupDescriptors(responseDescriptors);
	                        if (errors.length) {
	                            cb(errors);
	                            return;
	                        }
	                    }
	                    if (siesta.ext.storageEnabled) {
	                        siesta.ext.storage._load(function (err) {
	                            if (!err) {
	                                installed = true;
	                                if (self.queuedTasks) self.queuedTasks.execute();
	                            }
	                            cb(err);
	                        });
	                    }
	                    else {
	                        installed = true;
	                        if (self.queuedTasks) self.queuedTasks.execute();
	                        cb();
	                    }
	
	                }
	            });
	
	            return deferred.promise;
	        }
	        else {
	            throw new error.InternalSiestaError('Already installing...');
	        }
	    },
	    _pushTask: function (task) {
	        if (!this.queuedTasks) {
	            this.queuedTasks = new function Queue() {
	                this.tasks = [];
	                this.execute = function () {
	                    this.tasks.forEach(function (f) {
	                        f()
	                    });
	                    this.tasks = [];
	                }.bind(this);
	            };
	        }
	        this.queuedTasks.tasks.push(task);
	    },
	    _afterInstall: function (task) {
	        if (!installed) {
	            if (!installing) {
	                this.install(function (err) {
	                    if (err) console.error('Error setting up siesta', err);
	                    delete this.queuedTasks;
	                }.bind(this));
	            }
	            // In case installed straight away e.g. if storage extension not installed.
	            if (!installed) this._pushTask(task);
	            else task();
	        }
	        else {
	            task();
	        }
	    },
	    setLogLevel: function (loggerName, level) {
	        var Logger = log.loggerWithName(loggerName);
	        Logger.setLevel(level);
	    },
	    notify: util.next,
	    registerComparator: Query.registerComparator.bind(Query)
	});
	
	Object.defineProperties(siesta, {
	    _canChange: {
	        get: function () {
	            return !(installing || installed);
	        }
	    }
	});
	
	if (typeof window != 'undefined') {
	    window['siesta'] = siesta;
	}
	
	module.exports = siesta;
	
	/**
	 * TODO: This could be dangerous?
	 * Pretty damn useful to be able to access the bound object on a function tho.
	 * See: http://stackoverflow.com/questions/14307264/what-object-javascript-function-is-bound-to-what-is-its-this
	 */
	var _bind = Function.prototype.apply.bind(Function.prototype.bind);
	Object.defineProperty(Function.prototype, 'bind', {
	    value: function (obj) {
	        var boundFunction = _bind(this, arguments);
	        Object.defineProperty(boundFunction, '__siesta_bound_object', {
	            value: obj,
	            writable: true,
	            configurable: true,
	            enumerable: false
	        });
	        return boundFunction;
	    }
	});
	
	(function loadExtensions() {
	    __webpack_require__(50);
	    __webpack_require__(51);
	})();


/***/ },
/* 22 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * An extension for enabling performance monitoring of Siesta.
	 * Current features:
	 *  - Time mapping operations.
	 *  - Time maps.
	 */
	
	
	if (typeof siesta == 'undefined' && typeof module == 'undefined') {
	    throw new Error('Could not find window.siesta. Make sure you include siesta.core.js first.');
	}
	
	var util = siesta._internal.util;
	
	if (!siesta.ext) siesta.ext = {};
	
	// TODO: Place this in Siesta core and use it for all other extensions.
	function installExtension(name, ext) {
	    siesta.ext[name] = ext;
	    var publicProp = name + 'Enabled',
	        privateProp = '_' + publicProp;
	    Object.defineProperty(siesta.ext, publicProp, {
	        get: function () {
	            if (siesta.ext[privateProp] !== undefined) {
	                return siesta.ext[privateProp];
	            }
	            return !!siesta.ext[name];
	        },
	        set: function () {
	            siesta.ext[privateProp] = v;
	        }
	    })
	}
	
	
	var performance = {};
	installExtension('performance', performance);
	
	function timeMaps() {
	    var Model = siesta._internal.Model,
	        oldGraph = Model.prototype.graph;
	    Model.prototype.graph = function (data, opts, callback) {
	        var start = (new Date).getTime(),
	            numDatums = util.isArray(data) ? data.length : 1,
	            deferred = util.defer(callback);
	        oldGraph.call(this, data, opts, function (err, res) {
	            var end = (new Date).getTime(),
	                timeTaken = end - start;
	            console.info('[Performance: model.prototype.map] It took ' + timeTaken + 'ms to map ' + numDatums + ' datums to "' + this.name + '"');
	            deferred.finish(err, res);
	        }.bind(this));
	        return deferred.promise;
	    };
	}
	
	function timeQueries() {
	    var Model = siesta._internal.Model,
	        oldQuery = Model.prototype.query;
	    Model.prototype.query = function (query, callback) {
	        var deferred = util.defer(callback);
	        callback = deferred.finish.bind(deferred);
	        var start = (new Date).getTime();
	        oldQuery.call(this, query, function (err, res) {
	            var end = (new Date).getTime(),
	                timeTaken = end - start;
	            console.info('[Performance: Model.prototype.query] It took ' + timeTaken + 'ms to query');
	            callback(err, res);
	        });
	
	        return deferred.promise;
	    };
	}
	
	function timeStorage() {
	    var oldLoad = siesta.ext.storage._load;
	    siesta.ext.storage._load = function (callback) {
	        var deferred = util.defer(callback);
	        callback = deferred.finish.bind(deferred);
	        var start = (new Date).getTime();
	        oldLoad(function (err, n) {
	            if (!err) {
	                var end = (new Date).getTime(),
	                    timeTaken = end - start;
	                console.info('[Performance: Storage._load] It took ' + timeTaken + 'ms to load ' + n.toString() + ' instances from storage.');
	            }
	            else {
	                console.error('Error loading when measuring performance of storage', err);
	            }
	            callback(err);
	        });
	        return deferred.promise;
	    };
	    var oldLoadModel = siesta.ext.storage._loadModel;
	    siesta.ext.storage._loadModel = function (opts, callback) {
	        var deferred = util.defer(callback);
	        callback = deferred.finish.bind(deferred);
	        var start = (new Date).getTime();
	        oldLoadModel(opts, function (err, instances) {
	            var collectionName = opts.collectionName,
	                modelName = opts.modelName,
	                fullyQualifiedName = collectionName + '.' + modelName,
	                end = (new Date).getTime(),
	                timeTaken = end - start;
	            if (!err) {
	                console.info('[Performance: Storage._loadModel] It took ' + timeTaken + 'ms to load ' + instances.length.toString() + ' instances of "' + fullyQualifiedName + '"');
	            }
	            else {
	                console.error('Error loading when measuring performance of storage', err);
	            }
	            callback(err, instances);
	        });
	        return deferred.promise;
	    };
	}
	//timeMaps();
	//timeQueries();
	timeStorage();
	module.exports = performance;

/***/ },
/* 23 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = {
	
	  /**
	   * ### config.includeStack
	   *
	   * User configurable property, influences whether stack trace
	   * is included in Assertion error message. Default of false
	   * suppresses stack trace in the error message.
	   *
	   *     chai.config.includeStack = true;  // enable stack on error
	   *
	   * @param {Boolean}
	   * @api public
	   */
	
	   includeStack: false,
	
	  /**
	   * ### config.showDiff
	   *
	   * User configurable property, influences whether or not
	   * the `showDiff` flag should be included in the thrown
	   * AssertionErrors. `false` will always be `false`; `true`
	   * will be true when the assertion has requested a diff
	   * be shown.
	   *
	   * @param {Boolean}
	   * @api public
	   */
	
	  showDiff: true,
	
	  /**
	   * ### config.truncateThreshold
	   *
	   * User configurable property, sets length threshold for actual and
	   * expected values in assertion errors. If this threshold is exceeded,
	   * the value is truncated.
	   *
	   * Set it to zero if you want to disable truncating altogether.
	   *
	   *     chai.config.truncateThreshold = 0;  // disable truncating
	   *
	   * @param {Number}
	   * @api public
	   */
	
	  truncateThreshold: 40
	
	};


/***/ },
/* 24 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * chai
	 * http://chaijs.com
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	var config = __webpack_require__(23);
	var NOOP = function() { };
	
	module.exports = function (_chai, util) {
	  /*!
	   * Module dependencies.
	   */
	
	  var AssertionError = _chai.AssertionError
	    , flag = util.flag;
	
	  /*!
	   * Module export.
	   */
	
	  _chai.Assertion = Assertion;
	
	  /*!
	   * Assertion Constructor
	   *
	   * Creates object for chaining.
	   *
	   * @api private
	   */
	
	  function Assertion (obj, msg, stack) {
	    flag(this, 'ssfi', stack || arguments.callee);
	    flag(this, 'object', obj);
	    flag(this, 'message', msg);
	  }
	
	  Object.defineProperty(Assertion, 'includeStack', {
	    get: function() {
	      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
	      return config.includeStack;
	    },
	    set: function(value) {
	      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
	      config.includeStack = value;
	    }
	  });
	
	  Object.defineProperty(Assertion, 'showDiff', {
	    get: function() {
	      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
	      return config.showDiff;
	    },
	    set: function(value) {
	      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
	      config.showDiff = value;
	    }
	  });
	
	  Assertion.addProperty = function (name, fn) {
	    util.addProperty(this.prototype, name, fn);
	  };
	
	  Assertion.addMethod = function (name, fn) {
	    util.addMethod(this.prototype, name, fn);
	  };
	
	  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {
	    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);
	  };
	
	  Assertion.addChainableNoop = function(name, fn) {
	    util.addChainableMethod(this.prototype, name, NOOP, fn);
	  };
	
	  Assertion.overwriteProperty = function (name, fn) {
	    util.overwriteProperty(this.prototype, name, fn);
	  };
	
	  Assertion.overwriteMethod = function (name, fn) {
	    util.overwriteMethod(this.prototype, name, fn);
	  };
	
	  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {
	    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);
	  };
	
	  /*!
	   * ### .assert(expression, message, negateMessage, expected, actual)
	   *
	   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.
	   *
	   * @name assert
	   * @param {Philosophical} expression to be tested
	   * @param {String or Function} message or function that returns message to display if fails
	   * @param {String or Function} negatedMessage or function that returns negatedMessage to display if negated expression fails
	   * @param {Mixed} expected value (remember to check for negation)
	   * @param {Mixed} actual (optional) will default to `this.obj`
	   * @api private
	   */
	
	  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {
	    var ok = util.test(this, arguments);
	    if (true !== showDiff) showDiff = false;
	    if (true !== config.showDiff) showDiff = false;
	
	    if (!ok) {
	      var msg = util.getMessage(this, arguments)
	        , actual = util.getActual(this, arguments);
	      throw new AssertionError(msg, {
	          actual: actual
	        , expected: expected
	        , showDiff: showDiff
	      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));
	    }
	  };
	
	  /*!
	   * ### ._obj
	   *
	   * Quick reference to stored `actual` value for plugin developers.
	   *
	   * @api private
	   */
	
	  Object.defineProperty(Assertion.prototype, '_obj',
	    { get: function () {
	        return flag(this, 'object');
	      }
	    , set: function (val) {
	        flag(this, 'object', val);
	      }
	  });
	};


/***/ },
/* 25 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * chai
	 * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	/*!
	 * Main exports
	 */
	
	var exports = module.exports = {};
	
	/*!
	 * test utility
	 */
	
	exports.test = __webpack_require__(53);
	
	/*!
	 * type utility
	 */
	
	exports.type = __webpack_require__(54);
	
	/*!
	 * message utility
	 */
	
	exports.getMessage = __webpack_require__(55);
	
	/*!
	 * actual utility
	 */
	
	exports.getActual = __webpack_require__(56);
	
	/*!
	 * Inspect util
	 */
	
	exports.inspect = __webpack_require__(57);
	
	/*!
	 * Object Display util
	 */
	
	exports.objDisplay = __webpack_require__(58);
	
	/*!
	 * Flag utility
	 */
	
	exports.flag = __webpack_require__(59);
	
	/*!
	 * Flag transferring utility
	 */
	
	exports.transferFlags = __webpack_require__(60);
	
	/*!
	 * Deep equal utility
	 */
	
	exports.eql = __webpack_require__(81);
	
	/*!
	 * Deep path value
	 */
	
	exports.getPathValue = __webpack_require__(61);
	
	/*!
	 * Function name
	 */
	
	exports.getName = __webpack_require__(62);
	
	/*!
	 * add Property
	 */
	
	exports.addProperty = __webpack_require__(63);
	
	/*!
	 * add Method
	 */
	
	exports.addMethod = __webpack_require__(64);
	
	/*!
	 * overwrite Property
	 */
	
	exports.overwriteProperty = __webpack_require__(65);
	
	/*!
	 * overwrite Method
	 */
	
	exports.overwriteMethod = __webpack_require__(66);
	
	/*!
	 * Add a chainable method
	 */
	
	exports.addChainableMethod = __webpack_require__(67);
	
	/*!
	 * Overwrite chainable method
	 */
	
	exports.overwriteChainableMethod = __webpack_require__(68);
	


/***/ },
/* 26 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * chai
	 * http://chaijs.com
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	module.exports = function (chai, _) {
	  var Assertion = chai.Assertion
	    , toString = Object.prototype.toString
	    , flag = _.flag;
	
	  /**
	   * ### Language Chains
	   *
	   * The following are provided as chainable getters to
	   * improve the readability of your assertions. They
	   * do not provide testing capabilities unless they
	   * have been overwritten by a plugin.
	   *
	   * **Chains**
	   *
	   * - to
	   * - be
	   * - been
	   * - is
	   * - that
	   * - and
	   * - has
	   * - have
	   * - with
	   * - at
	   * - of
	   * - same
	   *
	   * @name language chains
	   * @api public
	   */
	
	  [ 'to', 'be', 'been'
	  , 'is', 'and', 'has', 'have'
	  , 'with', 'that', 'at'
	  , 'of', 'same' ].forEach(function (chain) {
	    Assertion.addProperty(chain, function () {
	      return this;
	    });
	  });
	
	  /**
	   * ### .not
	   *
	   * Negates any of assertions following in the chain.
	   *
	   *     expect(foo).to.not.equal('bar');
	   *     expect(goodFn).to.not.throw(Error);
	   *     expect({ foo: 'baz' }).to.have.property('foo')
	   *       .and.not.equal('bar');
	   *
	   * @name not
	   * @api public
	   */
	
	  Assertion.addProperty('not', function () {
	    flag(this, 'negate', true);
	  });
	
	  /**
	   * ### .deep
	   *
	   * Sets the `deep` flag, later used by the `equal` and
	   * `property` assertions.
	   *
	   *     expect(foo).to.deep.equal({ bar: 'baz' });
	   *     expect({ foo: { bar: { baz: 'quux' } } })
	   *       .to.have.deep.property('foo.bar.baz', 'quux');
	   *
	   * @name deep
	   * @api public
	   */
	
	  Assertion.addProperty('deep', function () {
	    flag(this, 'deep', true);
	  });
	
	  /**
	   * ### .a(type)
	   *
	   * The `a` and `an` assertions are aliases that can be
	   * used either as language chains or to assert a value's
	   * type.
	   *
	   *     // typeof
	   *     expect('test').to.be.a('string');
	   *     expect({ foo: 'bar' }).to.be.an('object');
	   *     expect(null).to.be.a('null');
	   *     expect(undefined).to.be.an('undefined');
	   *
	   *     // language chain
	   *     expect(foo).to.be.an.instanceof(Foo);
	   *
	   * @name a
	   * @alias an
	   * @param {String} type
	   * @param {String} message _optional_
	   * @api public
	   */
	
	  function an (type, msg) {
	    if (msg) flag(this, 'message', msg);
	    type = type.toLowerCase();
	    var obj = flag(this, 'object')
	      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';
	
	    this.assert(
	        type === _.type(obj)
	      , 'expected #{this} to be ' + article + type
	      , 'expected #{this} not to be ' + article + type
	    );
	  }
	
	  Assertion.addChainableMethod('an', an);
	  Assertion.addChainableMethod('a', an);
	
	  /**
	   * ### .include(value)
	   *
	   * The `include` and `contain` assertions can be used as either property
	   * based language chains or as methods to assert the inclusion of an object
	   * in an array or a substring in a string. When used as language chains,
	   * they toggle the `contain` flag for the `keys` assertion.
	   *
	   *     expect([1,2,3]).to.include(2);
	   *     expect('foobar').to.contain('foo');
	   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');
	   *
	   * @name include
	   * @alias contain
	   * @param {Object|String|Number} obj
	   * @param {String} message _optional_
	   * @api public
	   */
	
	  function includeChainingBehavior () {
	    flag(this, 'contains', true);
	  }
	
	  function include (val, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    var expected = false;
	    if (_.type(obj) === 'array' && _.type(val) === 'object') {
	      for (var i in obj) {
	        if (_.eql(obj[i], val)) {
	          expected = true;
	          break;
	        }
	      }
	    } else if (_.type(val) === 'object') {
	      if (!flag(this, 'negate')) {
	        for (var k in val) new Assertion(obj).property(k, val[k]);
	        return;
	      }
	      var subset = {}
	      for (var k in val) subset[k] = obj[k]
	      expected = _.eql(subset, val);
	    } else {
	      expected = obj && ~obj.indexOf(val)
	    }
	    this.assert(
	        expected
	      , 'expected #{this} to include ' + _.inspect(val)
	      , 'expected #{this} to not include ' + _.inspect(val));
	  }
	
	  Assertion.addChainableMethod('include', include, includeChainingBehavior);
	  Assertion.addChainableMethod('contain', include, includeChainingBehavior);
	
	  /**
	   * ### .ok
	   *
	   * Asserts that the target is truthy.
	   *
	   *     expect('everthing').to.be.ok;
	   *     expect(1).to.be.ok;
	   *     expect(false).to.not.be.ok;
	   *     expect(undefined).to.not.be.ok;
	   *     expect(null).to.not.be.ok;
	   *
	   * Can also be used as a function, which prevents some linter errors.
	   *
	   *     expect('everthing').to.be.ok();
	   *     
	   * @name ok
	   * @api public
	   */
	
	  Assertion.addChainableNoop('ok', function () {
	    this.assert(
	        flag(this, 'object')
	      , 'expected #{this} to be truthy'
	      , 'expected #{this} to be falsy');
	  });
	
	  /**
	   * ### .true
	   *
	   * Asserts that the target is `true`.
	   *
	   *     expect(true).to.be.true;
	   *     expect(1).to.not.be.true;
	   *
	   * Can also be used as a function, which prevents some linter errors.
	   *
	   *     expect(true).to.be.true();
	   *
	   * @name true
	   * @api public
	   */
	
	  Assertion.addChainableNoop('true', function () {
	    this.assert(
	        true === flag(this, 'object')
	      , 'expected #{this} to be true'
	      , 'expected #{this} to be false'
	      , this.negate ? false : true
	    );
	  });
	
	  /**
	   * ### .false
	   *
	   * Asserts that the target is `false`.
	   *
	   *     expect(false).to.be.false;
	   *     expect(0).to.not.be.false;
	   *
	   * Can also be used as a function, which prevents some linter errors.
	   *
	   *     expect(false).to.be.false();
	   *
	   * @name false
	   * @api public
	   */
	
	  Assertion.addChainableNoop('false', function () {
	    this.assert(
	        false === flag(this, 'object')
	      , 'expected #{this} to be false'
	      , 'expected #{this} to be true'
	      , this.negate ? true : false
	    );
	  });
	
	  /**
	   * ### .null
	   *
	   * Asserts that the target is `null`.
	   *
	   *     expect(null).to.be.null;
	   *     expect(undefined).not.to.be.null;
	   *
	   * Can also be used as a function, which prevents some linter errors.
	   *
	   *     expect(null).to.be.null();
	   *
	   * @name null
	   * @api public
	   */
	
	  Assertion.addChainableNoop('null', function () {
	    this.assert(
	        null === flag(this, 'object')
	      , 'expected #{this} to be null'
	      , 'expected #{this} not to be null'
	    );
	  });
	
	  /**
	   * ### .undefined
	   *
	   * Asserts that the target is `undefined`.
	   *
	   *     expect(undefined).to.be.undefined;
	   *     expect(null).to.not.be.undefined;
	   *
	   * Can also be used as a function, which prevents some linter errors.
	   *
	   *     expect(undefined).to.be.undefined();
	   *
	   * @name undefined
	   * @api public
	   */
	
	  Assertion.addChainableNoop('undefined', function () {
	    this.assert(
	        undefined === flag(this, 'object')
	      , 'expected #{this} to be undefined'
	      , 'expected #{this} not to be undefined'
	    );
	  });
	
	  /**
	   * ### .exist
	   *
	   * Asserts that the target is neither `null` nor `undefined`.
	   *
	   *     var foo = 'hi'
	   *       , bar = null
	   *       , baz;
	   *
	   *     expect(foo).to.exist;
	   *     expect(bar).to.not.exist;
	   *     expect(baz).to.not.exist;
	   *
	   * Can also be used as a function, which prevents some linter errors.
	   *
	   *     expect(foo).to.exist();
	   *
	   * @name exist
	   * @api public
	   */
	
	  Assertion.addChainableNoop('exist', function () {
	    this.assert(
	        null != flag(this, 'object')
	      , 'expected #{this} to exist'
	      , 'expected #{this} to not exist'
	    );
	  });
	
	
	  /**
	   * ### .empty
	   *
	   * Asserts that the target's length is `0`. For arrays, it checks
	   * the `length` property. For objects, it gets the count of
	   * enumerable keys.
	   *
	   *     expect([]).to.be.empty;
	   *     expect('').to.be.empty;
	   *     expect({}).to.be.empty;
	   *
	   * Can also be used as a function, which prevents some linter errors.
	   *
	   *     expect([]).to.be.empty();
	   *
	   * @name empty
	   * @api public
	   */
	
	  Assertion.addChainableNoop('empty', function () {
	    var obj = flag(this, 'object')
	      , expected = obj;
	
	    if (Array.isArray(obj) || 'string' === typeof object) {
	      expected = obj.length;
	    } else if (typeof obj === 'object') {
	      expected = Object.keys(obj).length;
	    }
	
	    this.assert(
	        !expected
	      , 'expected #{this} to be empty'
	      , 'expected #{this} not to be empty'
	    );
	  });
	
	  /**
	   * ### .arguments
	   *
	   * Asserts that the target is an arguments object.
	   *
	   *     function test () {
	   *       expect(arguments).to.be.arguments;
	   *     }
	   *
	   * Can also be used as a function, which prevents some linter errors.
	   *
	   *     function test () {
	   *       expect(arguments).to.be.arguments();
	   *     }
	   *
	   * @name arguments
	   * @alias Arguments
	   * @api public
	   */
	
	  function checkArguments () {
	    var obj = flag(this, 'object')
	      , type = Object.prototype.toString.call(obj);
	    this.assert(
	        '[object Arguments]' === type
	      , 'expected #{this} to be arguments but got ' + type
	      , 'expected #{this} to not be arguments'
	    );
	  }
	
	  Assertion.addChainableNoop('arguments', checkArguments);
	  Assertion.addChainableNoop('Arguments', checkArguments);
	
	  /**
	   * ### .equal(value)
	   *
	   * Asserts that the target is strictly equal (`===`) to `value`.
	   * Alternately, if the `deep` flag is set, asserts that
	   * the target is deeply equal to `value`.
	   *
	   *     expect('hello').to.equal('hello');
	   *     expect(42).to.equal(42);
	   *     expect(1).to.not.equal(true);
	   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });
	   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });
	   *
	   * @name equal
	   * @alias equals
	   * @alias eq
	   * @alias deep.equal
	   * @param {Mixed} value
	   * @param {String} message _optional_
	   * @api public
	   */
	
	  function assertEqual (val, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    if (flag(this, 'deep')) {
	      return this.eql(val);
	    } else {
	      this.assert(
	          val === obj
	        , 'expected #{this} to equal #{exp}'
	        , 'expected #{this} to not equal #{exp}'
	        , val
	        , this._obj
	        , true
	      );
	    }
	  }
	
	  Assertion.addMethod('equal', assertEqual);
	  Assertion.addMethod('equals', assertEqual);
	  Assertion.addMethod('eq', assertEqual);
	
	  /**
	   * ### .eql(value)
	   *
	   * Asserts that the target is deeply equal to `value`.
	   *
	   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });
	   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);
	   *
	   * @name eql
	   * @alias eqls
	   * @param {Mixed} value
	   * @param {String} message _optional_
	   * @api public
	   */
	
	  function assertEql(obj, msg) {
	    if (msg) flag(this, 'message', msg);
	    this.assert(
	        _.eql(obj, flag(this, 'object'))
	      , 'expected #{this} to deeply equal #{exp}'
	      , 'expected #{this} to not deeply equal #{exp}'
	      , obj
	      , this._obj
	      , true
	    );
	  }
	
	  Assertion.addMethod('eql', assertEql);
	  Assertion.addMethod('eqls', assertEql);
	
	  /**
	   * ### .above(value)
	   *
	   * Asserts that the target is greater than `value`.
	   *
	   *     expect(10).to.be.above(5);
	   *
	   * Can also be used in conjunction with `length` to
	   * assert a minimum length. The benefit being a
	   * more informative error message than if the length
	   * was supplied directly.
	   *
	   *     expect('foo').to.have.length.above(2);
	   *     expect([ 1, 2, 3 ]).to.have.length.above(2);
	   *
	   * @name above
	   * @alias gt
	   * @alias greaterThan
	   * @param {Number} value
	   * @param {String} message _optional_
	   * @api public
	   */
	
	  function assertAbove (n, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    if (flag(this, 'doLength')) {
	      new Assertion(obj, msg).to.have.property('length');
	      var len = obj.length;
	      this.assert(
	          len > n
	        , 'expected #{this} to have a length above #{exp} but got #{act}'
	        , 'expected #{this} to not have a length above #{exp}'
	        , n
	        , len
	      );
	    } else {
	      this.assert(
	          obj > n
	        , 'expected #{this} to be above ' + n
	        , 'expected #{this} to be at most ' + n
	      );
	    }
	  }
	
	  Assertion.addMethod('above', assertAbove);
	  Assertion.addMethod('gt', assertAbove);
	  Assertion.addMethod('greaterThan', assertAbove);
	
	  /**
	   * ### .least(value)
	   *
	   * Asserts that the target is greater than or equal to `value`.
	   *
	   *     expect(10).to.be.at.least(10);
	   *
	   * Can also be used in conjunction with `length` to
	   * assert a minimum length. The benefit being a
	   * more informative error message than if the length
	   * was supplied directly.
	   *
	   *     expect('foo').to.have.length.of.at.least(2);
	   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);
	   *
	   * @name least
	   * @alias gte
	   * @param {Number} value
	   * @param {String} message _optional_
	   * @api public
	   */
	
	  function assertLeast (n, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    if (flag(this, 'doLength')) {
	      new Assertion(obj, msg).to.have.property('length');
	      var len = obj.length;
	      this.assert(
	          len >= n
	        , 'expected #{this} to have a length at least #{exp} but got #{act}'
	        , 'expected #{this} to have a length below #{exp}'
	        , n
	        , len
	      );
	    } else {
	      this.assert(
	          obj >= n
	        , 'expected #{this} to be at least ' + n
	        , 'expected #{this} to be below ' + n
	      );
	    }
	  }
	
	  Assertion.addMethod('least', assertLeast);
	  Assertion.addMethod('gte', assertLeast);
	
	  /**
	   * ### .below(value)
	   *
	   * Asserts that the target is less than `value`.
	   *
	   *     expect(5).to.be.below(10);
	   *
	   * Can also be used in conjunction with `length` to
	   * assert a maximum length. The benefit being a
	   * more informative error message than if the length
	   * was supplied directly.
	   *
	   *     expect('foo').to.have.length.below(4);
	   *     expect([ 1, 2, 3 ]).to.have.length.below(4);
	   *
	   * @name below
	   * @alias lt
	   * @alias lessThan
	   * @param {Number} value
	   * @param {String} message _optional_
	   * @api public
	   */
	
	  function assertBelow (n, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    if (flag(this, 'doLength')) {
	      new Assertion(obj, msg).to.have.property('length');
	      var len = obj.length;
	      this.assert(
	          len < n
	        , 'expected #{this} to have a length below #{exp} but got #{act}'
	        , 'expected #{this} to not have a length below #{exp}'
	        , n
	        , len
	      );
	    } else {
	      this.assert(
	          obj < n
	        , 'expected #{this} to be below ' + n
	        , 'expected #{this} to be at least ' + n
	      );
	    }
	  }
	
	  Assertion.addMethod('below', assertBelow);
	  Assertion.addMethod('lt', assertBelow);
	  Assertion.addMethod('lessThan', assertBelow);
	
	  /**
	   * ### .most(value)
	   *
	   * Asserts that the target is less than or equal to `value`.
	   *
	   *     expect(5).to.be.at.most(5);
	   *
	   * Can also be used in conjunction with `length` to
	   * assert a maximum length. The benefit being a
	   * more informative error message than if the length
	   * was supplied directly.
	   *
	   *     expect('foo').to.have.length.of.at.most(4);
	   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);
	   *
	   * @name most
	   * @alias lte
	   * @param {Number} value
	   * @param {String} message _optional_
	   * @api public
	   */
	
	  function assertMost (n, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    if (flag(this, 'doLength')) {
	      new Assertion(obj, msg).to.have.property('length');
	      var len = obj.length;
	      this.assert(
	          len <= n
	        , 'expected #{this} to have a length at most #{exp} but got #{act}'
	        , 'expected #{this} to have a length above #{exp}'
	        , n
	        , len
	      );
	    } else {
	      this.assert(
	          obj <= n
	        , 'expected #{this} to be at most ' + n
	        , 'expected #{this} to be above ' + n
	      );
	    }
	  }
	
	  Assertion.addMethod('most', assertMost);
	  Assertion.addMethod('lte', assertMost);
	
	  /**
	   * ### .within(start, finish)
	   *
	   * Asserts that the target is within a range.
	   *
	   *     expect(7).to.be.within(5,10);
	   *
	   * Can also be used in conjunction with `length` to
	   * assert a length range. The benefit being a
	   * more informative error message than if the length
	   * was supplied directly.
	   *
	   *     expect('foo').to.have.length.within(2,4);
	   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);
	   *
	   * @name within
	   * @param {Number} start lowerbound inclusive
	   * @param {Number} finish upperbound inclusive
	   * @param {String} message _optional_
	   * @api public
	   */
	
	  Assertion.addMethod('within', function (start, finish, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object')
	      , range = start + '..' + finish;
	    if (flag(this, 'doLength')) {
	      new Assertion(obj, msg).to.have.property('length');
	      var len = obj.length;
	      this.assert(
	          len >= start && len <= finish
	        , 'expected #{this} to have a length within ' + range
	        , 'expected #{this} to not have a length within ' + range
	      );
	    } else {
	      this.assert(
	          obj >= start && obj <= finish
	        , 'expected #{this} to be within ' + range
	        , 'expected #{this} to not be within ' + range
	      );
	    }
	  });
	
	  /**
	   * ### .instanceof(constructor)
	   *
	   * Asserts that the target is an instance of `constructor`.
	   *
	   *     var Tea = function (name) { this.name = name; }
	   *       , Chai = new Tea('chai');
	   *
	   *     expect(Chai).to.be.an.instanceof(Tea);
	   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);
	   *
	   * @name instanceof
	   * @param {Constructor} constructor
	   * @param {String} message _optional_
	   * @alias instanceOf
	   * @api public
	   */
	
	  function assertInstanceOf (constructor, msg) {
	    if (msg) flag(this, 'message', msg);
	    var name = _.getName(constructor);
	    this.assert(
	        flag(this, 'object') instanceof constructor
	      , 'expected #{this} to be an instance of ' + name
	      , 'expected #{this} to not be an instance of ' + name
	    );
	  };
	
	  Assertion.addMethod('instanceof', assertInstanceOf);
	  Assertion.addMethod('instanceOf', assertInstanceOf);
	
	  /**
	   * ### .property(name, [value])
	   *
	   * Asserts that the target has a property `name`, optionally asserting that
	   * the value of that property is strictly equal to  `value`.
	   * If the `deep` flag is set, you can use dot- and bracket-notation for deep
	   * references into objects and arrays.
	   *
	   *     // simple referencing
	   *     var obj = { foo: 'bar' };
	   *     expect(obj).to.have.property('foo');
	   *     expect(obj).to.have.property('foo', 'bar');
	   *
	   *     // deep referencing
	   *     var deepObj = {
	   *         green: { tea: 'matcha' }
	   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]
	   *     };
	
	   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');
	   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');
	   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');
	   *
	   * You can also use an array as the starting point of a `deep.property`
	   * assertion, or traverse nested arrays.
	   *
	   *     var arr = [
	   *         [ 'chai', 'matcha', 'konacha' ]
	   *       , [ { tea: 'chai' }
	   *         , { tea: 'matcha' }
	   *         , { tea: 'konacha' } ]
	   *     ];
	   *
	   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');
	   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');
	   *
	   * Furthermore, `property` changes the subject of the assertion
	   * to be the value of that property from the original object. This
	   * permits for further chainable assertions on that property.
	   *
	   *     expect(obj).to.have.property('foo')
	   *       .that.is.a('string');
	   *     expect(deepObj).to.have.property('green')
	   *       .that.is.an('object')
	   *       .that.deep.equals({ tea: 'matcha' });
	   *     expect(deepObj).to.have.property('teas')
	   *       .that.is.an('array')
	   *       .with.deep.property('[2]')
	   *         .that.deep.equals({ tea: 'konacha' });
	   *
	   * @name property
	   * @alias deep.property
	   * @param {String} name
	   * @param {Mixed} value (optional)
	   * @param {String} message _optional_
	   * @returns value of property for chaining
	   * @api public
	   */
	
	  Assertion.addMethod('property', function (name, val, msg) {
	    if (msg) flag(this, 'message', msg);
	
	    var descriptor = flag(this, 'deep') ? 'deep property ' : 'property '
	      , negate = flag(this, 'negate')
	      , obj = flag(this, 'object')
	      , value = flag(this, 'deep')
	        ? _.getPathValue(name, obj)
	        : obj[name];
	
	    if (negate && undefined !== val) {
	      if (undefined === value) {
	        msg = (msg != null) ? msg + ': ' : '';
	        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));
	      }
	    } else {
	      this.assert(
	          undefined !== value
	        , 'expected #{this} to have a ' + descriptor + _.inspect(name)
	        , 'expected #{this} to not have ' + descriptor + _.inspect(name));
	    }
	
	    if (undefined !== val) {
	      this.assert(
	          val === value
	        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'
	        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'
	        , val
	        , value
	      );
	    }
	
	    flag(this, 'object', value);
	  });
	
	
	  /**
	   * ### .ownProperty(name)
	   *
	   * Asserts that the target has an own property `name`.
	   *
	   *     expect('test').to.have.ownProperty('length');
	   *
	   * @name ownProperty
	   * @alias haveOwnProperty
	   * @param {String} name
	   * @param {String} message _optional_
	   * @api public
	   */
	
	  function assertOwnProperty (name, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    this.assert(
	        obj.hasOwnProperty(name)
	      , 'expected #{this} to have own property ' + _.inspect(name)
	      , 'expected #{this} to not have own property ' + _.inspect(name)
	    );
	  }
	
	  Assertion.addMethod('ownProperty', assertOwnProperty);
	  Assertion.addMethod('haveOwnProperty', assertOwnProperty);
	
	  /**
	   * ### .length(value)
	   *
	   * Asserts that the target's `length` property has
	   * the expected value.
	   *
	   *     expect([ 1, 2, 3]).to.have.length(3);
	   *     expect('foobar').to.have.length(6);
	   *
	   * Can also be used as a chain precursor to a value
	   * comparison for the length property.
	   *
	   *     expect('foo').to.have.length.above(2);
	   *     expect([ 1, 2, 3 ]).to.have.length.above(2);
	   *     expect('foo').to.have.length.below(4);
	   *     expect([ 1, 2, 3 ]).to.have.length.below(4);
	   *     expect('foo').to.have.length.within(2,4);
	   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);
	   *
	   * @name length
	   * @alias lengthOf
	   * @param {Number} length
	   * @param {String} message _optional_
	   * @api public
	   */
	
	  function assertLengthChain () {
	    flag(this, 'doLength', true);
	  }
	
	  function assertLength (n, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    new Assertion(obj, msg).to.have.property('length');
	    var len = obj.length;
	
	    this.assert(
	        len == n
	      , 'expected #{this} to have a length of #{exp} but got #{act}'
	      , 'expected #{this} to not have a length of #{act}'
	      , n
	      , len
	    );
	  }
	
	  Assertion.addChainableMethod('length', assertLength, assertLengthChain);
	  Assertion.addMethod('lengthOf', assertLength);
	
	  /**
	   * ### .match(regexp)
	   *
	   * Asserts that the target matches a regular expression.
	   *
	   *     expect('foobar').to.match(/^foo/);
	   *
	   * @name match
	   * @param {RegExp} RegularExpression
	   * @param {String} message _optional_
	   * @api public
	   */
	
	  Assertion.addMethod('match', function (re, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    this.assert(
	        re.exec(obj)
	      , 'expected #{this} to match ' + re
	      , 'expected #{this} not to match ' + re
	    );
	  });
	
	  /**
	   * ### .string(string)
	   *
	   * Asserts that the string target contains another string.
	   *
	   *     expect('foobar').to.have.string('bar');
	   *
	   * @name string
	   * @param {String} string
	   * @param {String} message _optional_
	   * @api public
	   */
	
	  Assertion.addMethod('string', function (str, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    new Assertion(obj, msg).is.a('string');
	
	    this.assert(
	        ~obj.indexOf(str)
	      , 'expected #{this} to contain ' + _.inspect(str)
	      , 'expected #{this} to not contain ' + _.inspect(str)
	    );
	  });
	
	
	  /**
	   * ### .keys(key1, [key2], [...])
	   *
	   * Asserts that the target has exactly the given keys, or
	   * asserts the inclusion of some keys when using the
	   * `include` or `contain` modifiers.
	   *
	   *     expect({ foo: 1, bar: 2 }).to.have.keys(['foo', 'bar']);
	   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.keys('foo', 'bar');
	   *
	   * @name keys
	   * @alias key
	   * @param {String...|Array} keys
	   * @api public
	   */
	
	  function assertKeys (keys) {
	    var obj = flag(this, 'object')
	      , str
	      , ok = true;
	
	    keys = keys instanceof Array
	      ? keys
	      : Array.prototype.slice.call(arguments);
	
	    if (!keys.length) throw new Error('keys required');
	
	    var actual = Object.keys(obj)
	      , expected = keys
	      , len = keys.length;
	
	    // Inclusion
	    ok = keys.every(function(key){
	      return ~actual.indexOf(key);
	    });
	
	    // Strict
	    if (!flag(this, 'negate') && !flag(this, 'contains')) {
	      ok = ok && keys.length == actual.length;
	    }
	
	    // Key string
	    if (len > 1) {
	      keys = keys.map(function(key){
	        return _.inspect(key);
	      });
	      var last = keys.pop();
	      str = keys.join(', ') + ', and ' + last;
	    } else {
	      str = _.inspect(keys[0]);
	    }
	
	    // Form
	    str = (len > 1 ? 'keys ' : 'key ') + str;
	
	    // Have / include
	    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;
	
	    // Assertion
	    this.assert(
	        ok
	      , 'expected #{this} to ' + str
	      , 'expected #{this} to not ' + str
	      , expected.sort()
	      , actual.sort()
	      , true
	    );
	  }
	
	  Assertion.addMethod('keys', assertKeys);
	  Assertion.addMethod('key', assertKeys);
	
	  /**
	   * ### .throw(constructor)
	   *
	   * Asserts that the function target will throw a specific error, or specific type of error
	   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test
	   * for the error's message.
	   *
	   *     var err = new ReferenceError('This is a bad function.');
	   *     var fn = function () { throw err; }
	   *     expect(fn).to.throw(ReferenceError);
	   *     expect(fn).to.throw(Error);
	   *     expect(fn).to.throw(/bad function/);
	   *     expect(fn).to.not.throw('good function');
	   *     expect(fn).to.throw(ReferenceError, /bad function/);
	   *     expect(fn).to.throw(err);
	   *     expect(fn).to.not.throw(new RangeError('Out of range.'));
	   *
	   * Please note that when a throw expectation is negated, it will check each
	   * parameter independently, starting with error constructor type. The appropriate way
	   * to check for the existence of a type of error but for a message that does not match
	   * is to use `and`.
	   *
	   *     expect(fn).to.throw(ReferenceError)
	   *        .and.not.throw(/good function/);
	   *
	   * @name throw
	   * @alias throws
	   * @alias Throw
	   * @param {ErrorConstructor} constructor
	   * @param {String|RegExp} expected error message
	   * @param {String} message _optional_
	   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
	   * @returns error for chaining (null if no error)
	   * @api public
	   */
	
	  function assertThrows (constructor, errMsg, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    new Assertion(obj, msg).is.a('function');
	
	    var thrown = false
	      , desiredError = null
	      , name = null
	      , thrownError = null;
	
	    if (arguments.length === 0) {
	      errMsg = null;
	      constructor = null;
	    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {
	      errMsg = constructor;
	      constructor = null;
	    } else if (constructor && constructor instanceof Error) {
	      desiredError = constructor;
	      constructor = null;
	      errMsg = null;
	    } else if (typeof constructor === 'function') {
	      name = constructor.prototype.name || constructor.name;
	      if (name === 'Error' && constructor !== Error) {
	        name = (new constructor()).name;
	      }
	    } else {
	      constructor = null;
	    }
	
	    try {
	      obj();
	    } catch (err) {
	      // first, check desired error
	      if (desiredError) {
	        this.assert(
	            err === desiredError
	          , 'expected #{this} to throw #{exp} but #{act} was thrown'
	          , 'expected #{this} to not throw #{exp}'
	          , (desiredError instanceof Error ? desiredError.toString() : desiredError)
	          , (err instanceof Error ? err.toString() : err)
	        );
	
	        flag(this, 'object', err);
	        return this;
	      }
	
	      // next, check constructor
	      if (constructor) {
	        this.assert(
	            err instanceof constructor
	          , 'expected #{this} to throw #{exp} but #{act} was thrown'
	          , 'expected #{this} to not throw #{exp} but #{act} was thrown'
	          , name
	          , (err instanceof Error ? err.toString() : err)
	        );
	
	        if (!errMsg) {
	          flag(this, 'object', err);
	          return this;
	        }
	      }
	
	      // next, check message
	      var message = 'object' === _.type(err) && "message" in err
	        ? err.message
	        : '' + err;
	
	      if ((message != null) && errMsg && errMsg instanceof RegExp) {
	        this.assert(
	            errMsg.exec(message)
	          , 'expected #{this} to throw error matching #{exp} but got #{act}'
	          , 'expected #{this} to throw error not matching #{exp}'
	          , errMsg
	          , message
	        );
	
	        flag(this, 'object', err);
	        return this;
	      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {
	        this.assert(
	            ~message.indexOf(errMsg)
	          , 'expected #{this} to throw error including #{exp} but got #{act}'
	          , 'expected #{this} to throw error not including #{act}'
	          , errMsg
	          , message
	        );
	
	        flag(this, 'object', err);
	        return this;
	      } else {
	        thrown = true;
	        thrownError = err;
	      }
	    }
	
	    var actuallyGot = ''
	      , expectedThrown = name !== null
	        ? name
	        : desiredError
	          ? '#{exp}' //_.inspect(desiredError)
	          : 'an error';
	
	    if (thrown) {
	      actuallyGot = ' but #{act} was thrown'
	    }
	
	    this.assert(
	        thrown === true
	      , 'expected #{this} to throw ' + expectedThrown + actuallyGot
	      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot
	      , (desiredError instanceof Error ? desiredError.toString() : desiredError)
	      , (thrownError instanceof Error ? thrownError.toString() : thrownError)
	    );
	
	    flag(this, 'object', thrownError);
	  };
	
	  Assertion.addMethod('throw', assertThrows);
	  Assertion.addMethod('throws', assertThrows);
	  Assertion.addMethod('Throw', assertThrows);
	
	  /**
	   * ### .respondTo(method)
	   *
	   * Asserts that the object or class target will respond to a method.
	   *
	   *     Klass.prototype.bar = function(){};
	   *     expect(Klass).to.respondTo('bar');
	   *     expect(obj).to.respondTo('bar');
	   *
	   * To check if a constructor will respond to a static function,
	   * set the `itself` flag.
	   *
	   *     Klass.baz = function(){};
	   *     expect(Klass).itself.to.respondTo('baz');
	   *
	   * @name respondTo
	   * @param {String} method
	   * @param {String} message _optional_
	   * @api public
	   */
	
	  Assertion.addMethod('respondTo', function (method, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object')
	      , itself = flag(this, 'itself')
	      , context = ('function' === _.type(obj) && !itself)
	        ? obj.prototype[method]
	        : obj[method];
	
	    this.assert(
	        'function' === typeof context
	      , 'expected #{this} to respond to ' + _.inspect(method)
	      , 'expected #{this} to not respond to ' + _.inspect(method)
	    );
	  });
	
	  /**
	   * ### .itself
	   *
	   * Sets the `itself` flag, later used by the `respondTo` assertion.
	   *
	   *     function Foo() {}
	   *     Foo.bar = function() {}
	   *     Foo.prototype.baz = function() {}
	   *
	   *     expect(Foo).itself.to.respondTo('bar');
	   *     expect(Foo).itself.not.to.respondTo('baz');
	   *
	   * @name itself
	   * @api public
	   */
	
	  Assertion.addProperty('itself', function () {
	    flag(this, 'itself', true);
	  });
	
	  /**
	   * ### .satisfy(method)
	   *
	   * Asserts that the target passes a given truth test.
	   *
	   *     expect(1).to.satisfy(function(num) { return num > 0; });
	   *
	   * @name satisfy
	   * @param {Function} matcher
	   * @param {String} message _optional_
	   * @api public
	   */
	
	  Assertion.addMethod('satisfy', function (matcher, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	    var result = matcher(obj);
	    this.assert(
	        result
	      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)
	      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)
	      , this.negate ? false : true
	      , result
	    );
	  });
	
	  /**
	   * ### .closeTo(expected, delta)
	   *
	   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
	   *
	   *     expect(1.5).to.be.closeTo(1, 0.5);
	   *
	   * @name closeTo
	   * @param {Number} expected
	   * @param {Number} delta
	   * @param {String} message _optional_
	   * @api public
	   */
	
	  Assertion.addMethod('closeTo', function (expected, delta, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	
	    new Assertion(obj, msg).is.a('number');
	    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {
	      throw new Error('the arguments to closeTo must be numbers');
	    }
	
	    this.assert(
	        Math.abs(obj - expected) <= delta
	      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta
	      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta
	    );
	  });
	
	  function isSubsetOf(subset, superset, cmp) {
	    return subset.every(function(elem) {
	      if (!cmp) return superset.indexOf(elem) !== -1;
	
	      return superset.some(function(elem2) {
	        return cmp(elem, elem2);
	      });
	    })
	  }
	
	  /**
	   * ### .members(set)
	   *
	   * Asserts that the target is a superset of `set`,
	   * or that the target and `set` have the same strictly-equal (===) members.
	   * Alternately, if the `deep` flag is set, set members are compared for deep
	   * equality.
	   *
	   *     expect([1, 2, 3]).to.include.members([3, 2]);
	   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);
	   *
	   *     expect([4, 2]).to.have.members([2, 4]);
	   *     expect([5, 2]).to.not.have.members([5, 2, 1]);
	   *
	   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);
	   *
	   * @name members
	   * @param {Array} set
	   * @param {String} message _optional_
	   * @api public
	   */
	
	  Assertion.addMethod('members', function (subset, msg) {
	    if (msg) flag(this, 'message', msg);
	    var obj = flag(this, 'object');
	
	    new Assertion(obj).to.be.an('array');
	    new Assertion(subset).to.be.an('array');
	
	    var cmp = flag(this, 'deep') ? _.eql : undefined;
	
	    if (flag(this, 'contains')) {
	      return this.assert(
	          isSubsetOf(subset, obj, cmp)
	        , 'expected #{this} to be a superset of #{act}'
	        , 'expected #{this} to not be a superset of #{act}'
	        , obj
	        , subset
	      );
	    }
	
	    this.assert(
	        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)
	        , 'expected #{this} to have the same members as #{act}'
	        , 'expected #{this} to not have the same members as #{act}'
	        , obj
	        , subset
	    );
	  });
	};


/***/ },
/* 27 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * chai
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	module.exports = function (chai, util) {
	  chai.expect = function (val, message) {
	    return new chai.Assertion(val, message);
	  };
	};
	


/***/ },
/* 28 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * chai
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	module.exports = function (chai, util) {
	  var Assertion = chai.Assertion;
	
	  function loadShould () {
	    // explicitly define this method as function as to have it's name to include as `ssfi`
	    function shouldGetter() {
	      if (this instanceof String || this instanceof Number) {
	        return new Assertion(this.constructor(this), null, shouldGetter);
	      } else if (this instanceof Boolean) {
	        return new Assertion(this == true, null, shouldGetter);
	      }
	      return new Assertion(this, null, shouldGetter);
	    }
	    function shouldSetter(value) {
	      // See https://github.com/chaijs/chai/issues/86: this makes
	      // `whatever.should = someValue` actually set `someValue`, which is
	      // especially useful for `global.should = require('chai').should()`.
	      //
	      // Note that we have to use [[DefineProperty]] instead of [[Put]]
	      // since otherwise we would trigger this very setter!
	      Object.defineProperty(this, 'should', {
	        value: value,
	        enumerable: true,
	        configurable: true,
	        writable: true
	      });
	    }
	    // modify Object.prototype to have `should`
	    Object.defineProperty(Object.prototype, 'should', {
	      set: shouldSetter
	      , get: shouldGetter
	      , configurable: true
	    });
	
	    var should = {};
	
	    should.equal = function (val1, val2, msg) {
	      new Assertion(val1, msg).to.equal(val2);
	    };
	
	    should.Throw = function (fn, errt, errs, msg) {
	      new Assertion(fn, msg).to.Throw(errt, errs);
	    };
	
	    should.exist = function (val, msg) {
	      new Assertion(val, msg).to.exist;
	    }
	
	    // negation
	    should.not = {}
	
	    should.not.equal = function (val1, val2, msg) {
	      new Assertion(val1, msg).to.not.equal(val2);
	    };
	
	    should.not.Throw = function (fn, errt, errs, msg) {
	      new Assertion(fn, msg).to.not.Throw(errt, errs);
	    };
	
	    should.not.exist = function (val, msg) {
	      new Assertion(val, msg).to.not.exist;
	    }
	
	    should['throw'] = should['Throw'];
	    should.not['throw'] = should.not['Throw'];
	
	    return should;
	  };
	
	  chai.should = loadShould;
	  chai.Should = loadShould;
	};


/***/ },
/* 29 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * chai
	 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	
	module.exports = function (chai, util) {
	
	  /*!
	   * Chai dependencies.
	   */
	
	  var Assertion = chai.Assertion
	    , flag = util.flag;
	
	  /*!
	   * Module export.
	   */
	
	  /**
	   * ### assert(expression, message)
	   *
	   * Write your own test expressions.
	   *
	   *     assert('foo' !== 'bar', 'foo is not bar');
	   *     assert(Array.isArray([]), 'empty arrays are arrays');
	   *
	   * @param {Mixed} expression to test for truthiness
	   * @param {String} message to display on error
	   * @name assert
	   * @api public
	   */
	
	  var assert = chai.assert = function (express, errmsg) {
	    var test = new Assertion(null, null, chai.assert);
	    test.assert(
	        express
	      , errmsg
	      , '[ negation message unavailable ]'
	    );
	  };
	
	  /**
	   * ### .fail(actual, expected, [message], [operator])
	   *
	   * Throw a failure. Node.js `assert` module-compatible.
	   *
	   * @name fail
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @param {String} operator
	   * @api public
	   */
	
	  assert.fail = function (actual, expected, message, operator) {
	    message = message || 'assert.fail()';
	    throw new chai.AssertionError(message, {
	        actual: actual
	      , expected: expected
	      , operator: operator
	    }, assert.fail);
	  };
	
	  /**
	   * ### .ok(object, [message])
	   *
	   * Asserts that `object` is truthy.
	   *
	   *     assert.ok('everything', 'everything is ok');
	   *     assert.ok(false, 'this will fail');
	   *
	   * @name ok
	   * @param {Mixed} object to test
	   * @param {String} message
	   * @api public
	   */
	
	  assert.ok = function (val, msg) {
	    new Assertion(val, msg).is.ok;
	  };
	
	  /**
	   * ### .notOk(object, [message])
	   *
	   * Asserts that `object` is falsy.
	   *
	   *     assert.notOk('everything', 'this will fail');
	   *     assert.notOk(false, 'this will pass');
	   *
	   * @name notOk
	   * @param {Mixed} object to test
	   * @param {String} message
	   * @api public
	   */
	
	  assert.notOk = function (val, msg) {
	    new Assertion(val, msg).is.not.ok;
	  };
	
	  /**
	   * ### .equal(actual, expected, [message])
	   *
	   * Asserts non-strict equality (`==`) of `actual` and `expected`.
	   *
	   *     assert.equal(3, '3', '== coerces values to strings');
	   *
	   * @name equal
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @api public
	   */
	
	  assert.equal = function (act, exp, msg) {
	    var test = new Assertion(act, msg, assert.equal);
	
	    test.assert(
	        exp == flag(test, 'object')
	      , 'expected #{this} to equal #{exp}'
	      , 'expected #{this} to not equal #{act}'
	      , exp
	      , act
	    );
	  };
	
	  /**
	   * ### .notEqual(actual, expected, [message])
	   *
	   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
	   *
	   *     assert.notEqual(3, 4, 'these numbers are not equal');
	   *
	   * @name notEqual
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @api public
	   */
	
	  assert.notEqual = function (act, exp, msg) {
	    var test = new Assertion(act, msg, assert.notEqual);
	
	    test.assert(
	        exp != flag(test, 'object')
	      , 'expected #{this} to not equal #{exp}'
	      , 'expected #{this} to equal #{act}'
	      , exp
	      , act
	    );
	  };
	
	  /**
	   * ### .strictEqual(actual, expected, [message])
	   *
	   * Asserts strict equality (`===`) of `actual` and `expected`.
	   *
	   *     assert.strictEqual(true, true, 'these booleans are strictly equal');
	   *
	   * @name strictEqual
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @api public
	   */
	
	  assert.strictEqual = function (act, exp, msg) {
	    new Assertion(act, msg).to.equal(exp);
	  };
	
	  /**
	   * ### .notStrictEqual(actual, expected, [message])
	   *
	   * Asserts strict inequality (`!==`) of `actual` and `expected`.
	   *
	   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');
	   *
	   * @name notStrictEqual
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @api public
	   */
	
	  assert.notStrictEqual = function (act, exp, msg) {
	    new Assertion(act, msg).to.not.equal(exp);
	  };
	
	  /**
	   * ### .deepEqual(actual, expected, [message])
	   *
	   * Asserts that `actual` is deeply equal to `expected`.
	   *
	   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });
	   *
	   * @name deepEqual
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @api public
	   */
	
	  assert.deepEqual = function (act, exp, msg) {
	    new Assertion(act, msg).to.eql(exp);
	  };
	
	  /**
	   * ### .notDeepEqual(actual, expected, [message])
	   *
	   * Assert that `actual` is not deeply equal to `expected`.
	   *
	   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });
	   *
	   * @name notDeepEqual
	   * @param {Mixed} actual
	   * @param {Mixed} expected
	   * @param {String} message
	   * @api public
	   */
	
	  assert.notDeepEqual = function (act, exp, msg) {
	    new Assertion(act, msg).to.not.eql(exp);
	  };
	
	  /**
	   * ### .isTrue(value, [message])
	   *
	   * Asserts that `value` is true.
	   *
	   *     var teaServed = true;
	   *     assert.isTrue(teaServed, 'the tea has been served');
	   *
	   * @name isTrue
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.isTrue = function (val, msg) {
	    new Assertion(val, msg).is['true'];
	  };
	
	  /**
	   * ### .isFalse(value, [message])
	   *
	   * Asserts that `value` is false.
	   *
	   *     var teaServed = false;
	   *     assert.isFalse(teaServed, 'no tea yet? hmm...');
	   *
	   * @name isFalse
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.isFalse = function (val, msg) {
	    new Assertion(val, msg).is['false'];
	  };
	
	  /**
	   * ### .isNull(value, [message])
	   *
	   * Asserts that `value` is null.
	   *
	   *     assert.isNull(err, 'there was no error');
	   *
	   * @name isNull
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.isNull = function (val, msg) {
	    new Assertion(val, msg).to.equal(null);
	  };
	
	  /**
	   * ### .isNotNull(value, [message])
	   *
	   * Asserts that `value` is not null.
	   *
	   *     var tea = 'tasty chai';
	   *     assert.isNotNull(tea, 'great, time for tea!');
	   *
	   * @name isNotNull
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.isNotNull = function (val, msg) {
	    new Assertion(val, msg).to.not.equal(null);
	  };
	
	  /**
	   * ### .isUndefined(value, [message])
	   *
	   * Asserts that `value` is `undefined`.
	   *
	   *     var tea;
	   *     assert.isUndefined(tea, 'no tea defined');
	   *
	   * @name isUndefined
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.isUndefined = function (val, msg) {
	    new Assertion(val, msg).to.equal(undefined);
	  };
	
	  /**
	   * ### .isDefined(value, [message])
	   *
	   * Asserts that `value` is not `undefined`.
	   *
	   *     var tea = 'cup of chai';
	   *     assert.isDefined(tea, 'tea has been defined');
	   *
	   * @name isDefined
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.isDefined = function (val, msg) {
	    new Assertion(val, msg).to.not.equal(undefined);
	  };
	
	  /**
	   * ### .isFunction(value, [message])
	   *
	   * Asserts that `value` is a function.
	   *
	   *     function serveTea() { return 'cup of tea'; };
	   *     assert.isFunction(serveTea, 'great, we can have tea now');
	   *
	   * @name isFunction
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.isFunction = function (val, msg) {
	    new Assertion(val, msg).to.be.a('function');
	  };
	
	  /**
	   * ### .isNotFunction(value, [message])
	   *
	   * Asserts that `value` is _not_ a function.
	   *
	   *     var serveTea = [ 'heat', 'pour', 'sip' ];
	   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');
	   *
	   * @name isNotFunction
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.isNotFunction = function (val, msg) {
	    new Assertion(val, msg).to.not.be.a('function');
	  };
	
	  /**
	   * ### .isObject(value, [message])
	   *
	   * Asserts that `value` is an object (as revealed by
	   * `Object.prototype.toString`).
	   *
	   *     var selection = { name: 'Chai', serve: 'with spices' };
	   *     assert.isObject(selection, 'tea selection is an object');
	   *
	   * @name isObject
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.isObject = function (val, msg) {
	    new Assertion(val, msg).to.be.a('object');
	  };
	
	  /**
	   * ### .isNotObject(value, [message])
	   *
	   * Asserts that `value` is _not_ an object.
	   *
	   *     var selection = 'chai'
	   *     assert.isNotObject(selection, 'tea selection is not an object');
	   *     assert.isNotObject(null, 'null is not an object');
	   *
	   * @name isNotObject
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.isNotObject = function (val, msg) {
	    new Assertion(val, msg).to.not.be.a('object');
	  };
	
	  /**
	   * ### .isArray(value, [message])
	   *
	   * Asserts that `value` is an array.
	   *
	   *     var menu = [ 'green', 'chai', 'oolong' ];
	   *     assert.isArray(menu, 'what kind of tea do we want?');
	   *
	   * @name isArray
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.isArray = function (val, msg) {
	    new Assertion(val, msg).to.be.an('array');
	  };
	
	  /**
	   * ### .isNotArray(value, [message])
	   *
	   * Asserts that `value` is _not_ an array.
	   *
	   *     var menu = 'green|chai|oolong';
	   *     assert.isNotArray(menu, 'what kind of tea do we want?');
	   *
	   * @name isNotArray
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.isNotArray = function (val, msg) {
	    new Assertion(val, msg).to.not.be.an('array');
	  };
	
	  /**
	   * ### .isString(value, [message])
	   *
	   * Asserts that `value` is a string.
	   *
	   *     var teaOrder = 'chai';
	   *     assert.isString(teaOrder, 'order placed');
	   *
	   * @name isString
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.isString = function (val, msg) {
	    new Assertion(val, msg).to.be.a('string');
	  };
	
	  /**
	   * ### .isNotString(value, [message])
	   *
	   * Asserts that `value` is _not_ a string.
	   *
	   *     var teaOrder = 4;
	   *     assert.isNotString(teaOrder, 'order placed');
	   *
	   * @name isNotString
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.isNotString = function (val, msg) {
	    new Assertion(val, msg).to.not.be.a('string');
	  };
	
	  /**
	   * ### .isNumber(value, [message])
	   *
	   * Asserts that `value` is a number.
	   *
	   *     var cups = 2;
	   *     assert.isNumber(cups, 'how many cups');
	   *
	   * @name isNumber
	   * @param {Number} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.isNumber = function (val, msg) {
	    new Assertion(val, msg).to.be.a('number');
	  };
	
	  /**
	   * ### .isNotNumber(value, [message])
	   *
	   * Asserts that `value` is _not_ a number.
	   *
	   *     var cups = '2 cups please';
	   *     assert.isNotNumber(cups, 'how many cups');
	   *
	   * @name isNotNumber
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.isNotNumber = function (val, msg) {
	    new Assertion(val, msg).to.not.be.a('number');
	  };
	
	  /**
	   * ### .isBoolean(value, [message])
	   *
	   * Asserts that `value` is a boolean.
	   *
	   *     var teaReady = true
	   *       , teaServed = false;
	   *
	   *     assert.isBoolean(teaReady, 'is the tea ready');
	   *     assert.isBoolean(teaServed, 'has tea been served');
	   *
	   * @name isBoolean
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.isBoolean = function (val, msg) {
	    new Assertion(val, msg).to.be.a('boolean');
	  };
	
	  /**
	   * ### .isNotBoolean(value, [message])
	   *
	   * Asserts that `value` is _not_ a boolean.
	   *
	   *     var teaReady = 'yep'
	   *       , teaServed = 'nope';
	   *
	   *     assert.isNotBoolean(teaReady, 'is the tea ready');
	   *     assert.isNotBoolean(teaServed, 'has tea been served');
	   *
	   * @name isNotBoolean
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.isNotBoolean = function (val, msg) {
	    new Assertion(val, msg).to.not.be.a('boolean');
	  };
	
	  /**
	   * ### .typeOf(value, name, [message])
	   *
	   * Asserts that `value`'s type is `name`, as determined by
	   * `Object.prototype.toString`.
	   *
	   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');
	   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');
	   *     assert.typeOf('tea', 'string', 'we have a string');
	   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');
	   *     assert.typeOf(null, 'null', 'we have a null');
	   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');
	   *
	   * @name typeOf
	   * @param {Mixed} value
	   * @param {String} name
	   * @param {String} message
	   * @api public
	   */
	
	  assert.typeOf = function (val, type, msg) {
	    new Assertion(val, msg).to.be.a(type);
	  };
	
	  /**
	   * ### .notTypeOf(value, name, [message])
	   *
	   * Asserts that `value`'s type is _not_ `name`, as determined by
	   * `Object.prototype.toString`.
	   *
	   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');
	   *
	   * @name notTypeOf
	   * @param {Mixed} value
	   * @param {String} typeof name
	   * @param {String} message
	   * @api public
	   */
	
	  assert.notTypeOf = function (val, type, msg) {
	    new Assertion(val, msg).to.not.be.a(type);
	  };
	
	  /**
	   * ### .instanceOf(object, constructor, [message])
	   *
	   * Asserts that `value` is an instance of `constructor`.
	   *
	   *     var Tea = function (name) { this.name = name; }
	   *       , chai = new Tea('chai');
	   *
	   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');
	   *
	   * @name instanceOf
	   * @param {Object} object
	   * @param {Constructor} constructor
	   * @param {String} message
	   * @api public
	   */
	
	  assert.instanceOf = function (val, type, msg) {
	    new Assertion(val, msg).to.be.instanceOf(type);
	  };
	
	  /**
	   * ### .notInstanceOf(object, constructor, [message])
	   *
	   * Asserts `value` is not an instance of `constructor`.
	   *
	   *     var Tea = function (name) { this.name = name; }
	   *       , chai = new String('chai');
	   *
	   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');
	   *
	   * @name notInstanceOf
	   * @param {Object} object
	   * @param {Constructor} constructor
	   * @param {String} message
	   * @api public
	   */
	
	  assert.notInstanceOf = function (val, type, msg) {
	    new Assertion(val, msg).to.not.be.instanceOf(type);
	  };
	
	  /**
	   * ### .include(haystack, needle, [message])
	   *
	   * Asserts that `haystack` includes `needle`. Works
	   * for strings and arrays.
	   *
	   *     assert.include('foobar', 'bar', 'foobar contains string "bar"');
	   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');
	   *
	   * @name include
	   * @param {Array|String} haystack
	   * @param {Mixed} needle
	   * @param {String} message
	   * @api public
	   */
	
	  assert.include = function (exp, inc, msg) {
	    new Assertion(exp, msg, assert.include).include(inc);
	  };
	
	  /**
	   * ### .notInclude(haystack, needle, [message])
	   *
	   * Asserts that `haystack` does not include `needle`. Works
	   * for strings and arrays.
	   *i
	   *     assert.notInclude('foobar', 'baz', 'string not include substring');
	   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');
	   *
	   * @name notInclude
	   * @param {Array|String} haystack
	   * @param {Mixed} needle
	   * @param {String} message
	   * @api public
	   */
	
	  assert.notInclude = function (exp, inc, msg) {
	    new Assertion(exp, msg, assert.notInclude).not.include(inc);
	  };
	
	  /**
	   * ### .match(value, regexp, [message])
	   *
	   * Asserts that `value` matches the regular expression `regexp`.
	   *
	   *     assert.match('foobar', /^foo/, 'regexp matches');
	   *
	   * @name match
	   * @param {Mixed} value
	   * @param {RegExp} regexp
	   * @param {String} message
	   * @api public
	   */
	
	  assert.match = function (exp, re, msg) {
	    new Assertion(exp, msg).to.match(re);
	  };
	
	  /**
	   * ### .notMatch(value, regexp, [message])
	   *
	   * Asserts that `value` does not match the regular expression `regexp`.
	   *
	   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');
	   *
	   * @name notMatch
	   * @param {Mixed} value
	   * @param {RegExp} regexp
	   * @param {String} message
	   * @api public
	   */
	
	  assert.notMatch = function (exp, re, msg) {
	    new Assertion(exp, msg).to.not.match(re);
	  };
	
	  /**
	   * ### .property(object, property, [message])
	   *
	   * Asserts that `object` has a property named by `property`.
	   *
	   *     assert.property({ tea: { green: 'matcha' }}, 'tea');
	   *
	   * @name property
	   * @param {Object} object
	   * @param {String} property
	   * @param {String} message
	   * @api public
	   */
	
	  assert.property = function (obj, prop, msg) {
	    new Assertion(obj, msg).to.have.property(prop);
	  };
	
	  /**
	   * ### .notProperty(object, property, [message])
	   *
	   * Asserts that `object` does _not_ have a property named by `property`.
	   *
	   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');
	   *
	   * @name notProperty
	   * @param {Object} object
	   * @param {String} property
	   * @param {String} message
	   * @api public
	   */
	
	  assert.notProperty = function (obj, prop, msg) {
	    new Assertion(obj, msg).to.not.have.property(prop);
	  };
	
	  /**
	   * ### .deepProperty(object, property, [message])
	   *
	   * Asserts that `object` has a property named by `property`, which can be a
	   * string using dot- and bracket-notation for deep reference.
	   *
	   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');
	   *
	   * @name deepProperty
	   * @param {Object} object
	   * @param {String} property
	   * @param {String} message
	   * @api public
	   */
	
	  assert.deepProperty = function (obj, prop, msg) {
	    new Assertion(obj, msg).to.have.deep.property(prop);
	  };
	
	  /**
	   * ### .notDeepProperty(object, property, [message])
	   *
	   * Asserts that `object` does _not_ have a property named by `property`, which
	   * can be a string using dot- and bracket-notation for deep reference.
	   *
	   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');
	   *
	   * @name notDeepProperty
	   * @param {Object} object
	   * @param {String} property
	   * @param {String} message
	   * @api public
	   */
	
	  assert.notDeepProperty = function (obj, prop, msg) {
	    new Assertion(obj, msg).to.not.have.deep.property(prop);
	  };
	
	  /**
	   * ### .propertyVal(object, property, value, [message])
	   *
	   * Asserts that `object` has a property named by `property` with value given
	   * by `value`.
	   *
	   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');
	   *
	   * @name propertyVal
	   * @param {Object} object
	   * @param {String} property
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.propertyVal = function (obj, prop, val, msg) {
	    new Assertion(obj, msg).to.have.property(prop, val);
	  };
	
	  /**
	   * ### .propertyNotVal(object, property, value, [message])
	   *
	   * Asserts that `object` has a property named by `property`, but with a value
	   * different from that given by `value`.
	   *
	   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');
	   *
	   * @name propertyNotVal
	   * @param {Object} object
	   * @param {String} property
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.propertyNotVal = function (obj, prop, val, msg) {
	    new Assertion(obj, msg).to.not.have.property(prop, val);
	  };
	
	  /**
	   * ### .deepPropertyVal(object, property, value, [message])
	   *
	   * Asserts that `object` has a property named by `property` with value given
	   * by `value`. `property` can use dot- and bracket-notation for deep
	   * reference.
	   *
	   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');
	   *
	   * @name deepPropertyVal
	   * @param {Object} object
	   * @param {String} property
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.deepPropertyVal = function (obj, prop, val, msg) {
	    new Assertion(obj, msg).to.have.deep.property(prop, val);
	  };
	
	  /**
	   * ### .deepPropertyNotVal(object, property, value, [message])
	   *
	   * Asserts that `object` has a property named by `property`, but with a value
	   * different from that given by `value`. `property` can use dot- and
	   * bracket-notation for deep reference.
	   *
	   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');
	   *
	   * @name deepPropertyNotVal
	   * @param {Object} object
	   * @param {String} property
	   * @param {Mixed} value
	   * @param {String} message
	   * @api public
	   */
	
	  assert.deepPropertyNotVal = function (obj, prop, val, msg) {
	    new Assertion(obj, msg).to.not.have.deep.property(prop, val);
	  };
	
	  /**
	   * ### .lengthOf(object, length, [message])
	   *
	   * Asserts that `object` has a `length` property with the expected value.
	   *
	   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');
	   *     assert.lengthOf('foobar', 5, 'string has length of 6');
	   *
	   * @name lengthOf
	   * @param {Mixed} object
	   * @param {Number} length
	   * @param {String} message
	   * @api public
	   */
	
	  assert.lengthOf = function (exp, len, msg) {
	    new Assertion(exp, msg).to.have.length(len);
	  };
	
	  /**
	   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])
	   *
	   * Asserts that `function` will throw an error that is an instance of
	   * `constructor`, or alternately that it will throw an error with message
	   * matching `regexp`.
	   *
	   *     assert.throw(fn, 'function throws a reference error');
	   *     assert.throw(fn, /function throws a reference error/);
	   *     assert.throw(fn, ReferenceError);
	   *     assert.throw(fn, ReferenceError, 'function throws a reference error');
	   *     assert.throw(fn, ReferenceError, /function throws a reference error/);
	   *
	   * @name throws
	   * @alias throw
	   * @alias Throw
	   * @param {Function} function
	   * @param {ErrorConstructor} constructor
	   * @param {RegExp} regexp
	   * @param {String} message
	   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
	   * @api public
	   */
	
	  assert.Throw = function (fn, errt, errs, msg) {
	    if ('string' === typeof errt || errt instanceof RegExp) {
	      errs = errt;
	      errt = null;
	    }
	
	    var assertErr = new Assertion(fn, msg).to.Throw(errt, errs);
	    return flag(assertErr, 'object');
	  };
	
	  /**
	   * ### .doesNotThrow(function, [constructor/regexp], [message])
	   *
	   * Asserts that `function` will _not_ throw an error that is an instance of
	   * `constructor`, or alternately that it will not throw an error with message
	   * matching `regexp`.
	   *
	   *     assert.doesNotThrow(fn, Error, 'function does not throw');
	   *
	   * @name doesNotThrow
	   * @param {Function} function
	   * @param {ErrorConstructor} constructor
	   * @param {RegExp} regexp
	   * @param {String} message
	   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
	   * @api public
	   */
	
	  assert.doesNotThrow = function (fn, type, msg) {
	    if ('string' === typeof type) {
	      msg = type;
	      type = null;
	    }
	
	    new Assertion(fn, msg).to.not.Throw(type);
	  };
	
	  /**
	   * ### .operator(val1, operator, val2, [message])
	   *
	   * Compares two values using `operator`.
	   *
	   *     assert.operator(1, '<', 2, 'everything is ok');
	   *     assert.operator(1, '>', 2, 'this will fail');
	   *
	   * @name operator
	   * @param {Mixed} val1
	   * @param {String} operator
	   * @param {Mixed} val2
	   * @param {String} message
	   * @api public
	   */
	
	  assert.operator = function (val, operator, val2, msg) {
	    if (!~['==', '===', '>', '>=', '<', '<=', '!=', '!=='].indexOf(operator)) {
	      throw new Error('Invalid operator "' + operator + '"');
	    }
	    var test = new Assertion(eval(val + operator + val2), msg);
	    test.assert(
	        true === flag(test, 'object')
	      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)
	      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );
	  };
	
	  /**
	   * ### .closeTo(actual, expected, delta, [message])
	   *
	   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
	   *
	   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');
	   *
	   * @name closeTo
	   * @param {Number} actual
	   * @param {Number} expected
	   * @param {Number} delta
	   * @param {String} message
	   * @api public
	   */
	
	  assert.closeTo = function (act, exp, delta, msg) {
	    new Assertion(act, msg).to.be.closeTo(exp, delta);
	  };
	
	  /**
	   * ### .sameMembers(set1, set2, [message])
	   *
	   * Asserts that `set1` and `set2` have the same members.
	   * Order is not taken into account.
	   *
	   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');
	   *
	   * @name sameMembers
	   * @param {Array} set1
	   * @param {Array} set2
	   * @param {String} message
	   * @api public
	   */
	
	  assert.sameMembers = function (set1, set2, msg) {
	    new Assertion(set1, msg).to.have.same.members(set2);
	  }
	
	  /**
	   * ### .includeMembers(superset, subset, [message])
	   *
	   * Asserts that `subset` is included in `superset`.
	   * Order is not taken into account.
	   *
	   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');
	   *
	   * @name includeMembers
	   * @param {Array} superset
	   * @param {Array} subset
	   * @param {String} message
	   * @api public
	   */
	
	  assert.includeMembers = function (superset, subset, msg) {
	    new Assertion(superset, msg).to.include.members(subset);
	  }
	
	  /*!
	   * Undocumented / untested
	   */
	
	  assert.ifError = function (val, msg) {
	    new Assertion(val, msg).to.not.be.ok;
	  };
	
	  /*!
	   * Aliases.
	   */
	
	  (function alias(name, as){
	    assert[as] = assert[name];
	    return alias;
	  })
	  ('Throw', 'throw')
	  ('Throw', 'throws');
	};


/***/ },
/* 30 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module collection
	 */
	var _ = __webpack_require__(49)._;
	
	function CollectionRegistry() {
	    if (!this) return new CollectionRegistry();
	    this.collectionNames = [];
	}
	
	_.extend(CollectionRegistry.prototype, {
	    register: function (collection) {
	        var name = collection.name;
	        this[name] = collection;
	        this.collectionNames.push(name);
	    },
	    reset: function () {
	        var self = this;
	        _.each(this.collectionNames, function (name) {
	            delete self[name];
	        });
	        this.collectionNames = [];
	    }
	});
	
	exports.CollectionRegistry = new CollectionRegistry();

/***/ },
/* 31 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module collection
	 */
	
	var log = __webpack_require__(45),
	    CollectionRegistry = __webpack_require__(30).CollectionRegistry,
	    InternalSiestaError = __webpack_require__(34).InternalSiestaError,
	    Model = __webpack_require__(33),
	    extend = __webpack_require__(70),
	    observe = __webpack_require__(71).Platform,
	    events = __webpack_require__(35),
	    util = __webpack_require__(49),
	    _ = util._,
	    error = __webpack_require__(34),
	    constructError = error.errorFactory(error.Components.Collection),
	    cache = __webpack_require__(32);
	
	var UNSAFE_METHODS = ['PUT', 'PATCH', 'POST', 'DELETE'],
	    Logger = log.loggerWithName('Collection');
	
	/**
	 * A collection describes a set of models and optionally a REST API which we would
	 * like to model.
	 *
	 * @param name
	 * @param opts
	 * @constructor
	 *
	 *
	 * @example
	 * ```js
	 * var GitHub = new siesta('GitHub')
	 * // ... configure mappings, descriptors etc ...
	 * GitHub.install(function () {
	 *     // ... carry on.
	 * });
	 * ```
	 */
	function Collection(name, opts) {
	    var self = this;
	    if (!name) throw new Error('Collection must have a name');
	
	    opts = opts || {};
	    util.extendFromOpts(this, opts, {
	        /**
	         * The URL of the API e.g. http://api.github.com
	         * @type {string}
	         */
	        baseURL: ''
	    });
	
	    _.extend(this, {
	        name: name,
	        _rawModels: {},
	        _models: {},
	        _opts: opts,
	        /**
	         * Set to true if installation has succeeded. You cannot use the collectio
	         * @type {boolean}
	         */
	        installed: false
	    });
	
	    Object.defineProperties(this, {
	        dirty: {
	            get: function () {
	                if (siesta.ext.storageEnabled) {
	                    var unsavedObjectsByCollection = siesta.ext.storage._unsavedObjectsByCollection,
	                        hash = unsavedObjectsByCollection[self.name] || {};
	                    return !!Object.keys(hash).length;
	                }
	                else return undefined;
	            },
	            enumerable: true
	        }
	    });
	
	    CollectionRegistry.register(this);
	    events.ProxyEventEmitter.call(this, this.name);
	}
	
	Collection.prototype = Object.create(events.ProxyEventEmitter.prototype);
	
	_.extend(Collection.prototype, {
	    /**
	     * Ensure mappings are installed.
	     * @param [callback]
	     * @class Collection
	     */
	    install: function (callback) {
	        var deferred = util.defer(callback);
	        var self = this;
	        if (!this.installed) {
	            var modelsToInstall = [];
	            for (var name in this._models) {
	                if (this._models.hasOwnProperty(name)) {
	                    var model = this._models[name];
	                    modelsToInstall.push(model);
	                }
	            }
	            if (Logger.info.isEnabled)
	                Logger.info('There are ' + modelsToInstall.length.toString() + ' mappings to install');
	            if (modelsToInstall.length) {
	                var tasks = _.map(modelsToInstall, function (m) {
	                    return _.bind(m.install, m);
	                });
	                util.async.parallel(tasks, function (err) {
	                    if (err) {
	                        Logger.error('Failed to install collection', err);
	                        self._finaliseInstallation(err, deferred.finish.bind(deferred));
	                    }
	                    else {
	                        self.installed = true;
	                        var errors = [];
	                        _.each(modelsToInstall, function (m) {
	                            if (Logger.info.isEnabled)
	                                Logger.info('Installing relationships for mapping with name "' + m.name + '"');
	                            var err = m.installRelationships();
	                            if (err) errors.push(err);
	                        });
	                        if (!errors.length) {
	                            _.each(modelsToInstall, function (m) {
	                                if (Logger.info.isEnabled)
	                                    Logger.info('Installing reverse relationships for mapping with name "' + m.name + '"');
	                                var err = m.installReverseRelationships();
	                                if (err) errors.push(err);
	                            });
	                        }
	                        if (errors.length == 1) {
	                            err = errors[0];
	                        } else if (errors.length) {
	                            err = errors;
	                        }
	                        self._finaliseInstallation(err, deferred.finish.bind(deferred));
	                    }
	                });
	
	            } else {
	                self._finaliseInstallation(null, deferred.finish.bind(deferred));
	            }
	        } else {
	            throw new InternalSiestaError('Collection "' + this.name + '" has already been installed');
	        }
	        return deferred.promise;
	    },
	
	    /**
	     * Mark this collection as installed, and place the collection on the global Siesta object.
	     * @param  {Object}   err
	     * @param  {Function} callback
	     * @class Collection
	     */
	    _finaliseInstallation: function (err, callback) {
	        if (err) err = constructError('Errors were encountered whilst setting up the collection', {errors: err});
	        if (!err) {
	            this.installed = true;
	            var index = __webpack_require__(21);
	            index[this.name] = this;
	        }
	        callback(err);
	    },
	    /**
	     * Given the name of a mapping and an options object describing the mapping, creating a Model
	     * object, install it and return it.
	     * @param  {String} name
	     * @param  {Object} opts
	     * @return {Model}
	     * @class Collection
	     */
	    _model: function (name, opts) {
	        if (name) {
	            this._rawModels[name] = opts;
	            opts = extend(true, {}, opts);
	            opts.name = name;
	            opts.collection = this;
	            var model = new Model(opts);
	            this._models[name] = model;
	            this[name] = model;
	            return model;
	        } else {
	            throw new Error('No name specified when creating mapping');
	        }
	    },
	
	
	    /**
	     * Registers a model with this collection.
	     * @param {String|Object} optsOrName An options object or the name of the mapping. Must pass options as second param if specify name.
	     * @param {Object} opts Options if name already specified.
	     * @return {Model}
	     * @class Collection
	     */
	    model: function (op) {
	        var acceptModels = !this.installed;
	        if (acceptModels) {
	            var self = this;
	            if (arguments.length) {
	                if (arguments.length == 1) {
	                    if (util.isArray(arguments[0])) {
	                        return _.map(arguments[0], function (m) {
	                            return self._model(m.name, m);
	                        });
	                    } else {
	                        var name, opts;
	                        if (util.isString(arguments[0])) {
	                            name = arguments[0];
	                            opts = {};
	                        }
	                        else {
	                            opts = arguments[0];
	                            name = opts.name;
	                        }
	                        return this._model(name, opts);
	                    }
	                } else {
	                    if (typeof arguments[0] == 'string') {
	                        return this._model(arguments[0], arguments[1]);
	                    } else {
	                        return _.map(arguments, function (m) {
	                            return self._model(m.name, m);
	                        });
	                    }
	                }
	            }
	        }
	        else {
	            throw Error('Cannot create new models once the object graph is established!');
	        }
	        return null;
	    },
	
	    descriptor: function (opts) {
	        var descriptors = [];
	        if (siesta.ext.httpEnabled) {
	            opts.collection = this;
	            var methods = siesta.ext.http._resolveMethod(opts.method);
	            var unsafe = [];
	            var safe = [];
	            for (var i = 0; i < methods.length; i++) {
	                var m = methods[i];
	                if (UNSAFE_METHODS.indexOf(m) > -1) {
	                    unsafe.push(m);
	                } else {
	                    safe.push(m);
	                }
	            }
	            if (unsafe.length) {
	                var requestDescriptor = extend({}, opts);
	                requestDescriptor.method = unsafe;
	                requestDescriptor = new siesta.ext.http.RequestDescriptor(requestDescriptor);
	                siesta.ext.http.DescriptorRegistry.registerRequestDescriptor(requestDescriptor);
	                descriptors.push(requestDescriptor);
	            }
	            if (safe.length) {
	                var responseDescriptor = extend({}, opts);
	                responseDescriptor.method = safe;
	                responseDescriptor = new siesta.ext.http.ResponseDescriptor(responseDescriptor);
	                siesta.ext.http.DescriptorRegistry.registerResponseDescriptor(responseDescriptor);
	                descriptors.push(responseDescriptor);
	            }
	        } else {
	            throw new Error('HTTP module not installed.');
	        }
	        return descriptors;
	    },
	
	    /**
	     * Dump this collection as JSON
	     * @param  {Boolean} asJson Whether or not to apply JSON.stringify
	     * @return {String|Object}
	     * @class Collection
	     */
	    _dump: function (asJson) {
	        var obj = {};
	        obj.installed = this.installed;
	        obj.docId = this._docId;
	        obj.name = this.name;
	        obj.baseURL = this.baseURL;
	        return asJson ? util.prettyPrint(obj) : obj;
	    },
	
	    /**
	     * Returns the number of objects in this collection.
	     *
	     * @param callback
	     * @returns {Promise}
	     */
	    count: function (callback) {
	        var deferred = util.defer(callback);
	        var tasks = _.map(this._models, function (m) {
	            return _.bind(m.count, m);
	        });
	        util.async.parallel(tasks, function (err, ns) {
	            var n;
	            if (!err) {
	                n = _.reduce(ns, function (m, r) {
	                    return m + r
	                }, 0);
	            }
	            deferred.finish(err, n);
	        });
	        return deferred.promise;
	    }
	});
	
	module.exports = Collection;

/***/ },
/* 32 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * This is an in-memory cache for models. Models are cached by local id (_id) and remote id (defined by the mapping).
	 * Lookups are performed against the cache when mapping.
	 * @module cache
	 */
	var log = __webpack_require__(45),
	    InternalSiestaError = __webpack_require__(34).InternalSiestaError,
	    util = __webpack_require__(49);
	
	
	var Logger = log.loggerWithName('Cache');
	
	var localCacheById = {},
	    localCache = {},
	    remoteCache = {};
	
	/**
	 * Clear out the cache.
	 */
	function reset() {
	    remoteCache = {};
	    localCacheById = {};
	    localCache = {};
	}
	
	/**
	 * Return the object in the cache given a local id (_id)
	 * @param  {String} localId
	 * @return {ModelInstance}
	 */
	function getViaLocalId(localId) {
	    var obj = localCacheById[localId];
	    if (obj) {
	        if (Logger.debug.isEnabled)
	            Logger.debug('Local cache hit: ' + obj._dump(true));
	    } else {
	        if (Logger.debug.isEnabled)
	            Logger.debug('Local cache miss: ' + localId);
	    }
	    return obj;
	}
	
	/**
	 * Return the singleton object given a singleton model.
	 * @param  {Model} model
	 * @return {ModelInstance}
	 */
	function getSingleton(model) {
	    var modelName = model.name;
	    var collectionName = model.collectionName;
	    var collectionCache = localCache[collectionName];
	    if (collectionCache) {
	        var typeCache = collectionCache[modelName];
	        if (typeCache) {
	            var objs = [];
	            for (var prop in typeCache) {
	                if (typeCache.hasOwnProperty(prop)) {
	                    objs.push(typeCache[prop]);
	                }
	            }
	            if (objs.length > 1) {
	                var errStr = 'A singleton model has more than 1 object in the cache! This is a serious error. ' +
	                    'Either a model has been modified after objects have already been created, or something has gone' +
	                    'very wrong. Please file a bug report if the latter.';
	                throw new InternalSiestaError(errStr);
	            } else if (objs.length) {
	                return objs[0];
	            }
	        }
	    }
	    return null;
	}
	
	/**
	 * Given a remote identifier and an options object that describes mapping/collection,
	 * return the model if cached.
	 * @param  {String} remoteId
	 * @param  {Object} opts
	 * @return {ModelInstance}
	 */
	function getViaRemoteId(remoteId, opts) {
	    var type = opts.model.name;
	    var collectionName = opts.model.collectionName;
	    var collectionCache = remoteCache[collectionName];
	    if (collectionCache) {
	        var typeCache = remoteCache[collectionName][type];
	        if (typeCache) {
	            var obj = typeCache[remoteId];
	            if (obj) {
	                if (Logger.debug)
	                    Logger.debug('Remote cache hit: ' + obj._dump(true));
	            } else {
	                if (Logger.debug)
	                    Logger.debug('Remote cache miss: ' + remoteId);
	            }
	            return obj;
	        }
	    }
	    if (Logger.debug)
	        Logger.debug('Remote cache miss: ' + remoteId);
	    return null;
	}
	
	/**
	 * Insert an objet into the cache using a remote identifier defined by the mapping.
	 * @param  {ModelInstance} obj
	 * @param  {String} remoteId
	 * @param  {String} previousRemoteId If remote id has been changed, this is the old remote identifier
	 */
	function remoteInsert(obj, remoteId, previousRemoteId) {
	    if (obj) {
	        var collectionName = obj.model.collectionName;
	        if (collectionName) {
	            if (!remoteCache[collectionName]) {
	                remoteCache[collectionName] = {};
	            }
	            var type = obj.model.name;
	            if (type) {
	                if (!remoteCache[collectionName][type]) {
	                    remoteCache[collectionName][type] = {};
	                }
	                if (previousRemoteId) {
	                    remoteCache[collectionName][type][previousRemoteId] = null;
	                }
	                var cachedObject = remoteCache[collectionName][type][remoteId];
	                if (!cachedObject) {
	                    remoteCache[collectionName][type][remoteId] = obj;
	                    if (Logger.debug.isEnabled)
	                        Logger.debug('Remote cache insert: ' + obj._dump(true));
	                    if (Logger.trace.isEnabled)
	                        Logger.trace('Remote cache now looks like: ' + remoteDump(true))
	                } else {
	                    // Something has gone really wrong. Only one object for a particular collection/type/remoteid combo
	                    // should ever exist.
	                    if (obj != cachedObject) {
	                        var message = 'Object ' + collectionName.toString() + ':' + type.toString() + '[' + obj.model.id + '="' + remoteId + '"] already exists in the cache.' +
	                            ' This is a serious error, please file a bug report if you are experiencing this out in the wild';
	                        Logger.error(message, {
	                            obj: obj,
	                            cachedObject: cachedObject
	                        });
	                        throw new InternalSiestaError(message);
	                    } else {
	                        if (Logger.debug.isEnabled)
	                            Logger.debug('Object has already been inserted: ' + obj._dump(true));
	                    }
	
	                }
	            } else {
	                throw new InternalSiestaError('Model has no type', {
	                    model: obj.model,
	                    obj: obj
	                });
	            }
	        } else {
	            throw new InternalSiestaError('Model has no collection', {
	                model: obj.model,
	                obj: obj
	            });
	        }
	    } else {
	        var msg = 'Must pass an object when inserting to cache';
	        Logger.error(msg);
	        throw new InternalSiestaError(msg);
	    }
	}
	
	/**
	 * Dump the remote id cache
	 * @param  {boolean} asJson Whether or not to apply JSON.stringify
	 * @return {String|Object}
	 */
	function remoteDump(asJson) {
	    var dumpedRestCache = {};
	    for (var coll in remoteCache) {
	        if (remoteCache.hasOwnProperty(coll)) {
	            var dumpedCollCache = {};
	            dumpedRestCache[coll] = dumpedCollCache;
	            var collCache = remoteCache[coll];
	            for (var model in collCache) {
	                if (collCache.hasOwnProperty(model)) {
	                    var dumpedModelCache = {};
	                    dumpedCollCache[model] = dumpedModelCache;
	                    var modelCache = collCache[model];
	                    for (var remoteId in modelCache) {
	                        if (modelCache.hasOwnProperty(remoteId)) {
	                            if (modelCache[remoteId]) {
	                                dumpedModelCache[remoteId] = modelCache[remoteId]._dump();
	                            }
	                        }
	                    }
	                }
	            }
	        }
	    }
	    return asJson ? util.prettyPrint((dumpedRestCache, null, 4)) : dumpedRestCache;
	}
	
	/**
	 * Dump the local id (_id) cache
	 * @param  {boolean} asJson Whether or not to apply JSON.stringify
	 * @return {String|Object}
	 */
	function localDump(asJson) {
	    var dumpedIdCache = {};
	    for (var id in localCacheById) {
	        if (localCacheById.hasOwnProperty(id)) {
	            dumpedIdCache[id] = localCacheById[id]._dump()
	        }
	    }
	    return asJson ? util.prettyPrint((dumpedIdCache, null, 4)) : dumpedIdCache;
	}
	
	/**
	 * Dump to the cache.
	 * @param  {boolean} asJson Whether or not to apply JSON.stringify
	 * @return {String|Object}
	 */
	function dump(asJson) {
	    var dumped = {
	        localCache: localDump(),
	        remoteCache: remoteDump()
	    };
	    return asJson ? util.prettyPrint((dumped, null, 4)) : dumped;
	}
	
	function _remoteCache() {
	    return remoteCache
	}
	
	function _localCache() {
	    return localCacheById;
	}
	
	/**
	 * Query the cache
	 * @param  {Object} opts Object describing the query
	 * @return {ModelInstance}
	 * @example
	 * ```js
	 * cache.get({_id: '5'}); // Query by local id
	 * cache.get({remoteId: '5', mapping: myMapping}); // Query by remote id
	 * ```
	 */
	function get(opts) {
	    if (Logger.debug.isEnabled) Logger.debug('get', opts);
	    var obj, idField, remoteId;
	    var localId = opts._id;
	    if (localId) {
	        obj = getViaLocalId(localId);
	        if (obj) {
	            return obj;
	        } else {
	            if (opts.model) {
	                idField = opts.model.id;
	                remoteId = opts[idField];
	                if (Logger.debug.isEnabled) Logger.debug(idField + '=' + remoteId);
	                return getViaRemoteId(remoteId, opts);
	            } else {
	                return null;
	            }
	        }
	    } else if (opts.model) {
	        idField = opts.model.id;
	        remoteId = opts[idField];
	        if (remoteId) {
	            return getViaRemoteId(remoteId, opts);
	        } else if (opts.model.singleton) {
	            return getSingleton(opts.model);
	        }
	    } else {
	        Logger.warn('Invalid opts to cache', {
	            opts: opts
	        });
	    }
	    return null;
	}
	
	/**
	 * Insert an object into the cache.
	 * @param  {ModelInstance} obj
	 * @throws {InternalSiestaError} An object with _id/remoteId already exists. Not thrown if same obhect.
	 */
	function insert(obj) {
	    var localId = obj._id;
	    if (localId) {
	        var collectionName = obj.model.collectionName;
	        var modelName = obj.model.name;
	        if (Logger.debug.isEnabled)
	            Logger.debug('Local cache insert: ' + obj._dumpString());
	        if (!localCacheById[localId]) {
	            localCacheById[localId] = obj;
	            if (Logger.trace.isEnabled)
	                Logger.trace('Local cache now looks like: ' + localDump(true));
	            if (!localCache[collectionName]) localCache[collectionName] = {};
	            if (!localCache[collectionName][modelName]) localCache[collectionName][modelName] = {};
	            localCache[collectionName][modelName][localId] = obj;
	        } else {
	            // Something has gone badly wrong here. Two objects should never exist with the same _id
	            if (localCacheById[localId] != obj) {
	                var message = 'Object with _id="' + localId.toString() + '" is already in the cache. ' +
	                    'This is a serious error. Please file a bug report if you are experiencing this out in the wild';
	                Logger.error(message);
	                throw new InternalSiestaError(message);
	            }
	        }
	    }
	    var idField = obj.idField;
	    var remoteId = obj[idField];
	    if (remoteId) {
	        remoteInsert(obj, remoteId);
	    } else {
	        if (Logger.debug.isEnabled)
	            Logger.debug('No remote id ("' + idField + '") so wont be placing in the remote cache', obj);
	    }
	}
	
	/**
	 * Returns true if object is in the cache
	 * @param  {ModelInstance} obj
	 * @return {boolean}
	 */
	function contains(obj) {
	    var q = {
	        _id: obj._id
	    };
	    var model = obj.model;
	    if (model.id) {
	        if (obj[model.id]) {
	            q.model = model;
	            q[model.id] = obj[model.id];
	        }
	    }
	    return !!get(q);
	}
	
	/**
	 * Removes the object from the cache (if it's actually in the cache) otherwises throws an error.
	 * @param  {ModelInstance} obj
	 * @throws {InternalSiestaError} If object already in the cache.
	 */
	function remove(obj) {
	    if (contains(obj)) {
	        var collectionName = obj.model.collectionName;
	        var modelName = obj.model.name;
	        var _id = obj._id;
	        if (!modelName) throw InternalSiestaError('No mapping name');
	        if (!collectionName) throw InternalSiestaError('No collection name');
	        if (!_id) throw InternalSiestaError('No _id');
	        delete localCache[collectionName][modelName][_id];
	        delete localCacheById[_id];
	        if (obj.model.id) {
	            var remoteId = obj[obj.model.id];
	            if (remoteId) {
	                delete remoteCache[collectionName][modelName][remoteId];
	            }
	        }
	    } else {
	        throw new InternalSiestaError('Object was not in cache.');
	    }
	}
	
	
	exports._remoteCache = _remoteCache;
	exports._localCache = _localCache;
	Object.defineProperty(exports, '_localCacheByType', {
	    get: function () {
	        return localCache;
	    }
	});
	exports.get = get;
	exports.insert = insert;
	exports.remoteInsert = remoteInsert;
	exports.reset = reset;
	exports._dump = dump;
	exports.contains = contains;
	exports.remove = remove;
	exports.getSingleton = getSingleton;

/***/ },
/* 33 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module mapping
	 */
	
	var log = __webpack_require__(45),
	    CollectionRegistry = __webpack_require__(30).CollectionRegistry,
	    InternalSiestaError = __webpack_require__(34).InternalSiestaError,
	    RelationshipType = __webpack_require__(36),
	    Query = __webpack_require__(43),
	    MappingOperation = __webpack_require__(47),
	    ModelInstance = __webpack_require__(46),
	    util = __webpack_require__(49),
	    cache = __webpack_require__(32),
	    store = __webpack_require__(48),
	    extend = __webpack_require__(70),
	    modelEvents = __webpack_require__(42),
	    events = __webpack_require__(35),
	    wrapArray = __webpack_require__(35).wrapArray,
	    proxy = __webpack_require__(41),
	    OneToManyProxy = __webpack_require__(40),
	    OneToOneProxy = __webpack_require__(39),
	    ManyToManyProxy = __webpack_require__(38),
	    ReactiveQuery = __webpack_require__(37),
	    ArrangedReactiveQuery = __webpack_require__(69),
	    _ = util._,
	    guid = util.guid,
	    ModelEventType = modelEvents.ModelEventType;
	
	var Logger = log.loggerWithName('Model');
	
	
	/**
	 *
	 * @param {Object} opts
	 */
	function Model(opts) {
	    var self = this;
	    this._opts = opts ? _.extend({}, opts) : {};
	
	    util.extendFromOpts(this, opts, {
	        methods: {},
	        attributes: [],
	        collection: function (c) {
	            if (util.isString(c)) {
	                c = CollectionRegistry[c];
	            }
	            return c;
	        },
	        id: 'id',
	        relationships: [],
	        name: null,
	        indexes: [],
	        singleton: false,
	        statics: this.installStatics.bind(this),
	        properties: {},
	        init: null,
	        remove: null
	    });
	
	
	    this.attributes = Model._processAttributes(this.attributes);
	
	    _.extend(this, {
	        _installed: false,
	        _relationshipsInstalled: false,
	        _reverseRelationshipsInstalled: false,
	        children: []
	    });
	
	    Object.defineProperties(this, {
	        _relationshipNames: {
	            get: function () {
	                return Object.keys(self.relationships);
	            },
	            enumerable: true
	        },
	        _attributeNames: {
	            get: function () {
	                var names = [];
	                if (self.id) {
	                    names.push(self.id);
	                }
	                _.each(self.attributes, function (x) {
	                    names.push(x.name)
	                });
	                return names;
	            },
	            enumerable: true,
	            configurable: true
	        },
	        installed: {
	            get: function () {
	                return self._installed && self._relationshipsInstalled && self._reverseRelationshipsInstalled;
	            },
	            enumerable: true,
	            configurable: true
	        },
	        descendants: {
	            get: function () {
	                return _.reduce(self.children, function (memo, descendant) {
	                    return Array.prototype.concat.call(memo, descendant.descendants);
	                }.bind(self), _.extend([], self.children));
	            },
	            enumerable: true
	        },
	        dirty: {
	            get: function () {
	                if (siesta.ext.storageEnabled) {
	                    var unsavedObjectsByCollection = siesta.ext.storage._unsavedObjectsByCollection,
	                        hash = (unsavedObjectsByCollection[this.collectionName] || {})[this.name] || {};
	                    return !!Object.keys(hash).length;
	                }
	                else return undefined;
	            },
	            enumerable: true
	        },
	        collectionName: {
	            get: function () {
	                return this.collection.name;
	            },
	            enumerable: true
	        }
	    });
	    events.ProxyEventEmitter.call(this, this.collectionName + ':' + this.name);
	
	
	}
	
	_.extend(Model, {
	    /**
	     * Normalise attributes passed via the options dictionary.
	     * @param attributes
	     * @returns {Array}
	     * @private
	     */
	    _processAttributes: function (attributes) {
	        return _.reduce(attributes, function (m, a) {
	            if (typeof a == 'string') {
	                m.push({
	                    name: a
	                });
	            }
	            else {
	                m.push(a);
	            }
	            return m;
	        }, [])
	    }
	});
	
	Model.prototype = Object.create(events.ProxyEventEmitter.prototype);
	
	_.extend(Model.prototype, {
	    installStatics: function (statics) {
	        if (statics) {
	            _.each(Object.keys(statics), function (staticName) {
	                if (this[staticName]) {
	                    Logger.error('Static method with name "' + staticName + '" already exists. Ignoring it.');
	                }
	                else {
	                    this[staticName] = statics[staticName].bind(this);
	                }
	            }.bind(this));
	        }
	        return statics;
	    },
	    /**
	     * Install relationships. Returns error in form of string if fails.
	     * @return {String|null}
	     */
	    installRelationships: function () {
	        if (!this._relationshipsInstalled) {
	            var self = this;
	            self._relationships = [];
	            if (self._opts.relationships) {
	                for (var name in self._opts.relationships) {
	                    if (self._opts.relationships.hasOwnProperty(name)) {
	                        var relationship = self._opts.relationships[name];
	                        // If a reverse relationship is installed beforehand, we do not want to process them.
	                        if (!relationship.isReverse) {
	                            if (Logger.debug.isEnabled)
	                                Logger.debug(self.name + ': configuring relationship ' + name, relationship);
	                            if (!relationship.type) {
	                                if (self.singleton) {
	                                    relationship.type = RelationshipType.OneToOne;
	                                }
	                                else {
	                                    relationship.type = RelationshipType.OneToMany;
	                                }
	                            }
	                            if (self.singleton && relationship.type == RelationshipType.ManyToMany) {
	                                return 'Singleton model cannot use ManyToMany relationship.';
	                            }
	                            if (relationship.type == RelationshipType.OneToMany ||
	                                relationship.type == RelationshipType.OneToOne ||
	                                relationship.type == RelationshipType.ManyToMany) {
	                                var modelName = relationship.model;
	                                delete relationship.model;
	                                var reverseModel;
	                                if (modelName instanceof Model) {
	                                    reverseModel = modelName;
	                                }
	                                else {
	                                    if (Logger.debug.isEnabled)
	                                        Logger.debug('reverseModelName', modelName);
	                                    if (!self.collection) throw new InternalSiestaError('Model must have collection');
	                                    var collection = self.collection;
	                                    if (!collection) {
	                                        throw new InternalSiestaError('Collection ' + self.collectionName + ' not registered');
	                                    }
	                                    reverseModel = collection[modelName];
	                                }
	
	                                if (!reverseModel) {
	                                    var arr = modelName.split('.');
	                                    if (arr.length == 2) {
	                                        var collectionName = arr[0];
	                                        modelName = arr[1];
	                                        var otherCollection = CollectionRegistry[collectionName];
	                                        if (!otherCollection) {
	                                            return 'Collection with name "' + collectionName + '" does not exist.';
	                                        }
	                                        reverseModel = otherCollection[modelName];
	                                    }
	                                }
	                                if (Logger.debug.isEnabled)
	                                    Logger.debug('reverseModel', reverseModel);
	                                if (reverseModel) {
	                                    relationship.reverseModel = reverseModel;
	                                    relationship.forwardModel = this;
	                                    relationship.forwardName = name;
	                                    relationship.reverseName = relationship.reverse || 'reverse_' + name;
	                                    delete relationship.reverse;
	                                    relationship.isReverse = false;
	                                } else {
	                                    return 'Model with name "' + modelName.toString() + '" does not exist';
	                                }
	                            } else {
	                                return 'Relationship type ' + relationship.type + ' does not exist';
	                            }
	                        }
	                    }
	                }
	            }
	            this._relationshipsInstalled = true;
	        } else {
	            throw new InternalSiestaError('Relationships for "' + this.name + '" have already been installed');
	        }
	        return null;
	    },
	    installReverseRelationships: function () {
	        if (!this._reverseRelationshipsInstalled) {
	            for (var forwardName in this.relationships) {
	                if (this.relationships.hasOwnProperty(forwardName)) {
	                    var relationship = this.relationships[forwardName];
	                    relationship = extend(true, {}, relationship);
	                    relationship.isReverse = true;
	                    var reverseModel = relationship.reverseModel,
	                        reverseName = relationship.reverseName;
	                    if (reverseModel.singleton) {
	                        if (relationship.type == RelationshipType.ManyToMany) return 'Singleton model cannot be related via reverse ManyToMany';
	                        if (relationship.type == RelationshipType.OneToMany) return 'Singleton model cannot be related via reverse OneToMany';
	                    }
	                    if (Logger.debug.isEnabled)
	                        Logger.debug(this.name + ': configuring  reverse relationship ' + reverseName);
	                    reverseModel.relationships[reverseName] = relationship;
	                }
	            }
	            this._reverseRelationshipsInstalled = true;
	        } else {
	            throw new InternalSiestaError('Reverse relationships for "' + this.name + '" have already been installed.');
	        }
	    },
	    _query: function (query) {
	        var query = new Query(this, query || {});
	        return query;
	    },
	    query: function (query, callback) {
	        if (!this.singleton) return (this._query(query)).execute(callback);
	        else {
	            var deferred = util.defer(callback);
	            callback = deferred.finish.bind(deferred);
	            (this._query({__ignoreInstalled: true})).execute(function (err, objs) {
	                if (err) callback(err);
	                else {
	                    // Cache a new singleton and then reexecute the query
	                    query = _.extend({}, query);
	                    query.__ignoreInstalled = true;
	                    if (!objs.length) {
	                        this.graph({}, function (err) {
	                            if (!err) {
	                                (this._query(query)).execute(callback);
	                            }
	                            else {
	                                callback(err);
	                            }
	                        }.bind(this));
	                    }
	                    else {
	                        (this._query(query)).execute(callback);
	                    }
	                }
	            }.bind(this));
	            return deferred.promise;
	        }
	    },
	    reactiveQuery: function (query) {
	        return new ReactiveQuery(new Query(this, query || {}));
	    },
	    arrangedReactiveQuery: function (query) {
	        return new ArrangedReactiveQuery(new Query(this, query || {}));
	    },
	    one: function (opts, cb) {
	        if (typeof opts == 'function') {
	            cb = opts;
	            opts = {};
	        }
	        var deferred = util.defer(cb);
	        cb = deferred.finish.bind(deferred);
	        this.query(opts, function (err, res) {
	            if (err) cb(err);
	            else {
	                if (res.length > 1) {
	                    cb('More than one instance returned when executing get query!');
	                }
	                else {
	                    res = res.length ? res[0] : null;
	                    cb(null, res);
	                }
	            }
	        });
	        return deferred.promise;
	    },
	    all: function (q, cb) {
	        if (typeof q == 'function') {
	            cb = q;
	            q = {};
	        }
	        q = q || {};
	        var query = {};
	        if (q.__order) query.__order = q.__order;
	        return this.query(q, cb);
	    },
	    install: function (callback) {
	        if (Logger.info.isEnabled) Logger.info('Installing mapping ' + this.name);
	        var deferred = util.defer(callback);
	        callback = deferred.finish.bind(deferred);
	        if (!this._installed) {
	            this._installed = true;
	            callback();
	        } else {
	            throw new InternalSiestaError('Model "' + this.name + '" has already been installed');
	        }
	        return deferred.promise;
	    },
	    /**
	     * Map data into Siesta.
	     *
	     * @param data Raw data received remotely or otherwise
	     * @param {function|object} [opts]
	     * @param {boolean} opts.override
	     * @param {boolean} opts._ignoreInstalled - An escape clause that allows mapping onto Models even if install process has not finished.
	     * @param {function} [callback] Called once pouch persistence returns.
	     */
	    graph: function (data, opts, callback) {
	        if (typeof opts == 'function') callback = opts;
	        opts = opts || {};
	        var deferred = util.defer(callback);
	        var _map = function () {
	            var overrides = opts.override;
	            if (overrides) {
	                if (util.isArray(overrides)) opts.objects = overrides;
	                else opts.objects = [overrides];
	            }
	            delete opts.override;
	            if (util.isArray(data)) {
	                this._mapBulk(data, opts, deferred.finish.bind(deferred));
	            } else {
	                this._mapBulk([data], opts, function (err, objects) {
	                    var obj;
	                    if (objects) {
	                        if (objects.length) {
	                            obj = objects[0];
	                        }
	                    }
	                    deferred.finish(err ? (util.isArray(err) ? err[0] : err) : null, obj);
	                });
	            }
	        }.bind(this);
	        if (opts._ignoreInstalled) {
	            _map();
	        }
	        else siesta._afterInstall(_map);
	        return deferred.promise;
	    },
	    _mapBulk: function (data, opts, callback) {
	        _.extend(opts, {model: this, data: data});
	        var op = new MappingOperation(opts);
	        op.start(function (err, objects) {
	            if (err) {
	                if (callback) callback(err);
	            } else {
	                callback(null, objects || []);
	            }
	        });
	    },
	    _countCache: function () {
	        var collCache = cache._localCacheByType[this.collectionName] || {};
	        var modelCache = collCache[this.name] || {};
	        return _.reduce(Object.keys(modelCache), function (m, _id) {
	            m[_id] = {};
	            return m;
	        }, {});
	    },
	    count: function (callback) {
	        var deferred = util.defer(callback);
	        callback = deferred.finish.bind(deferred);
	        var hash = this._countCache();
	        callback(null, Object.keys(hash).length);
	        return deferred.promise;
	    },
	    /**
	     * Convert raw data into a ModelInstance
	     * @returns {ModelInstance}
	     * @private
	     */
	    _new: function (data, shouldRegisterChange) {
	        shouldRegisterChange = shouldRegisterChange === undefined ? true : shouldRegisterChange;
	        if (this.installed) {
	            var self = this;
	            var _id;
	            if (data) {
	                _id = data._id ? data._id : guid();
	            } else {
	                _id = guid();
	            }
	            var newModel = new ModelInstance(this);
	            if (Logger.info.isEnabled)
	                Logger.info('New object created _id="' + _id.toString() + '", type=' + this.name, data);
	            newModel._id = _id;
	            // Place attributes on the object.
	            var values = {};
	            newModel.__values = values;
	            var defaults = _.reduce(this.attributes, function (m, a) {
	                if (a.default !== undefined) {
	                    m[a.name] = a.default;
	                }
	                return m;
	            }, {});
	            _.extend(values, defaults);
	            if (data) _.extend(values, data);
	            var fields = this._attributeNames;
	            var idx = fields.indexOf(this.id);
	            if (idx > -1) {
	                fields.splice(idx, 1);
	            }
	            _.each(fields, function (field) {
	                Object.defineProperty(newModel, field, {
	                    get: function () {
	                        var value = newModel.__values[field];
	                        return value === undefined ? null : value;
	                    },
	                    set: function (v) {
	                        var old = newModel.__values[field];
	                        var propertyDependencies = this._propertyDependencies[field];
	                        propertyDependencies = _.map(propertyDependencies, function (dependant) {
	                            return {
	                                prop: dependant,
	                                old: this[dependant]
	                            }
	                        }.bind(this));
	                        newModel.__values[field] = v;
	                        propertyDependencies.forEach(function (dep) {
	                            var propertyName = dep.prop;
	                            var new_ = this[propertyName];
	                            modelEvents.emit({
	                                collection: self.collectionName,
	                                model: self.name,
	                                _id: newModel._id,
	                                new: new_,
	                                old: dep.old,
	                                type: ModelEventType.Set,
	                                field: propertyName,
	                                obj: newModel
	                            });
	                        }.bind(this));
	                        var e = {
	                            collection: self.collectionName,
	                            model: self.name,
	                            _id: newModel._id,
	                            new: v,
	                            old: old,
	                            type: ModelEventType.Set,
	                            field: field,
	                            obj: newModel
	                        };
	                        window.lastEmission = e;
	                        modelEvents.emit(e);
	                        if (util.isArray(v)) {
	                            wrapArray(v, field, newModel);
	                        }
	                    },
	                    enumerable: true,
	                    configurable: true
	                });
	            });
	
	            _.each(Object.keys(this.methods), function (methodName) {
	                if (newModel[methodName] === undefined) {
	                    newModel[methodName] = this.methods[methodName].bind(newModel);
	                }
	                else {
	                    Logger.error('A method with name "' + methodName + '" already exists. Ignoring it.');
	                }
	            }.bind(this));
	
	            var _propertyNames = Object.keys(this.properties),
	                _propertyDependencies = {};
	            _.each(_propertyNames, function (propName) {
	                var propDef = this.properties[propName];
	                var dependencies = propDef.dependencies || [];
	                dependencies.forEach(function (attr) {
	                    if (!_propertyDependencies[attr]) _propertyDependencies[attr] = [];
	                    _propertyDependencies[attr].push(propName);
	                });
	                delete propDef.dependencies;
	                if (newModel[propName] === undefined) {
	                    Object.defineProperty(newModel, propName, propDef);
	                }
	                else {
	                    Logger.error('A property/method with name "' + propName + '" already exists. Ignoring it.');
	                }
	            }.bind(this));
	
	            newModel._propertyDependencies = _propertyDependencies;
	
	            Object.defineProperty(newModel, this.id, {
	                get: function () {
	                    return newModel.__values[self.id] || null;
	                },
	                set: function (v) {
	                    var old = newModel[self.id];
	                    newModel.__values[self.id] = v;
	                    modelEvents.emit({
	                        collection: self.collectionName,
	                        model: self.name,
	                        _id: newModel._id,
	                        new: v,
	                        old: old,
	                        type: ModelEventType.Set,
	                        field: self.id,
	                        obj: newModel
	                    });
	                    cache.remoteInsert(newModel, v, old);
	                },
	                enumerable: true,
	                configurable: true
	            });
	            for (var name in this.relationships) {
	                var proxy;
	                if (this.relationships.hasOwnProperty(name)) {
	                    var relationshipOpts = _.extend({}, this.relationships[name]),
	                        type = relationshipOpts.type;
	                    delete relationshipOpts.type;
	                    if (type == RelationshipType.OneToMany) {
	                        proxy = new OneToManyProxy(relationshipOpts);
	                    } else if (type == RelationshipType.OneToOne) {
	                        proxy = new OneToOneProxy(relationshipOpts);
	                    } else if (type == RelationshipType.ManyToMany) {
	                        proxy = new ManyToManyProxy(relationshipOpts);
	                    } else {
	                        throw new InternalSiestaError('No such relationship type: ' + type);
	                    }
	                }
	                proxy.install(newModel);
	            }
	            cache.insert(newModel);
	            if (shouldRegisterChange) {
	                modelEvents.emit({
	                    collection: this.collectionName,
	                    model: this.name,
	                    _id: newModel._id,
	                    new: newModel,
	                    type: ModelEventType.New,
	                    obj: newModel
	                });
	            }
	            return newModel;
	        } else {
	            throw new InternalSiestaError('Model must be fully installed before creating any models');
	        }
	
	    },
	    _dump: function (asJSON) {
	        var dumped = {};
	        dumped.name = this.name;
	        dumped.attributes = this.attributes;
	        dumped.id = this.id;
	        dumped.collection = this.collectionName;
	        dumped.relationships = _.map(this.relationships, function (r) {
	            return r.isForward ? r.forwardName : r.reverseName;
	        });
	        return asJSON ? util.prettyPrint(dumped) : dumped;
	    },
	    toString: function () {
	        return 'Model[' + this.name + ']';
	    }
	
	});
	
	
	
	//
	//_.extend(Model.prototype, {
	//    listen: function (fn) {
	//        events.on(this.collectionName + ':' + this.name, fn);
	//        return function () {
	//            this.removeListener(fn);
	//        }.bind(this);
	//    },
	//    listenOnce: function (fn) {
	//        return events.once(this.collectionName + ':' + this.name, fn);
	//    },
	//    removeListener: function (fn) {
	//        return events.removeListener(this.collectionName + ':' + this.name, fn);
	//    }
	//});
	//
	//// Aliases
	//_.extend(Model.prototype, {
	//    on: Model.prototype.listen
	//});
	
	// Subclassing
	_.extend(Model.prototype, {
	    child: function (nameOrOpts, opts) {
	        if (typeof nameOrOpts == 'string') {
	            opts.name = nameOrOpts;
	        } else {
	            opts = name;
	        }
	        _.extend(opts, {
	            attributes: Array.prototype.concat.call(opts.attributes || [], this._opts.attributes),
	            relationships: _.extend(opts.relationships || {}, this._opts.relationships),
	            methods: _.extend(_.extend({}, this._opts.methods) || {}, opts.methods),
	            statics: _.extend(_.extend({}, this._opts.statics) || {}, opts.statics),
	            properties: _.extend(_.extend({}, this._opts.properties) || {}, opts.properties),
	            id: opts.id || this._opts.id,
	            init: opts.init || this._opts.init,
	            remove: opts.remove || this._opts.remove
	        });
	        var model = this.collection.model(opts.name, opts);
	        model.parent = this;
	        this.children.push(model);
	        return model;
	    },
	    isChildOf: function (parent) {
	        return this.parent == parent;
	    },
	    isParentOf: function (child) {
	        return this.children.indexOf(child) > -1;
	    },
	    isDescendantOf: function (ancestor) {
	        var parent = this.parent;
	        while (parent) {
	            if (parent == ancestor) return true;
	            parent = parent.parent;
	        }
	        return false;
	    },
	    isAncestorOf: function (descendant) {
	        return this.descendants.indexOf(descendant) > -1;
	    },
	    hasAttributeNamed: function (attributeName) {
	        return this._attributeNames.indexOf(attributeName) > -1;
	    }
	});
	
	_.extend(Model.prototype, {
	    paginator: function (opts) {
	        if (siesta.ext.httpEnabled) {
	            var Paginator = siesta.ext.http.Paginator;
	            opts = opts || {};
	            opts.model = this;
	            return new Paginator(opts);
	        }
	    }
	});
	
	module.exports = Model;


/***/ },
/* 34 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module error
	 */
	
	
	/**
	 * Represents internal errors. These are thrown when something has gone very wrong internally. If you see one of these
	 * out in the wild you probably need to file a bug report as it means some assertion has failed.
	 * @param message
	 * @param context
	 * @param ssf
	 * @constructor
	 */
	function InternalSiestaError(message, context, ssf) {
	    this.message = message;
	    this.context = context;
	    // capture stack trace
	    ssf = ssf || arguments.callee;
	    if (ssf && Error.captureStackTrace) {
	        Error.captureStackTrace(this, ssf);
	    }
	}
	
	InternalSiestaError.prototype = Object.create(Error.prototype);
	InternalSiestaError.prototype.name = 'InternalSiestaError';
	InternalSiestaError.prototype.constructor = InternalSiestaError;
	
	
	/**
	 * Fields on error objects dished out by Siesta.
	 * @type {Object}
	 */
	var ErrorField = {
	        Message: 'message',
	        Code: 'code'
	    },
	    /**
	     * Enumerated errors.
	     * @type {Object}
	     */
	    ErrorCode = {
	        Unknown: 0,
	        // If no descriptor matches a HTTP response/request then this error is
	        NoDescriptorMatched: 1
	    },
	
	    Components = {
	        Mapping: 'Mapping',
	        HTTP: 'HTTP',
	        ReactiveQuery: 'ReactiveQuery',
	        ArrangedReactiveQuery: 'ArrangedReactiveQuery',
	        Collection: 'Collection',
	        Query: 'Query'
	    };
	
	
	/**
	 * @param component
	 * @param message
	 * @param extra
	 * @constructor
	 */
	function SiestaUserError(component, message, extra) {
	    extra = extra || {};
	    this.component = component;
	    this.message = message;
	    for (var prop in extra) {
	        if (extra.hasOwnProperty(prop)) {
	            this[prop] = extra[prop];
	        }
	    }
	    this.isUserError = true;
	}
	
	/**
	 * Map error codes onto descriptive messages.
	 * @type {Object}
	 */
	var Message = {};
	Message[ErrorCode.NoDescriptorMatched] = 'No descriptor matched the HTTP response/request.';
	
	module.exports = {
	    InternalSiestaError: InternalSiestaError,
	    SiestaUserError: SiestaUserError,
	    ErrorCode: ErrorCode,
	    ErrorField: ErrorField,
	    Message: Message,
	    Components: Components,
	    errorFactory: function (component) {
	        if (component in Components) {
	            return function (message, extra) {
	                return new SiestaUserError(component, message, extra);
	            }
	        }
	
	        else {
	            throw new SiestaUserError('No such component "' + component + '"');
	        }
	    }
	};

/***/ },
/* 35 */
/***/ function(module, exports, __webpack_require__) {

	var EventEmitter = __webpack_require__(82).EventEmitter,
	    ArrayObserver = __webpack_require__(71).ArrayObserver,
	    _ = __webpack_require__(49)._,
	    modelEvents = __webpack_require__(42);
	
	var events = new EventEmitter();
	events.setMaxListeners(100);
	
	/**
	 * Listen to a particular event from the Siesta global EventEmitter.
	 * Manages its own set of listeners.
	 * @constructor
	 */
	function ProxyEventEmitter(event) {
	    _.extend(this, {
	        event: event,
	        listeners: {}
	    });
	}
	
	_.extend(ProxyEventEmitter.prototype, {
	    listen: function (type, fn) {
	        if (typeof type == 'function') {
	            fn = type;
	            type = null;
	        }
	        else {
	            var _fn = fn;
	            fn = function (e) {
	                e = e || {};
	                if (type) {
	                    if (e.type == type) {
	                        _fn(e);
	                    }
	                }
	                else {
	                    _fn(e);
	                }
	            };
	            var listeners = this.listeners;
	            if (type) {
	                if (!listeners[type]) listeners[type] = [];
	                listeners[type].push(fn);
	            }
	        }
	        events.on(this.event, fn);
	        return function () {
	            this._removeListener(fn, type);
	        }.bind(this);
	    },
	    listenOnce: function (type, fn) {
	        var event = this.event;
	        if (typeof type == 'function') {
	            fn = type;
	            type = null;
	        }
	        else {
	            var _fn = fn;
	            fn = function (e) {
	                e = e || {};
	                if (type) {
	                    if (e.type == type) {
	                        events.removeListener(event, fn);
	                        _fn(e);
	                    }
	                }
	                else {
	                    _fn(e);
	                }
	            }
	        }
	        if (type) {
	            return events.on(event, fn);
	        }
	        else {
	            return events.once(event, fn);
	        }
	    },
	    _removeListener: function (fn, type) {
	        if (type) {
	            var listeners = this.listeners[type],
	                idx = listeners.indexOf(fn);
	            listeners.splice(idx, 1);
	        }
	        return events.removeListener(this.event, fn);
	    },
	    emit: function (type, payload) {
	        if (typeof type == 'object') {
	            payload = type;
	            type = null;
	        }
	        else {
	            payload = payload || {};
	            payload.type = type;
	        }
	        events.emit.call(events, this.event, payload);
	    },
	    _removeAllListeners: function (type) {
	        (this.listeners[type] || []).forEach(function (fn) {
	            events.removeListener(this.event, fn);
	        }.bind(this));
	        this.listeners[type] = [];
	    },
	    removeAllListeners: function (type) {
	        if (type) {
	            this._removeAllListeners(type);
	        }
	        else {
	            for (type in this.listeners) {
	                if (this.listeners.hasOwnProperty(type)) {
	                    this._removeAllListeners(type);
	                }
	            }
	        }
	    }
	});
	
	// Aliases
	_.extend(ProxyEventEmitter.prototype, {
	    on: ProxyEventEmitter.prototype.listen
	});
	
	_.extend(events, {
	    ProxyEventEmitter: ProxyEventEmitter,
	    wrapArray: function (array, field, modelInstance) {
	        if (!array.observer) {
	            array.observer = new ArrayObserver(array);
	            array.observer.open(function (splices) {
	                var fieldIsAttribute = modelInstance._attributeNames.indexOf(field) > -1;
	                if (fieldIsAttribute) {
	                    splices.forEach(function (splice) {
	                        modelEvents.emit({
	                            collection: modelInstance.collectionName,
	                            model: modelInstance.model.name,
	                            _id: modelInstance._id,
	                            index: splice.index,
	                            removed: splice.removed,
	                            added: splice.addedCount ? array.slice(splice.index, splice.index + splice.addedCount) : [],
	                            type: modelEvents.ModelEventType.Splice,
	                            field: field,
	                            obj: modelInstance
	                        });
	                    });
	                }
	            });
	        }
	    }
	});
	
	module.exports = events;

/***/ },
/* 36 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module relationship
	 */
	
	module.exports = {
	    OneToMany: 'OneToMany',
	    OneToOne: 'OneToOne',
	    ManyToMany: 'ManyToMany'
	};

/***/ },
/* 37 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * For those familiar with Apple's Cocoa library, reactive queries roughly map onto NSFetchedResultsController.
	 *
	 * They present a query set that 'reacts' to changes in the underlying data.
	 * @module reactiveQuery
	 */
	
	var log = __webpack_require__(45),
	    Query = __webpack_require__(43),
	    EventEmitter = __webpack_require__(82).EventEmitter,
	    events = __webpack_require__(35),
	    modelEvents = __webpack_require__(42),
	    InternalSiestaError = __webpack_require__(34).InternalSiestaError,
	    constructQuerySet = __webpack_require__(44),
	    util = __webpack_require__(49),
	    _ = util._;
	
	var Logger = log.loggerWithName('Query');
	
	/**
	 *
	 * @param {Query} query - The underlying query
	 * @constructor
	 */
	function ReactiveQuery(query) {
	    var self = this;
	    EventEmitter.call(this);
	
	    _.extend(this, {
	        _query: query,
	        results: constructQuerySet([], query.model),
	        insertionPolicy: ReactiveQuery.InsertionPolicy.Back,
	        initialised: false
	    });
	
	    Object.defineProperties(this, {
	        initialized: {get: function () {return this.initialised}},
	        model: {get: function () { return self._query.model }},
	        collection: {get: function () { return self.model.collectionName }}
	    });
	}
	
	ReactiveQuery.prototype = Object.create(EventEmitter.prototype);
	
	_.extend(ReactiveQuery, {
	    InsertionPolicy: {
	        Front: 'Front',
	        Back: 'Back'
	    }
	});
	
	_.extend(ReactiveQuery.prototype, {
	    init: function (cb) {
	        if (Logger.trace) Logger.trace('init');
	        var deferred = util.defer(cb);
	        cb = deferred.finish.bind(deferred);
	        if (!this.initialised) {
	            this._query.execute(function (err, results) {
	                if (!err) {
	                    this.results = results;
	                    if (!this.handler) {
	                        var name = this._constructNotificationName();
	                        var handler = function (n) {
	                            this._handleNotif(n);
	                        }.bind(this);
	                        this.handler = handler;
	                        events.on(name, handler);
	                    }
	                    if (Logger.trace) Logger.trace('Listening to ' + name);
	                    this.initialised = true;
	                    cb(null, this.results);
	                }
	                else {
	                    cb(err);
	                }
	            }.bind(this));
	        }
	        else {
	            cb(null, this.results);
	        }
	        return deferred.promise;
	    },
	    insert: function (newObj) {
	        var results = this.results.mutableCopy();
	        if (this.insertionPolicy == ReactiveQuery.InsertionPolicy.Back) {
	            var idx = results.push(newObj);
	        }
	        else {
	            idx = results.unshift(newObj);
	        }
	        this.results = results.asModelQuerySet(this.model);
	        return idx;
	    },
	    _handleNotif: function (n) {
	        if (Logger.trace) Logger.trace('_handleNotif', n);
	        if (n.type == modelEvents.ModelEventType.New) {
	            var newObj = n.new;
	            if (this._query.objectMatchesQuery(newObj)) {
	                if (Logger.trace) Logger.trace('New object matches', newObj._dumpString());
	                var idx = this.insert(newObj);
	                this.emit('change', {
	                    index: idx,
	                    added: [newObj],
	                    type: modelEvents.ModelEventType.Splice,
	                    obj: this
	                });
	            }
	            else {
	                if (Logger.trace) Logger.trace('New object does not match', newObj._dumpString());
	            }
	        }
	        else if (n.type == modelEvents.ModelEventType.Set) {
	            newObj = n.obj;
	            var index = this.results.indexOf(newObj),
	                alreadyContains = index > -1,
	                matches = this._query.objectMatchesQuery(newObj);
	            if (matches && !alreadyContains) {
	                if (Logger.trace) Logger.trace('Updated object now matches!', newObj._dumpString());
	                idx = this.insert(newObj);
	                this.emit('change', {
	                    index: idx,
	                    added: [newObj],
	                    type: modelEvents.ModelEventType.Splice,
	                    obj: this
	                });
	            }
	            else if (!matches && alreadyContains) {
	                if (Logger.trace) Logger.trace('Updated object no longer matches!', newObj._dumpString());
	                results = this.results.mutableCopy();
	                var removed = results.splice(index, 1);
	                this.results = results.asModelQuerySet(this.model);
	                this.emit('change', {
	                    index: index,
	                    obj: this,
	                    new: newObj,
	                    type: modelEvents.ModelEventType.Splice,
	                    removed: removed
	                });
	            }
	            else if (!matches && !alreadyContains) {
	                if (Logger.trace) Logger.trace('Does not contain, but doesnt match so not inserting', newObj._dumpString());
	            }
	            else if (matches && alreadyContains) {
	                if (Logger.trace) Logger.trace('Matches but already contains', newObj._dumpString());
	                // Send the notification over. 
	                this.emit('change', n);
	            }
	        }
	        else if (n.type == modelEvents.ModelEventType.Remove) {
	            newObj = n.obj;
	            var results = this.results.mutableCopy();
	            index = results.indexOf(newObj);
	            if (index > -1) {
	                if (Logger.trace) Logger.trace('Removing object', newObj._dumpString());
	                removed = results.splice(index, 1);
	                this.results = constructQuerySet(results, this.model);
	                this.emit('change', {
	                    index: index,
	                    obj: this,
	                    type: modelEvents.ModelEventType.Splice,
	                    removed: removed
	                });
	            }
	            else {
	                if (Logger.trace) Logger.trace('No modelEvents neccessary.', newObj._dumpString());
	            }
	        }
	        else {
	            throw new InternalSiestaError('Unknown change type "' + n.type.toString() + '"')
	        }
	        this.results = constructQuerySet(this._query._sortResults(this.results), this.model);
	    },
	    _constructNotificationName: function () {
	        return this.model.collectionName + ':' + this.model.name;
	    },
	    terminate: function () {
	        if (this.handler) {
	            events.removeListener(this._constructNotificationName(), this.handler);
	        }
	        this.results = null;
	        this.handler = null;
	    },
	    listen: function (fn) {
	        this.on('change', fn);
	        return function () {
	            this.removeListener('change', fn);
	        }.bind(this);
	    },
	    listenOnce: function (fn) {
	        this.once('change', fn);
	    }
	});
	
	module.exports = ReactiveQuery;

/***/ },
/* 38 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module relationships
	 */
	
	var RelationshipProxy = __webpack_require__(41),
	    Store = __webpack_require__(48),
	    util = __webpack_require__(49),
	    _ = util._,
	    InternalSiestaError = __webpack_require__(34).InternalSiestaError,
	    modelEvents = __webpack_require__(42),
	    events = __webpack_require__(35),
	    wrapArrayForAttributes = events.wrapArray,
	    SiestaModel = __webpack_require__(46),
	    ArrayObserver = __webpack_require__(71).ArrayObserver,
	    ModelEventType = __webpack_require__(42).ModelEventType;
	
	/**
	 * [ManyToManyProxy description]
	 * @param {Object} opts
	 */
	function ManyToManyProxy(opts) {
	    RelationshipProxy.call(this, opts);
	    this.related = [];
	    this.relatedCancelListeners = {};
	}
	
	ManyToManyProxy.prototype = Object.create(RelationshipProxy.prototype);
	
	_.extend(ManyToManyProxy.prototype, {
	    clearReverse: function (removed) {
	        var self = this;
	        _.each(removed, function (removedObject) {
	            var reverseProxy = self.reverseProxyForInstance(removedObject);
	            var idx = reverseProxy.related.indexOf(self.object);
	            reverseProxy.makeChangesToRelatedWithoutObservations(function () {
	                reverseProxy.splice(idx, 1);
	            });
	        });
	    },
	    setReverseOfAdded: function (added) {
	        var self = this;
	        _.each(added, function (addedObject) {
	            var reverseProxy = self.reverseProxyForInstance(addedObject);
	            reverseProxy.makeChangesToRelatedWithoutObservations(function () {
	                reverseProxy.splice(0, 0, self.object);
	            });
	        });
	    },
	    wrapArray: function (arr) {
	        var self = this;
	        wrapArrayForAttributes(arr, this.reverseName, this.object);
	        if (!arr.arrayObserver) {
	            arr.arrayObserver = new ArrayObserver(arr);
	            var observerFunction = function (splices) {
	                splices.forEach(function (splice) {
	                    var added = splice.addedCount ? arr.slice(splice.index, splice.index + splice.addedCount) : [];
	                    var removed = splice.removed;
	                    self.clearReverse(removed);
	                    self.setReverseOfAdded(added);
	                    var model = self.getForwardModel();
	                    modelEvents.emit({
	                        collection: model.collectionName,
	                        model: model.name,
	                        _id: self.object._id,
	                        field: self.getForwardName(),
	                        removed: removed,
	                        added: added,
	                        type: ModelEventType.Splice,
	                        index: splice.index,
	                        obj: self.object
	                    });
	                });
	            };
	            arr.arrayObserver.open(observerFunction);
	        }
	    },
	    get: function (callback) {
	        var deferred = util.defer(callback);
	        callback = deferred.finish.bind(deferred);
	        callback(null, this.related);
	        return deferred.promise;
	    },
	    validate: function (obj) {
	        if (Object.prototype.toString.call(obj) != '[object Array]') {
	            return 'Cannot assign scalar to many to many';
	        }
	        return null;
	    },
	    set: function (obj, opts) {
	        this.checkInstalled();
	        var self = this;
	        if (obj) {
	            var errorMessage;
	            if (errorMessage = this.validate(obj)) {
	                return errorMessage;
	            }
	            else {
	                this.clearReverseRelated(opts);
	                self.setIdAndRelated(obj, opts);
	                this.wrapArray(obj);
	                self.setIdAndRelatedReverse(obj, opts);
	            }
	        }
	        else {
	            this.clearReverseRelated(opts);
	            self.setIdAndRelated(obj, opts);
	        }
	    },
	    install: function (obj) {
	        RelationshipProxy.prototype.install.call(this, obj);
	        this.wrapArray(this.related);
	        obj[('splice' + util.capitaliseFirstLetter(this.reverseName))] = _.bind(this.splice, this);
	    },
	    registerRemovalListener: function (obj) {
	        this.relatedCancelListeners[obj._id] = obj.listen(function (e) {
	
	        }.bind(this));
	    }
	});
	
	
	module.exports = ManyToManyProxy;

/***/ },
/* 39 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module relationships
	 */
	
	var RelationshipProxy = __webpack_require__(41),
	    Store = __webpack_require__(48),
	    util = __webpack_require__(49),
	    _ = util._,
	    InternalSiestaError = __webpack_require__(34).InternalSiestaError,
	    ModelEventType = __webpack_require__(42).ModelEventType,
	    SiestaModel = __webpack_require__(46);
	
	/**
	 * [OneToOneProxy description]
	 * @param {Object} opts
	 */
	function OneToOneProxy(opts) {
	    RelationshipProxy.call(this, opts);
	}
	
	
	OneToOneProxy.prototype = Object.create(RelationshipProxy.prototype);
	
	_.extend(OneToOneProxy.prototype, {
	    /**
	     * Validate the object that we're setting
	     * @param obj
	     * @returns {string|null} An error message or null
	     */
	    validate: function (obj) {
	        if (Object.prototype.toString.call(obj) == '[object Array]') {
	            return 'Cannot assign array to one to one relationship';
	        }
	        else if ((!obj instanceof SiestaModel)) {
	
	        }
	        return null;
	    },
	    set: function (obj, opts) {
	        this.checkInstalled();
	        if (obj) {
	            var errorMessage;
	            if (errorMessage = this.validate(obj)) {
	                return errorMessage;
	            }
	            else {
	                this.clearReverseRelated(opts);
	                this.setIdAndRelated(obj, opts);
	                this.setIdAndRelatedReverse(obj, opts);
	            }
	        }
	        else {
	            this.clearReverseRelated(opts);
	            this.setIdAndRelated(obj, opts);
	        }
	    },
	    get: function (callback) {
	        var deferred = util.defer(callback);
	        callback = deferred.finish.bind(deferred);
	        callback(null, this.related);
	        return deferred.promise;
	    }
	});
	
	
	module.exports = OneToOneProxy;

/***/ },
/* 40 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module relationships
	 */
	
	var RelationshipProxy = __webpack_require__(41),
	    Store = __webpack_require__(48),
	    util = __webpack_require__(49),
	    _ = util._,
	    InternalSiestaError = __webpack_require__(34).InternalSiestaError,
	    modelEvents = __webpack_require__(42),
	    SiestaModel = __webpack_require__(46),
	    events = __webpack_require__(35),
	    wrapArrayForAttributes = events.wrapArray,
	    ArrayObserver = __webpack_require__(71).ArrayObserver,
	    ModelEventType = __webpack_require__(42).ModelEventType;
	
	/**
	 * @class  [OneToManyProxy description]
	 * @constructor
	 * @param {[type]} opts
	 */
	function OneToManyProxy(opts) {
	    RelationshipProxy.call(this, opts);
	    if (this.isReverse) this.related = [];
	}
	
	OneToManyProxy.prototype = Object.create(RelationshipProxy.prototype);
	
	_.extend(OneToManyProxy.prototype, {
	    clearReverse: function (removed) {
	        var self = this;
	        _.each(removed, function (removedObject) {
	            var reverseProxy = self.reverseProxyForInstance(removedObject);
	            reverseProxy.setIdAndRelated(null);
	        });
	    },
	    setReverseOfAdded: function (added) {
	        var self = this;
	        _.each(added, function (added) {
	            var forwardProxy = self.reverseProxyForInstance(added);
	            forwardProxy.setIdAndRelated(self.object);
	        });
	    },
	    wrapArray: function (arr) {
	        var self = this;
	        wrapArrayForAttributes(arr, this.reverseName, this.object);
	        if (!arr.arrayObserver) {
	            arr.arrayObserver = new ArrayObserver(arr);
	            var observerFunction = function (splices) {
	                splices.forEach(function (splice) {
	                    var added = splice.addedCount ? arr.slice(splice.index, splice.index + splice.addedCount) : [];
	                    var removed = splice.removed;
	                    self.clearReverse(removed);
	                    self.setReverseOfAdded(added);
	                    var model = self.getForwardModel();
	                    modelEvents.emit({
	                        collection: model.collectionName,
	                        model: model.name,
	                        _id: self.object._id,
	                        field: self.getForwardName(),
	                        removed: removed,
	                        added: added,
	                        type: ModelEventType.Splice,
	                        index: splice.index,
	                        obj: self.object
	                    });
	                });
	            };
	            arr.arrayObserver.open(observerFunction);
	        }
	    },
	    get: function (callback) {
	        var deferred = util.defer(callback);
	        callback = deferred.finish.bind(deferred);
	        callback(null, this.related);
	        return deferred.promise;
	    },
	    /**
	     * Validate the object that we're setting
	     * @param obj
	     * @returns {string|null} An error message or null
	     * @class OneToManyProxy
	     */
	    validate: function (obj) {
	        var str = Object.prototype.toString.call(obj);
	        if (this.isForward) {
	            if (str == '[object Array]') {
	                return 'Cannot assign array forward oneToMany (' + str + '): ' + this.forwardName;
	            }
	        }
	        else {
	            if (str != '[object Array]') {
	                return 'Cannot scalar to reverse oneToMany (' + str + '): ' + this.reverseName;
	            }
	        }
	        return null;
	    },
	    set: function (obj, opts) {
	        this.checkInstalled();
	        var self = this;
	        if (obj) {
	            var errorMessage;
	            if (errorMessage = this.validate(obj)) {
	                return errorMessage;
	            }
	            else {
	                this.clearReverseRelated(opts);
	                self.setIdAndRelated(obj, opts);
	                if (self.isReverse) {
	                    this.wrapArray(self.related);
	                }
	                self.setIdAndRelatedReverse(obj, opts);
	            }
	        }
	        else {
	            this.clearReverseRelated(opts);
	            self.setIdAndRelated(obj, opts);
	        }
	    },
	    install: function (obj) {
	        RelationshipProxy.prototype.install.call(this, obj);
	
	        if (this.isReverse) {
	            obj[('splice' + util.capitaliseFirstLetter(this.reverseName))] = _.bind(this.splice, this);
	            this.wrapArray(this.related);
	        }
	
	    }
	});
	
	
	module.exports = OneToManyProxy;

/***/ },
/* 41 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Base functionality for relationships.
	 * @module relationships
	 */
	
	var InternalSiestaError = __webpack_require__(34).InternalSiestaError,
	    Store = __webpack_require__(48),
	    util = __webpack_require__(49),
	    _ = util._,
	    Query = __webpack_require__(43),
	    log = __webpack_require__(45),
	    cache = __webpack_require__(32),
	    events = __webpack_require__(35),
	    wrapArrayForAttributes = events.wrapArray,
	    ArrayObserver = __webpack_require__(71).ArrayObserver,
	    modelEvents = __webpack_require__(42),
	    ModelEventType = modelEvents.ModelEventType;
	
	/**
	 * @class  [RelationshipProxy description]
	 * @param {Object} opts
	 * @constructor
	 */
	function RelationshipProxy(opts) {
	    var self = this;
	    opts = opts || {};
	
	    _.extend(this, {
	        object: null,
	        related: null
	    });
	
	    Object.defineProperties(this, {
	        isForward: {
	            get: function () {
	                return !self.isReverse;
	            },
	            set: function (v) {
	                self.isReverse = !v;
	            },
	            enumerable: true
	        }
	    });
	
	    util.extendFromOpts(this, opts, {
	        reverseModel: null,
	        forwardModel: null,
	        forwardName: null,
	        reverseName: null,
	        isReverse: null
	    });
	
	    this.cancelListens = {};
	}
	
	_.extend(RelationshipProxy, {});
	
	_.extend(RelationshipProxy.prototype, {
	    /**
	     * Install this proxy on the given instance
	     * @param {ModelInstance} modelInstance
	     */
	    install: function (modelInstance) {
	        if (modelInstance) {
	            if (!this.object) {
	                this.object = modelInstance;
	                var self = this;
	                var name = this.getForwardName();
	                Object.defineProperty(modelInstance, name, {
	                    get: function () {
	                        return self.related;
	                    },
	                    set: function (v) {
	                        self.set(v);
	                    },
	                    configurable: true,
	                    enumerable: true
	                });
	                if (!modelInstance.__proxies) modelInstance.__proxies = {};
	                modelInstance.__proxies[name] = this;
	                if (!modelInstance._proxies) {
	                    modelInstance._proxies = [];
	                }
	                modelInstance._proxies.push(this);
	            } else {
	                throw new InternalSiestaError('Already installed.');
	            }
	        } else {
	            throw new InternalSiestaError('No object passed to relationship install');
	        }
	    }
	
	});
	
	//noinspection JSUnusedLocalSymbols
	_.extend(RelationshipProxy.prototype, {
	    set: function (obj, opts) {
	        throw new InternalSiestaError('Must subclass RelationshipProxy');
	    },
	    get: function (callback) {
	        throw new InternalSiestaError('Must subclass RelationshipProxy');
	    }
	});
	
	_.extend(RelationshipProxy.prototype, {
	    proxyForInstance: function (modelInstance, reverse) {
	        var name = reverse ? this.getReverseName() : this.getForwardName(),
	            model = reverse ? this.reverseModel : this.forwardModel;
	        var ret;
	        // This should never happen. Should g   et caught in the mapping operation?
	        if (util.isArray(modelInstance)) {
	            ret = _.map(modelInstance, function (o) {
	                return o.__proxies[name];
	            });
	        } else {
	            var proxy = modelInstance.__proxies[name];
	            if (!proxy) {
	                var err = 'No proxy with name "' + name + '" on mapping ' + model.name;
	                throw new InternalSiestaError(err);
	            }
	            ret = proxy;
	        }
	        return ret;
	    },
	    reverseProxyForInstance: function (modelInstance) {
	        return this.proxyForInstance(modelInstance, true);
	    },
	    getReverseName: function () {
	        return this.isForward ? this.reverseName : this.forwardName;
	    },
	    getForwardName: function () {
	        return this.isForward ? this.forwardName : this.reverseName;
	    },
	    getForwardModel: function () {
	        return this.isForward ? this.forwardModel : this.reverseModel;
	    },
	    clearRemovalListener: function (obj) {
	        var _id = obj._id;
	        var cancelListen = this.cancelListens[_id];
	        // TODO: Remove this check. cancelListen should always exist
	        if (cancelListen) {
	            cancelListen();
	            this.cancelListens[_id] = null;
	        }
	    },
	    listenForRemoval: function (obj) {
	        this.cancelListens[obj._id] = obj.listen(function (e) {
	            if (e.type == ModelEventType.Remove) {
	                if (util.isArray(this.related)) {
	                    var idx = this.related.indexOf(obj);
	                    this.splice(idx, 1);
	                }
	                else {
	                    this.setIdAndRelated(null);
	                }
	                this.clearRemovalListener(obj);
	            }
	        }.bind(this));
	    },
	    /**
	     * Configure _id and related with the new related object.
	     * @param obj
	     * @param {object} [opts]
	     * @param {boolean} [opts.disableNotifications]
	     * @returns {String|undefined} - Error message or undefined
	     */
	    setIdAndRelated: function (obj, opts) {
	        opts = opts || {};
	        if (!opts.disableevents) {
	            this.registerSetChange(obj);
	        }
	        var previouslyRelated = this.related;
	        if (previouslyRelated) this.clearRemovalListener(previouslyRelated);
	        if (obj) {
	            if (util.isArray(obj)) {
	                this.related = obj;
	                obj.forEach(function (_obj) {
	                    this.listenForRemoval(_obj);
	                }.bind(this));
	            } else {
	                this.related = obj;
	                this.listenForRemoval(obj);
	            }
	        }
	        else {
	            this.related = null;
	        }
	    },
	    checkInstalled: function () {
	        if (!this.object) {
	            throw new InternalSiestaError('Proxy must be installed on an object before can use it.');
	        }
	    },
	    splicer: function (opts) {
	        opts = opts || {};
	        return function (idx, numRemove) {
	            opts = opts || {};
	            if (!opts.disableevents) {
	                this.registerSpliceChange.apply(this, arguments);
	            }
	            var add = Array.prototype.slice.call(arguments, 2);
	            return _.partial(this.related.splice, idx, numRemove).apply(this.related, add);
	        }.bind(this);
	    },
	    clearReverseRelated: function (opts) {
	        opts = opts || {};
	        var self = this;
	        if (this.related) {
	            var reverseProxy = this.reverseProxyForInstance(this.related);
	            var reverseProxies = util.isArray(reverseProxy) ? reverseProxy : [reverseProxy];
	            _.each(reverseProxies, function (p) {
	                if (util.isArray(p.related)) {
	                    var idx = p.related.indexOf(self.object);
	                    p.makeChangesToRelatedWithoutObservations(function () {
	                        p.splicer(opts)(idx, 1);
	                    });
	                } else {
	                    p.setIdAndRelated(null, opts);
	                }
	            });
	        }
	    },
	    setIdAndRelatedReverse: function (obj, opts) {
	        var self = this;
	        var reverseProxy = this.reverseProxyForInstance(obj);
	        var reverseProxies = util.isArray(reverseProxy) ? reverseProxy : [reverseProxy];
	        _.each(reverseProxies, function (p) {
	            if (util.isArray(p.related)) {
	                p.makeChangesToRelatedWithoutObservations(function () {
	                    p.splicer(opts)(p.related.length, 0, self.object);
	                });
	            } else {
	                p.clearReverseRelated(opts);
	                p.setIdAndRelated(self.object, opts);
	            }
	        });
	    },
	    makeChangesToRelatedWithoutObservations: function (f) {
	        if (this.related) {
	            this.related.arrayObserver.close();
	            this.related.arrayObserver = null;
	            f();
	            this.wrapArray(this.related);
	        } else {
	            f();
	        }
	    },
	    registerSetChange: function (obj) {
	        var proxyObject = this.object;
	        if (!proxyObject) throw new InternalSiestaError('Proxy must have an object associated');
	        var model = proxyObject.model.name;
	        var collectionName = proxyObject.collectionName;
	        // We take [] == null == undefined in the case of relationships.
	        var old = this.related;
	        if (util.isArray(old) && !old.length) {
	            old = null;
	        }
	        modelEvents.emit({
	            collection: collectionName,
	            model: model,
	            _id: proxyObject._id,
	            field: this.getForwardName(),
	            old: old,
	            new: obj,
	            type: ModelEventType.Set,
	            obj: proxyObject
	        });
	    },
	
	    registerSpliceChange: function (idx, numRemove) {
	        var add = Array.prototype.slice.call(arguments, 2);
	        var model = this.object.model.name;
	        var coll = this.object.collectionName;
	        modelEvents.emit({
	            collection: coll,
	            model: model,
	            _id: this.object._id,
	            field: this.getForwardName(),
	            index: idx,
	            removed: this.related ? this.related.slice(idx, idx + numRemove) : null,
	            added: add.length ? add : [],
	            type: ModelEventType.Splice,
	            obj: this.object
	        });
	    },
	    wrapArray: function (arr) {
	        var self = this;
	        wrapArrayForAttributes(arr, this.reverseName, this.object);
	        if (!arr.arrayObserver) {
	            arr.arrayObserver = new ArrayObserver(arr);
	            var observerFunction = function (splices) {
	                splices.forEach(function (splice) {
	                    var added = splice.addedCount ? arr.slice(splice.index, splice.index + splice.addedCount) : [];
	                    var model = self.getForwardModel();
	                    modelEvents.emit({
	                        collection: model.collectionName,
	                        model: model.name,
	                        _id: self.object._id,
	                        field: self.getForwardName(),
	                        removed: splice.removed,
	                        added: added,
	                        type: ModelEventType.Splice,
	                        obj: self.object
	                    });
	                });
	            };
	            arr.arrayObserver.open(observerFunction);
	        }
	    },
	    splice: function () {
	        this.splicer({}).apply(this, arguments);
	    }
	
	});
	
	
	module.exports = RelationshipProxy;
	


/***/ },
/* 42 */
/***/ function(module, exports, __webpack_require__) {

	var events = __webpack_require__(35),
	    InternalSiestaError = __webpack_require__(34).InternalSiestaError,
	    log = __webpack_require__(45),
	    extend = __webpack_require__(49)._.extend,
	    collectionRegistry = __webpack_require__(30).CollectionRegistry;
	
	var Logger = log.loggerWithName('ModelEvents');
	
	/**
	 * Constants that describe change events.
	 * Set => A new value is assigned to an attribute/relationship
	 * Splice => All javascript array operations are described as splices.
	 * Delete => Used in the case where objects are removed from an array, but array order is not known in advance.
	 * Remove => Object deletion events
	 * New => Object creation events
	 * @type {Object}
	 */
	var ModelEventType = {
	        Set: 'Set',
	        Splice: 'Splice',
	        New: 'New',
	        Remove: 'Remove'
	    };
	
	/**
	 * Represents an individual change.
	 * @param opts
	 * @constructor
	 */
	function ModelEvent(opts) {
	    this._opts = opts || {};
	    Object.keys(opts).forEach(function (k) {
	        this[k] = opts[k];
	    }.bind(this));
	}
	
	ModelEvent.prototype._dump = function (pretty) {
	    var dumped = {};
	    dumped.collection = (typeof this.collection) == 'string' ? this.collection : this.collection._dump();
	    dumped.model = (typeof this.model) == 'string' ? this.model : this.model.name;
	    dumped._id = this._id;
	    dumped.field = this.field;
	    dumped.type = this.type;
	    if (this.index) dumped.index = this.index;
	    if (this.added) dumped.added = _.map(this.added, function (x) {return x._dump()});
	    if (this.removed) dumped.removed = _.map(this.removed, function (x) {return x._dump()});
	    if (this.old) dumped.old = this.old;
	    if (this.new) dumped.new = this.new;
	    return pretty ? util.prettyPrint(dumped) : dumped;
	};
	
	/**
	 * Broadcas
	 * @param  {String} collectionName
	 * @param  {String} modelName
	 * @param  {Object} c an options dictionary representing the change
	 * @return {[type]}
	 */
	function broadcastEvent(collectionName, modelName, c) {
	    if (Logger.trace.isEnabled) Logger.trace('Sending notification "' + collectionName + '" of type ' + c.type);
	    events.emit(collectionName, c);
	    var modelNotif = collectionName + ':' + modelName;
	    if (Logger.trace.isEnabled) Logger.trace('Sending notification "' + modelNotif + '" of type ' + c.type);
	    events.emit(modelNotif, c);
	    var genericNotif = 'Siesta';
	    if (Logger.trace.isEnabled) Logger.trace('Sending notification "' + genericNotif + '" of type ' + c.type);
	    events.emit(genericNotif, c);
	    var localIdNotif = c._id;
	    if (Logger.trace.isEnabled) Logger.trace('Sending notification "' + localIdNotif + '" of type ' + c.type);
	    events.emit(localIdNotif, c);
	    var collection = collectionRegistry[collectionName];
	    var err;
	    if (!collection) {
	        err = 'No such collection "' + collectionName + '"';
	        Logger.error(err, collectionRegistry);
	        throw new InternalSiestaError(err);
	    }
	    var model = collection[modelName];
	    if (!model) {
	        err = 'No such model "' + modelName + '"';
	        Logger.error(err, collectionRegistry);
	        throw new InternalSiestaError(err);
	    }
	    if (model.id && c.obj[model.id]) {
	        var remoteIdNotif = collectionName + ':' + modelName + ':' + c.obj[model.id];
	        if (Logger.trace.isEnabled) Logger.trace('Sending notification "' + remoteIdNotif + '" of type ' + c.type);
	        events.emit(remoteIdNotif, c);
	    }
	}
	
	function validateEventOpts(opts) {
	    if (!opts.model) throw new InternalSiestaError('Must pass a model');
	    if (!opts.collection) throw new InternalSiestaError('Must pass a collection');
	    if (!opts._id) throw new InternalSiestaError('Must pass a local identifier');
	    if (!opts.obj) throw new InternalSiestaError('Must pass the object');
	}
	
	function emit(opts) {
	    validateEventOpts(opts);
	    var collection = opts.collection;
	    var model = opts.model;
	    var c = new ModelEvent(opts);
	    broadcastEvent(collection, model, c);
	    return c;
	}
	
	extend(exports, {
	    ModelEvent: ModelEvent,
	    emit: emit,
	    validateEventOpts: validateEventOpts,
	    ModelEventType: ModelEventType
	});

/***/ },
/* 43 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module query
	 */
	
	var log = __webpack_require__(45),
	    cache = __webpack_require__(32),
	    util = __webpack_require__(49),
	    error = __webpack_require__(34),
	    constructQuerySet = __webpack_require__(44),
	    constructError = error.errorFactory(error.Components.Query),
	    _ = util._;
	
	var Logger = log.loggerWithName('Query');
	
	/**
	 * @class [Query description]
	 * @param {Model} model
	 * @param {Object} query
	 */
	function Query(model, query) {
	    var opts = {};
	    for (var prop in query) {
	        if (query.hasOwnProperty(prop)) {
	            if (prop.slice(0, 2) == '__') {
	                opts[prop.slice(2)] = query[prop];
	                delete query[prop];
	            }
	        }
	    }
	    _.extend(this, {
	        model: model,
	        query: query,
	        opts: opts
	    });
	    opts.order = opts.order || [];
	    if (!util.isArray(opts.order)) opts.order = [opts.order];
	}
	
	var comparators = {
	    e: function (opts) {
	        var objectValue = opts.object[opts.field];
	        if (Logger.trace) {
	            var stringValue;
	            if (objectValue === null) stringValue = 'null';
	            else if (objectValue === undefined) stringValue = 'undefined';
	            else stringValue = objectValue.toString();
	            Logger.trace(opts.field + ': ' + stringValue + ' == ' + opts.value.toString());
	        }
	        return objectValue == opts.value;
	    },
	    lt: function (opts) {
	        if (!opts.invalid) return opts.object[opts.field] < opts.value;
	        return false;
	    },
	    gt: function (opts) {
	        if (!opts.invalid) return opts.object[opts.field] > opts.value;
	        return false;
	    },
	    lte: function (opts) {
	        if (!opts.invalid) return opts.object[opts.field] <= opts.value;
	        return false;
	    },
	    gte: function (opts) {
	        if (!opts.invalid) return opts.object[opts.field] >= opts.value;
	        return false;
	    },
	    contains: function (opts) {
	        if (!opts.invalid) return opts.object[opts.field].indexOf(opts.value) > -1;
	        return false;
	    }
	};
	
	_.extend(Query, {
	    comparators: comparators,
	    registerComparator: function (symbol, fn) {
	        if (!comparators[symbol]) {
	            comparators[symbol] = fn;
	        }
	    }
	});
	
	function cacheForModel(model) {
	    var cacheByType = cache._localCacheByType;
	    var modelName = model.name;
	    var collectionName = model.collectionName;
	    var cacheByModel = cacheByType[collectionName];
	    var cacheByLocalId;
	    if (cacheByModel) {
	        cacheByLocalId = cacheByModel[modelName] || {};
	    }
	    return cacheByLocalId;
	}
	
	_.extend(Query.prototype, {
	    execute: function (callback) {
	        var deferred = util.defer(callback);
	        callback = deferred.finish.bind(deferred);
	        this._executeInMemory(callback);
	        return deferred.promise;
	    },
	    _dump: function (asJson) {
	        return asJson ? '{}' : {};
	    },
	    sortFunc: function (fields) {
	        var sortFunc = function (ascending, field) {
	            return function (v1, v2) {
	                var d1 = v1[field],
	                    d2 = v2[field],
	                    res;
	                if (typeof d1 == 'string' || d1 instanceof String &&
	                    typeof d2 == 'string' || d2 instanceof String) {
	                    res = ascending ? d1.localeCompare(d2) : d2.localeCompare(d1);
	                }
	                else {
	                    if (d1 instanceof Date) d1 = d1.getTime();
	                    if (d2 instanceof Date) d2 = d2.getTime();
	                    if (ascending) res = d1 - d2;
	                    else res = d2 - d1;
	                }
	                return res;
	            }
	        };
	        var s = util;
	        for (var i = 0; i < fields.length; i++) {
	            var field = fields[i];
	            s = s.thenBy(sortFunc(field.ascending, field.field));
	        }
	        return s == util ? null : s;
	    },
	    _sortResults: function (res) {
	        var order = this.opts.order;
	        if (res && order) {
	            var fields = _.map(order, function (ordering) {
	                var splt = ordering.split('-'),
	                    ascending = true,
	                    field = null;
	                if (splt.length > 1) {
	                    field = splt[1];
	                    ascending = false;
	                }
	                else {
	                    field = splt[0];
	                }
	                return {field: field, ascending: ascending};
	            }.bind(this));
	            var sortFunc = this.sortFunc(fields);
	            if (res.immutable) res = res.mutableCopy();
	            if (sortFunc) res.sort(sortFunc);
	        }
	        return res;
	    },
	    /**
	     * Return all model instances in the cache.
	     * @private
	     */
	    _getCacheByLocalId: function () {
	        return _.reduce(this.model.descendants, function (memo, childModel) {
	            return _.extend(memo, cacheForModel(childModel));
	        }, _.extend({}, cacheForModel(this.model)));
	    },
	    _executeInMemory: function (callback) {
	        var _executeInMemory = function () {
	            var cacheByLocalId = this._getCacheByLocalId();
	            var keys = Object.keys(cacheByLocalId);
	            var self = this;
	            var res = [];
	            var err;
	            for (var i = 0; i < keys.length; i++) {
	                var k = keys[i];
	                var obj = cacheByLocalId[k];
	                var matches = self.objectMatchesQuery(obj);
	                if (typeof(matches) == 'string') {
	                    err = constructError(matches);
	                    break;
	                } else {
	                    if (matches) res.push(obj);
	                }
	            }
	            res = this._sortResults(res);
	            if (err) Logger.error('Error executing query', err);
	            callback(err, err ? null : constructQuerySet(res, this.model));
	        }.bind(this);
	        if (this.opts.ignoreInstalled) {
	            _executeInMemory();
	        }
	        else {
	            siesta._afterInstall(_executeInMemory);
	        }
	
	    },
	    clearOrdering: function () {
	        this.opts.order = null;
	    },
	    objectMatchesOrQuery: function (obj, orQuery) {
	        for (var idx in orQuery) {
	            if (orQuery.hasOwnProperty(idx)) {
	                var query = orQuery[idx];
	                if (this.objectMatchesBaseQuery(obj, query)) {
	                    return true;
	                }
	            }
	        }
	        return false;
	    },
	    objectMatchesAndQuery: function (obj, andQuery) {
	        for (var idx in andQuery) {
	            if (andQuery.hasOwnProperty(idx)) {
	                var query = andQuery[idx];
	                if (!this.objectMatchesBaseQuery(obj, query)) {
	                    return false;
	                }
	            }
	        }
	        return true;
	    },
	    splitMatches: function (obj, unprocessedField, value) {
	        var op = 'e';
	        var fields = unprocessedField.split('.');
	        var splt = fields[fields.length - 1].split('__');
	        if (splt.length == 2) {
	            var field = splt[0];
	            op = splt[1];
	        }
	        else {
	            field = splt[0];
	        }
	        fields[fields.length - 1] = field;
	        _.each(fields.slice(0, fields.length - 1), function (f) {
	            obj = obj[f];
	        });
	        var val = obj[field];
	        var invalid = val === null || val === undefined;
	        var comparator = Query.comparators[op],
	            opts = {object: obj, field: field, value: value, invalid: invalid};
	        if (!comparator) {
	            return 'No comparator registered for query operation "' + op + '"';
	        }
	        return comparator(opts);
	    },
	    objectMatches: function (obj, unprocessedField, value, query) {
	        if (unprocessedField == '$or') {
	            if (!this.objectMatchesOrQuery(obj, query['$or'])) return false;
	        }
	        else if (unprocessedField == '$and') {
	            if (!this.objectMatchesAndQuery(obj, query['$and'])) return false;
	        }
	        else {
	            var matches = this.splitMatches(obj, unprocessedField, value);
	            if (typeof matches != 'boolean') return matches;
	            if (!matches) return false;
	        }
	        return true;
	    },
	    objectMatchesBaseQuery: function (obj, query) {
	        var fields = Object.keys(query);
	        for (var i = 0; i < fields.length; i++) {
	            var unprocessedField = fields[i],
	                value = query[unprocessedField];
	            var rt = this.objectMatches(obj, unprocessedField, value, query);
	            if (typeof rt != 'boolean') return rt;
	            if (!rt) return false;
	        }
	        return true;
	    },
	    objectMatchesQuery: function (obj) {
	        return this.objectMatchesBaseQuery(obj, this.query);
	    }
	});
	
	module.exports = Query;

/***/ },
/* 44 */
/***/ function(module, exports, __webpack_require__) {

	var util = __webpack_require__(49),
	    SiestaUserError = __webpack_require__(34).SiestaUserError,
	    ModelInstance = __webpack_require__(46),
	    _ = __webpack_require__(49)._;
	
	/*
	 TODO: Use ES6 Proxy instead.
	 Eventually query sets should use ES6 Proxies which will be much more natural and robust. E.g. no need for the below
	 */
	var ARRAY_METHODS = ['push', 'sort', 'reverse', 'splice', 'shift', 'unshift'],
	    NUMBER_METHODS = ['toString', 'toExponential', 'toFixed', 'toPrecision', 'valueOf'],
	    NUMBER_PROPERTIES = ['MAX_VALUE', 'MIN_VALUE', 'NEGATIVE_INFINITY', 'NaN', 'POSITIVE_INFINITY'],
	    STRING_METHODS = ['charAt', 'charCodeAt', 'concat', 'fromCharCode', 'indexOf', 'lastIndexOf', 'localeCompare',
	        'match', 'replace', 'search', 'slice', 'split', 'substr', 'substring', 'toLocaleLowerCase', 'toLocaleUpperCase',
	        'toLowerCase', 'toString', 'toUpperCase', 'trim', 'valueOf'],
	    STRING_PROPERTIES = ['length'];
	
	/**
	 * Return the property names for a given object. Handles special cases such as strings and numbers that do not have
	 * the getOwnPropertyNames function.
	 * The special cases are very much hacks. This hack can be removed once the Proxy object is more widely adopted.
	 * @param object
	 * @returns {Array}
	 */
	function getPropertyNames(object) {
	    var propertyNames;
	    if (typeof object == 'string' || object instanceof String) {
	        propertyNames = STRING_METHODS.concat(STRING_PROPERTIES);
	    }
	    else if (typeof object == 'number' || object instanceof Number) {
	        propertyNames = NUMBER_METHODS.concat(NUMBER_PROPERTIES);
	    }
	    else {
	        propertyNames = object.getOwnPropertyNames();
	    }
	    return propertyNames;
	}
	
	/**
	 * Define a proxy property to attributes on objects in the array
	 * @param arr
	 * @param prop
	 */
	function defineAttribute(arr, prop) {
	    if (!(prop in arr)) { // e.g. we cannot redefine .length
	        Object.defineProperty(arr, prop, {
	            get: function () {
	                return querySet(_.pluck(arr, prop));
	            },
	            set: function (v) {
	                if (util.isArray(v)) {
	                    if (this.length != v.length) throw new SiestaUserError({message: 'Must be same length'});
	                    for (var i = 0; i < v.length; i++) {
	                        this[i][prop] = v[i];
	                    }
	                }
	                else {
	                    for (i = 0; i < this.length; i++) {
	                        this[i][prop] = v;
	                    }
	                }
	            }
	        });
	    }
	}
	
	function isPromise(obj) {
	    // TODO: Don't think this is very robust.
	    return obj.then && obj.catch;
	}
	
	/**
	 * Define a proxy method on the array if not already in existence.
	 * @param arr
	 * @param prop
	 */
	function defineMethod(arr, prop) {
	    if (!(prop in arr)) { // e.g. we don't want to redefine toString
	        arr[prop] = function () {
	            var args = arguments,
	                res = this.map(function (p) {
	                    return p[prop].apply(p, args);
	                });
	            var arePromises = false;
	            if (res.length) arePromises = isPromise(res[0]);
	            return arePromises ? siesta.q.all(res) : querySet(res);
	        };
	    }
	}
	
	/**
	 * Transform the array into a query set.
	 * Renders the array immutable.
	 * @param arr
	 * @param model - The model with which to proxy to
	 */
	function modelQuerySet(arr, model) {
	    arr = _.extend([], arr);
	    var attributeNames = model._attributeNames,
	        relationshipNames = model._relationshipNames,
	        names = attributeNames.concat(relationshipNames).concat(instanceMethods);
	    names.forEach(_.partial(defineAttribute, arr));
	    var instanceMethods = Object.keys(ModelInstance.prototype);
	    instanceMethods.forEach(_.partial(defineMethod, arr));
	    return renderImmutable(arr);
	}
	
	/**
	 * Transform the array into a query set, based on whatever is in it.
	 * Note that all objects must be of the same type. This function will take the first object and decide how to proxy
	 * based on that.
	 * @param arr
	 */
	function querySet(arr) {
	    if (arr.length) {
	        var referenceObject = arr[0],
	            propertyNames = getPropertyNames(referenceObject);
	        propertyNames.forEach(function (prop) {
	            if (typeof referenceObject[prop] == 'function') defineMethod(arr, prop, arguments);
	            else defineAttribute(arr, prop);
	        });
	    }
	    return renderImmutable(arr);
	}
	
	function throwImmutableError() {
	    throw new Error('Cannot modify a query set');
	}
	
	/**
	 * Render an array immutable by replacing any functions that can mutate it.
	 * @param arr
	 */
	function renderImmutable(arr) {
	    ARRAY_METHODS.forEach(function (p) {
	        arr[p] = throwImmutableError;
	    });
	    arr.immutable = true;
	    arr.mutableCopy = arr.asArray = function () {
	        var mutableArr = _.map(this, function (x) {return x});
	        mutableArr.asQuerySet = function () {
	            return querySet(this);
	        };
	        mutableArr.asModelQuerySet = function (model) {
	            return modelQuerySet(this, model);
	        };
	        return mutableArr;
	    };
	    return arr;
	}
	
	module.exports = modelQuerySet;

/***/ },
/* 45 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Dead simple logging service.
	 * @module log
	 */
	
	var _ = __webpack_require__(49)._;
	
	var logLevels = {};
	
	
	function Logger(name) {
	    if (!this) return new Logger(name);
	    this.name = name;
	    logLevels[name] = Logger.Level.warn;
	    this.trace = constructPerformer(this, _.bind(console.debug ? console.debug : console.log, console), Logger.Level.trace);
	    this.debug = constructPerformer(this, _.bind(console.debug ? console.debug : console.log, console), Logger.Level.debug);
	    this.info = constructPerformer(this, _.bind(console.info ? console.info : console.log, console), Logger.Level.info);
	    this.log = constructPerformer(this, _.bind(console.log ? console.log : console.log, console), Logger.Level.info);
	    this.warn = constructPerformer(this, _.bind(console.warn ? console.warn : console.log, console), Logger.Level.warning);
	    this.error = constructPerformer(this, _.bind(console.error ? console.error : console.log, console), Logger.Level.error);
	    this.fatal = constructPerformer(this, _.bind(console.error ? console.error : console.log, console), Logger.Level.fatal);
	
	}
	
	Logger.Level = {
	    trace: 0,
	    debug: 1,
	    info: 2,
	    warning: 3,
	    warn: 3,
	    error: 4,
	    fatal: 5
	};
	
	function constructPerformer(logger, f, level) {
	    var performer = function (message) {
	        logger.performLog(f, level, message, arguments);
	    };
	    Object.defineProperty(performer, 'isEnabled', {
	        get: function () {
	            var currentLevel = logger.currentLevel();
	            return level >= currentLevel;
	        },
	        enumerable: true,
	        configurable: true
	    });
	    performer.f = f;
	    performer.logger = logger;
	    performer.level = level;
	    return performer;
	}
	
	
	Logger.LevelText = {};
	Logger.LevelText [Logger.Level.trace] = 'TRACE';
	Logger.LevelText [Logger.Level.debug] = 'DEBUG';
	Logger.LevelText [Logger.Level.info] = 'INFO ';
	Logger.LevelText [Logger.Level.warning] = 'WARN ';
	Logger.LevelText [Logger.Level.error] = 'ERROR';
	
	Logger.levelAsText = function (level) {
	    return this.LevelText[level];
	};
	
	Logger.loggerWithName = function (name) {
	    return new Logger(name);
	};
	
	Logger.prototype.currentLevel = function () {
	    var logLevel = logLevels[this.name];
	    return logLevel ? logLevel : Logger.Level.trace;
	};
	
	Logger.prototype.setLevel = function (level) {
	    logLevels[this.name] = level;
	};
	
	Logger.prototype.override = function (level, override, message) {
	    var levelAsText = Logger.levelAsText(level);
	    var performer = this[levelAsText.trim().toLowerCase()];
	    var f = performer.f;
	    var otherArguments = Array.prototype.slice.call(arguments, 3, arguments.length);
	    this.performLog(f, level, message, otherArguments, override);
	};
	
	Logger.prototype.performLog = function (logFunc, level, message, otherArguments, override) {
	    var self = this;
	    var currentLevel = override !== undefined ? override : this.currentLevel();
	    if (currentLevel <= level) {
	        logFunc = _.partial(logFunc, Logger.levelAsText(level) + ' [' + self.name + ']: ' + message);
	        var args = [];
	        for (var i = 0; i < otherArguments.length; i++) {
	            args[i] = otherArguments[i];
	        }
	        args.splice(0, 1);
	        logFunc.apply(logFunc, args);
	    }
	};
	
	module.exports = Logger;


/***/ },
/* 46 */
/***/ function(module, exports, __webpack_require__) {

	var log = __webpack_require__(45),
	    util = __webpack_require__(49),
	    _ = util._,
	    error = __webpack_require__(34),
	    InternalSiestaError = error.InternalSiestaError,
	    modelEvents = __webpack_require__(42),
	    events = __webpack_require__(35),
	    cache = __webpack_require__(32);
	
	function ModelInstance(model) {
	    var self = this;
	    this.model = model;
	
	    util.subProperties(this, this.model, [
	        'collection',
	        'collectionName',
	        '_attributeNames',
	        {
	            name: 'idField',
	            property: 'id'
	        },
	        {
	            name: 'modelName',
	            property: 'name'
	        }
	    ]);
	
	    events.ProxyEventEmitter.call(this);
	
	    Object.defineProperties(this, {
	        _relationshipNames: {
	            get: function () {
	                var proxies = _.map(Object.keys(self.__proxies || {}), function (x) {return self.__proxies[x]});
	                return _.map(proxies, function (p) {
	                    if (p.isForward) {
	                        return p.forwardName;
	                    } else {
	                        return p.reverseName;
	                    }
	                });
	            },
	            enumerable: true,
	            configurable: true
	        },
	        dirty: {
	            get: function () {
	                if (siesta.ext.storageEnabled) {
	                    return self._id in siesta.ext.storage._unsavedObjectsHash;
	                }
	                else return undefined;
	            },
	            enumerable: true
	        },
	        // This is for ProxyEventEmitter.
	        event: {
	            get: function () {return this._id}
	        }
	    });
	
	    this.removed = false;
	}
	
	ModelInstance.prototype = Object.create(events.ProxyEventEmitter.prototype);
	
	_.extend(ModelInstance.prototype, {
	    get: function (callback) {
	        var deferred = util.defer(callback);
	        callback = deferred.finish.bind(deferred);
	        callback(null, this);
	        return deferred.promise;
	    },
	    emit: function (type, opts) {
	        if (typeof type == 'object') opts = type;
	        else opts.type = type;
	        opts = opts || {};
	        _.extend(opts, {
	            collection: this.collectionName,
	            model: this.model.name,
	            _id: this._id,
	            obj: this
	        });
	        modelEvents.emit(opts);
	    },
	    remove: function (callback, notification) {
	        notification = notification == null ? true : notification;
	        var deferred = util.defer(callback);
	        callback = deferred.finish.bind(deferred);
	        cache.remove(this);
	        this.removed = true;
	        if (notification) {
	            this.emit(modelEvents.ModelEventType.Remove, {
	                old: this
	            });
	        }
	        var remove = this.model.remove;
	        if (remove) {
	            var paramNames = util.paramNames(remove);
	            if (paramNames.length) {
	                var self = this;
	                remove.call(this, function (err) {
	                    callback(err, self);
	                });
	            }
	            else {
	                remove.call(this);
	                callback(null, this);
	            }
	        }
	        else {
	            callback(null, this);
	        }
	        return deferred.promise;
	    },
	    restore: function (callback) {
	        var deferred = util.defer(callback);
	        callback = deferred.finish.bind(deferred);
	        var _finish = function (err) {
	            if (!err) {
	                this.emit(modelEvents.ModelEventType.New, {
	                    new: this
	                });
	            }
	            callback(err, this);
	        }.bind(this);
	        if (this.removed) {
	            cache.insert(this);
	            this.removed = false;
	            var init = this.model.init;
	            if (init) {
	                var paramNames = util.paramNames(init);
	                var fromStorage = true;
	                if (paramNames.length > 1) {
	                    init.call(this, fromStorage, _finish);
	                }
	                else {
	                    init.call(this, fromStorage);
	                    _finish();
	                }
	            }
	            else {
	                _finish();
	            }
	        }
	        return deferred.promise;
	    }
	});
	
	// Inspection
	_.extend(ModelInstance.prototype, {
	    getAttributes: function () {
	        return _.extend({}, this.__values);
	    },
	    isInstanceOf: function (model) {
	        return this.model == model;
	    },
	    isA: function (model) {
	        return this.model == model || this.model.isDescendantOf(model);
	    }
	});
	
	// Dump
	_.extend(ModelInstance.prototype, {
	    _dumpString: function (reverseRelationships) {
	        return JSON.stringify(this._dump(reverseRelationships, null, 4));
	    },
	    _dump: function (reverseRelationships) {
	        var dumped = _.extend({}, this.__values);
	        dumped._rev = this._rev;
	        dumped._id = this._id;
	        return dumped;
	    }
	});
	
	module.exports = ModelInstance;
	


/***/ },
/* 47 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module mapping
	 */
	
	var Store = __webpack_require__(48),
	    SiestaModel = __webpack_require__(46),
	    log = __webpack_require__(45),
	    InternalSiestaError = __webpack_require__(34).InternalSiestaError,
	    cache = __webpack_require__(32),
	    util = __webpack_require__(49),
	    _ = util._,
	    async = util.async,
	    ModelEventType = __webpack_require__(42).ModelEventType;
	
	var Logger = log.loggerWithName('Mapping');
	Logger.setLevel(log.Level.trace);
	
	function SiestaError(opts) {
	    this.opts = opts;
	}
	SiestaError.prototype.toString = function () {
	    return JSON.stringify(this.opts, null, 4);
	};
	
	
	/**
	 * Encapsulates the idea of mapping arrays of data onto the object graph or arrays of objects.
	 * @param {Object} opts
	 * @param opts.model
	 * @param opts.data
	 * @param opts.objects
	 * @param opts.disableNotifications
	 */
	function MappingOperation(opts) {
	    this._opts = opts;
	
	    util.extendFromOpts(this, opts, {
	        model: null,
	        data: null,
	        objects: [],
	        disableevents: false,
	        _ignoreInstalled: false,
	        fromStorage: false
	    });
	
	    _.extend(this, {
	        errors: [],
	        subTaskResults: {},
	        _newObjects: []
	    });
	}
	
	
	_.extend(MappingOperation.prototype, {
	    mapAttributes: function () {
	        for (var i = 0; i < this.data.length; i++) {
	            var datum = this.data[i];
	            var object = this.objects[i];
	            // No point mapping object onto itself. This happens if a ModelInstance is passed as a relationship.
	            if (datum != object) {
	                if (object) { // If object is falsy, then there was an error looking up that object/creating it.
	                    var fields = this.model._attributeNames;
	                    _.each(fields, function (f) {
	                        if (datum[f] !== undefined) { // null is fine
	                            // If events are disabled we update __values object directly. This avoids triggering
	                            // events which are built into the set function of the property.
	                            if (this.disableevents) {
	                                object.__values[f] = datum[f];
	                            }
	                            else {
	                                object[f] = datum[f];
	                            }
	                        }
	                    }.bind(this));
	                    // PouchDB revision (if using storage module).
	                    // TODO: Can this be pulled out of core?
	                    if (datum._rev) object._rev = datum._rev;
	                }
	            }
	        }
	    },
	    _map: function () {
	        var self = this;
	        var err;
	        this.mapAttributes();
	        var relationshipFields = _.keys(self.subTaskResults);
	        _.each(relationshipFields, function (f) {
	            var res = self.subTaskResults[f];
	            var indexes = res.indexes,
	                objects = res.objects;
	            var relatedData = self.getRelatedData(f).relatedData;
	            var unflattenedObjects = util.unflattenArray(objects, relatedData);
	            for (var i = 0; i < unflattenedObjects.length; i++) {
	                var idx = indexes[i];
	                // Errors are plucked from the suboperations.
	                var error = self.errors[idx];
	                err = error ? error[f] : null;
	                if (!err) {
	                    var related = unflattenedObjects[i]; // Can be array or scalar.
	                    var object = self.objects[idx];
	                    if (object) {
	                        err = object.__proxies[f].set(related, {disableevents: self.disableevents});
	                        if (err) {
	                            if (!self.errors[idx]) self.errors[idx] = {};
	                            self.errors[idx][f] = err;
	                        }
	                    }
	                }
	            }
	        });
	    },
	    /**
	     * For indices where no object is present, perform lookups, creating a new object if necessary.
	     * @private
	     */
	    _lookup: function (callback) {
	        var deferred = util.defer(callback);
	        callback = deferred.finish.bind(deferred);
	        var self = this;
	        var remoteLookups = [];
	        var localLookups = [];
	        for (var i = 0; i < this.data.length; i++) {
	            if (!this.objects[i]) {
	                var lookup;
	                var datum = this.data[i];
	                var isScalar = typeof datum == 'string' || typeof datum == 'number' || datum instanceof String;
	                if (datum) {
	                    if (isScalar) {
	                        lookup = {
	                            index: i,
	                            datum: {}
	                        };
	                        lookup.datum[self.model.id] = datum;
	                        remoteLookups.push(lookup);
	                    } else if (datum instanceof SiestaModel) { // We won't need to perform any mapping.
	                        this.objects[i] = datum;
	                    } else if (datum._id) {
	                        localLookups.push({
	                            index: i,
	                            datum: datum
	                        });
	                    } else if (datum[self.model.id]) {
	                        remoteLookups.push({
	                            index: i,
	                            datum: datum
	                        });
	                    } else {
	                        this.objects[i] = self._new();
	                    }
	                } else {
	                    this.objects[i] = null;
	                }
	            }
	        }
	        util.async.parallel([
	                function (done) {
	                    var localIdentifiers = _.pluck(_.pluck(localLookups, 'datum'), '_id');
	                    if (localIdentifiers.length) {
	                        Store.getMultipleLocal(localIdentifiers, function (err, objects) {
	                            if (!err) {
	                                for (var i = 0; i < localIdentifiers.length; i++) {
	                                    var obj = objects[i];
	                                    var _id = localIdentifiers[i];
	                                    var lookup = localLookups[i];
	                                    if (!obj) {
	                                        // If there are multiple mapping operations going on, there may be
	                                        obj = cache.get({_id: _id});
	                                        if (!obj)
	                                            obj = self._new({_id: _id}, !self.disableevents);
	                                        self.objects[lookup.index] = obj;
	                                    } else {
	                                        self.objects[lookup.index] = obj;
	                                    }
	                                }
	                            }
	                            done(err);
	                        });
	                    } else {
	                        done();
	                    }
	                },
	                function (done) {
	                    var remoteIdentifiers = _.pluck(_.pluck(remoteLookups, 'datum'), self.model.id);
	                    if (remoteIdentifiers.length) {
	                        if (Logger.trace.isEnabled)
	                            Logger.trace('Looking up remoteIdentifiers: ' + util.prettyPrint(remoteIdentifiers));
	                        Store.getMultipleRemote(remoteIdentifiers, self.model, function (err, objects) {
	                            if (!err) {
	                                if (Logger.trace.isEnabled) {
	                                    var results = {};
	                                    for (i = 0; i < objects.length; i++) {
	                                        results[remoteIdentifiers[i]] = objects[i] ? objects[i]._id : null;
	                                    }
	                                    Logger.trace('Results for remoteIdentifiers: ' + util.prettyPrint(results));
	                                }
	                                for (i = 0; i < objects.length; i++) {
	                                    var obj = objects[i];
	                                    var lookup = remoteLookups[i];
	                                    if (obj) {
	                                        self.objects[lookup.index] = obj;
	                                    } else {
	                                        var data = {};
	                                        var remoteId = remoteIdentifiers[i];
	                                        data[self.model.id] = remoteId;
	                                        var cacheQuery = {
	                                            model: self.model
	                                        };
	                                        cacheQuery[self.model.id] = remoteId;
	                                        var cached = cache.get(cacheQuery);
	                                        if (cached) {
	                                            self.objects[lookup.index] = cached;
	                                        } else {
	                                            self.objects[lookup.index] = self._new();
	                                            // It's important that we map the remote identifier here to ensure that it ends
	                                            // up in the cache.
	                                            self.objects[lookup.index][self.model.id] = remoteId;
	                                        }
	                                    }
	                                }
	                            }
	                            done(err);
	                        });
	                    } else {
	                        done();
	                    }
	                }
	            ],
	            callback);
	        return deferred.promise;
	    },
	    _lookupSingleton: function (callback) {
	        var deferred = util.defer(callback);
	        callback = deferred.finish.bind(deferred);
	        var self = this;
	        // Pick a random _id from the array of data being mapped onto the singleton object. Note that they should
	        // always be the same. This is just a precaution.
	        var _ids = _.pluck(self.data, '_id'),
	            _id;
	        for (i = 0; i < _ids.length; i++) {
	            if (_ids[i]) {
	                _id = {_id: _ids[i]};
	                break;
	            }
	        }
	        // The mapping operation is responsible for creating singleton instances if they do not already exist.
	        var singleton = cache.getSingleton(this.model) || this._new(_id);
	        for (var i = 0; i < self.data.length; i++) {
	            self.objects[i] = singleton;
	        }
	        callback();
	        return deferred.promise;
	    },
	    _new: function () {
	        var model = this.model,
	            modelInstance = model._new.apply(model, arguments);
	        this._newObjects.push(modelInstance);
	        return modelInstance;
	    },
	    start: function (done) {
	        if (this.data.length) {
	            var self = this;
	            var tasks = [];
	            var lookupFunc = this.model.singleton ? this._lookupSingleton : this._lookup;
	            tasks.push(_.bind(lookupFunc, this));
	            tasks.push(_.bind(this._executeSubOperations, this));
	            util.async.parallel(tasks, function () {
	                try {
	                    self._map();
	
	                    // Users are allowed to add a custom init method to the methods object when defining a Model, of the form:
	                    //
	                    //
	                    // init: function ([done]) {
	                    //     // ...
	                    //  }
	                    //
	                    //
	                    // If done is passed, then __init must be executed asynchronously, and the mapping operation will not
	                    // finish until all inits have executed.
	                    //
	                    // Here we ensure the execution of all of them
	                    var fromStorage = this.fromStorage;
	                    var initTasks = _.reduce(self._newObjects, function (m, o) {
	                        var init = o.model.init;
	                        if (init) {
	                            var paramNames = util.paramNames(init);
	                            if (paramNames.length > 1) {
	                                m.push(_.bind(init, o, fromStorage, done));
	                            }
	                            else {
	                                init.call(o, fromStorage);
	                            }
	                        }
	                        return m;
	                    }, []);
	                    async.parallel(initTasks, function () {
	                        done(self.errors.length ? self.errors : null, self.objects);
	                    });
	                }
	                catch (e) {
	                    console.error('Uncaught error when executing init funcitons on models.', e);
	                    done(e);
	                }
	            }.bind(this));
	        } else {
	            done(null, []);
	        }
	    },
	    getRelatedData: function (name) {
	        var indexes = [];
	        var relatedData = [];
	        for (var i = 0; i < this.data.length; i++) {
	            var datum = this.data[i];
	            if (datum) {
	                if (datum[name]) {
	                    indexes.push(i);
	                    relatedData.push(datum[name]);
	                }
	            }
	        }
	        return {
	            indexes: indexes,
	            relatedData: relatedData
	        };
	    },
	    processErrorsFromTask: function (relationshipName, errors, indexes) {
	        if (errors.length) {
	            var relatedData = this.getRelatedData(relationshipName).relatedData;
	            var unflattenedErrors = util.unflattenArray(errors, relatedData);
	            for (var i = 0; i < unflattenedErrors.length; i++) {
	                var idx = indexes[i];
	                var err = unflattenedErrors[i];
	                var isError = err;
	                if (util.isArray(err)) isError = _.reduce(err, function (memo, x) {
	                    return memo || x
	                }, false);
	                if (isError) {
	                    if (!this.errors[idx]) this.errors[idx] = {};
	                    this.errors[idx][relationshipName] = err;
	                }
	            }
	        }
	    },
	    _executeSubOperations: function (callback) {
	        var self = this,
	            relationshipNames = _.keys(this.model.relationships);
	        if (relationshipNames.length) {
	            var tasks = _.reduce(relationshipNames, function (m, relationshipName) {
	                var relationship = self.model.relationships[relationshipName],
	                    reverseModel = relationship.forwardName == relationshipName ? relationship.reverseModel : relationship.forwardModel;
	                // Mock any missing singleton data to ensure that all singleton instances are created.
	                if (reverseModel.singleton && !relationship.isReverse) {
	                    this.data.forEach(function (datum) {
	                        if (!datum[relationshipName]) datum[relationshipName] = {};
	                    });
	                }
	                var __ret = this.getRelatedData(relationshipName),
	                    indexes = __ret.indexes,
	                    relatedData = __ret.relatedData;
	                if (relatedData.length) {
	                    var flatRelatedData = util.flattenArray(relatedData);
	                    var op = new MappingOperation({
	                        model: reverseModel,
	                        data: flatRelatedData,
	                        disableevents: self.disableevents,
	                        _ignoreInstalled: self._ignoreInstalled,
	                        fromStorage: this.fromStorage
	                    });
	                }
	
	                if (op) {
	                    var task;
	                    task = function (done) {
	                        op.start(function (errors, objects) {
	                            self.subTaskResults[relationshipName] = {
	                                errors: errors,
	                                objects: objects,
	                                indexes: indexes
	                            };
	                            self.processErrorsFromTask(relationshipName, op.errors, indexes);
	                            done();
	                        });
	                    };
	                    m.push(task);
	                }
	                return m;
	            }.bind(this), []);
	            async.parallel(tasks, function (err) {
	                callback(err);
	            });
	        } else {
	            callback();
	        }
	    }
	});
	
	module.exports = MappingOperation;
	
	


/***/ },
/* 48 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * The "store" is responsible for mediating between the in-memory cache and any persistent storage.
	 * Note that persistent storage has not been properly implemented yet and so this is pretty useless.
	 * All queries will go straight to the cache instead.
	 * @module store
	 */
	
	var InternalSiestaError = __webpack_require__(34).InternalSiestaError,
	    log = __webpack_require__(45),
	    util = __webpack_require__(49),
	    _ = util._,
	    cache = __webpack_require__(32);
	
	
	var Logger = log.loggerWithName('Store');
	
	/**
	 * [get description]
	 * @param  {Object}   opts
	 * @param  {Function} callback
	 * @return {Promise}
	 * @example
	 * ```js
	 * var xyz = 'afsdf';
	 * ```
	 * @example
	 * ```js
	 * var abc = 'asdsd';
	 * ```
	 */
	function get(opts, callback) {
	    var deferred = util.defer(callback);
	    callback = deferred.finish.bind(deferred);
	    if (Logger.debug.isEnabled)
	        Logger.debug('get', opts);
	    var siestaModel;
	    if (opts._id) {
	        if (util.isArray(opts._id)) {
	            // Proxy onto getMultiple instead.
	            getMultiple(_.map(opts._id, function (id) {
	                return {
	                    _id: id
	                }
	            }), callback);
	        } else {
	            siestaModel = cache.get(opts);
	            if (siestaModel) {
	                if (Logger.debug.isEnabled)
	                    Logger.debug('Had cached object', {
	                        opts: opts,
	                        obj: siestaModel
	                    });
	                if (callback) callback(null, siestaModel);
	            } else {
	                if (util.isArray(opts._id)) {
	                    // Proxy onto getMultiple instead.
	                    getMultiple(_.map(opts._id, function (id) {
	                        return {
	                            _id: id
	                        }
	                    }), callback);
	                } else if (callback) {
	                    var storage = siesta.ext.storage;
	                    if (storage) {
	                        storage.store.getFromPouch(opts, callback);
	                    } else {
	                        throw new Error('Storage module not installed');
	                    }
	                }
	            }
	        }
	    } else if (opts.model) {
	        if (util.isArray(opts[opts.model.id])) {
	            // Proxy onto getMultiple instead.
	            getMultiple(_.map(opts[opts.model.id], function (id) {
	                var o = {};
	                o[opts.model.id] = id;
	                o.model = opts.model;
	                return o
	            }), callback);
	        } else {
	            siestaModel = cache.get(opts);
	            if (siestaModel) {
	                if (Logger.debug.isEnabled)
	                    Logger.debug('Had cached object', {
	                        opts: opts,
	                        obj: siestaModel
	                    });
	                if (callback) callback(null, siestaModel);
	            } else {
	                var model = opts.model;
	                if (model.singleton) {
	                    model.one(callback);
	                } else {
	                    var idField = model.id;
	                    var id = opts[idField];
	                    var oneOpts = {};
	                    oneOpts[idField] = id;
	                    if (id) {
	                        model.one(oneOpts, function (err, obj) {
	                            if (!err) {
	                                if (obj) {
	                                    callback(null, obj);
	                                } else {
	                                    callback(null, null);
	                                }
	                            } else {
	                                callback(err);
	                            }
	                        });
	                    } else {
	                        throw new InternalSiestaError('Invalid options given to store. Missing "' + idField.toString() + '."');
	                    }
	                }
	
	            }
	        }
	    } else {
	        // No way in which to find an object locally.
	        var context = {
	            opts: opts
	        };
	        var msg = 'Invalid options given to store';
	        throw new InternalSiestaError(msg, context);
	    }
	    return deferred.promise;
	}
	
	function getMultiple(optsArray, callback) {
	    var deferred = util.defer(callback);
	    callback = deferred.finish.bind(deferred);
	    var docs = [];
	    var errors = [];
	    _.each(optsArray, function (opts) {
	        get(opts, function (err, doc) {
	            if (err) {
	                errors.push(err);
	            } else {
	                docs.push(doc);
	            }
	            if (docs.length + errors.length == optsArray.length) {
	                if (callback) {
	                    if (errors.length) {
	                        callback(errors);
	                    } else {
	                        callback(null, docs);
	                    }
	                }
	            }
	        });
	    });
	    return deferred.promise;
	}
	/**
	 * Uses pouch bulk fetch API. Much faster than getMultiple.
	 * @param localIdentifiers
	 * @param callback
	 */
	function getMultipleLocal(localIdentifiers, callback) {
	    var deferred = util.defer(callback);
	    callback = deferred.finish.bind(deferred);
	    var results = _.reduce(localIdentifiers, function (memo, _id) {
	        var obj = cache.get({
	            _id: _id
	        });
	        if (obj) {
	            memo.cached[_id] = obj;
	        } else {
	            memo.notCached.push(_id);
	        }
	        return memo;
	    }, {
	        cached: {},
	        notCached: []
	    });
	
	    function finish(err) {
	        if (callback) {
	            if (err) {
	                callback(err);
	            } else {
	                callback(null, _.map(localIdentifiers, function (_id) {
	                    return results.cached[_id];
	                }));
	            }
	        }
	    }
	
	//    if (siesta.ext.storageEnabled && results.notCached.length) {
	//        siesta.ext.storage.store.getMultipleLocalFromCouch(results, finish);
	//    } else {
	    finish();
	//    }
	    return deferred.promise;
	}
	
	function getMultipleRemote(remoteIdentifiers, model, callback) {
	    var deferred = util.defer(callback);
	    callback = deferred.finish.bind(deferred);
	    var results = _.reduce(remoteIdentifiers, function (memo, id) {
	        var cacheQuery = {
	            model: model
	        };
	        cacheQuery[model.id] = id;
	        var obj = cache.get(cacheQuery);
	        if (obj) {
	            memo.cached[id] = obj;
	        } else {
	            memo.notCached.push(id);
	        }
	        return memo;
	    }, {
	        cached: {},
	        notCached: []
	    });
	
	    function finish(err) {
	        if (callback) {
	            if (err) {
	                callback(err);
	            } else {
	                callback(null, _.map(remoteIdentifiers, function (id) {
	                    return results.cached[id];
	                }));
	            }
	        }
	    }
	
	    finish();
	    return deferred.promise;
	}
	
	module.exports = {
	    get: get,
	    getMultiple: getMultiple,
	    getMultipleLocal: getMultipleLocal,
	    getMultipleRemote: getMultipleRemote
	};


/***/ },
/* 49 */
/***/ function(module, exports, __webpack_require__) {

	/*
	 * This is a collection of utilities taken from libraries such as async.js, underscore.js etc.
	 * @module util
	 */
	
	var _ = __webpack_require__(72),
	    async = __webpack_require__(73),
	    misc = __webpack_require__(74);
	
	_.extend(module.exports, {
	    _: _,
	    async: async
	});
	_.extend(module.exports, misc);


/***/ },
/* 50 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Provisions usage of $.ajax and similar functions to send HTTP requests mapping
	 * the results back onto the object graph automatically.
	 * @module http
	 */
	
	if (typeof siesta == 'undefined' && typeof module == 'undefined') {
	    throw new Error('Could not find window.siesta. Make sure you include siesta.core.js first.');
	}
	
	var _internal = siesta._internal,
	    Collection = _internal.Collection,
	    log = _internal.log,
	    util = _internal.util,
	    error = _internal.error,
	    _ = util._,
	    descriptor = __webpack_require__(75),
	    InternalSiestaError = _internal.error.InternalSiestaError;
	
	var DescriptorRegistry = __webpack_require__(76).DescriptorRegistry;
	
	
	var Logger = log.loggerWithName('HTTP');
	
	/**
	 * Log a HTTP response
	 * @param opts
	 * @param xhr
	 * @param [data] - Raw data received in HTTP response.
	 */
	function logHttpResponse(opts, xhr, data) {
	    if (Logger.debug.isEnabled) {
	        var logger = Logger.debug;
	        var logMessage = opts.type + ' ' + xhr.status + ' ' + opts.url;
	        if (Logger.trace.isEnabled && data) {
	            logger = Logger.trace;
	            logMessage += ': ' + util.prettyPrint(data);
	        }
	        logger(logMessage);
	    }
	}
	
	/**
	 * Log a HTTP request
	 * @param opts
	 */
	function logHttpRequest(opts) {
	    if (Logger.debug.isEnabled) {
	        var logger = Logger.debug;
	        // TODO: Append query parameters to the URL.
	        var logMessage = opts.type + ' ' + opts.url;
	        if (Logger.trace.isEnabled) {
	            // TODO: If any data is being sent, log that.
	            logger = Logger.trace;
	        }
	        logger(logMessage);
	    }
	}
	
	/**
	 * Send a HTTP request to the given method and path parsing the response.
	 * @param {String} method
	 * @param {String} path The path to the resource we want to GET
	 * @param {Object|Function} optsOrCallback Either an options object or a callback if can use defaults
	 * @param {Function} callback Callback if opts specified.
	 */
	function _httpResponse(method, path, optsOrCallback, callback) {
	    var self = this;
	    var args = Array.prototype.slice.call(arguments, 2);
	    var opts = {};
	    var name = this.name;
	    if (typeof(args[0]) == 'function') {
	        callback = args[0];
	    } else if (typeof(args[0]) == 'object') {
	        opts = args[0];
	        callback = args[1];
	    }
	    var deferred = util.defer(callback);
	    callback = deferred.finish.bind(deferred);
	    siesta._afterInstall(function () {
	        opts.type = method; // jquery
	        opts.method = method; // $http
	        if (!opts.url) { // Allow overrides.
	            var baseURL = this.baseURL;
	            opts.url = baseURL + path;
	        }
	        if (opts.parseResponse === undefined) opts.parseResponse = true;
	        function success(data, status, xhr) {
	            logHttpResponse(opts, xhr, data);
	
	            if (opts.parseResponse) {
	                var descriptors = DescriptorRegistry.responseDescriptorsForCollection(self);
	                var matchedDescriptor;
	                var extractedData;
	                for (var i = 0; i < descriptors.length; i++) {
	                    var descriptor = descriptors[i];
	                    extractedData = descriptor.match(opts, data);
	                    if (extractedData) {
	                        matchedDescriptor = descriptor;
	                        break;
	                    }
	                }
	                if (matchedDescriptor) {
	                    if (Logger.trace.isEnabled) {
	                        Logger.trace('Model _constructSubOperation data: ' + util.prettyPrint(extractedData));
	                    }
	                    if (typeof(extractedData) == 'object') {
	                        var Model = matchedDescriptor.model;
	                        Model.graph(extractedData, {override: opts.obj}, function (err, obj) {
	                            callback(err, obj, data, xhr);
	                        });
	                    } else { // Matched, but no data.
	                        callback(null, null, null, xhr);
	                    }
	                } else if (callback) {
	                    if (name) {
	                        callback(null, null, data, xhr);
	                    } else {
	                        // There was a bug where collection name doesn't exist. If this occurs, then will never get hold of any descriptors.
	                        throw new InternalSiestaError('Unnamed collection');
	                    }
	                }
	            } else {
	                callback(null, null, data, xhr);
	            }
	
	        }
	
	        function error(xhr, status, error) {
	            if (callback) callback(error, null, null, xhr);
	        }
	
	        logHttpRequest(opts);
	        var ajax = siesta.ext.http.ajax;
	        if (ajax) {
	            var promise = ajax(opts);
	            if (promise.success) { // $http and jquery <1.8
	                promise.success(success);
	                promise.error(error);
	            }
	            else if (promise.done) { // jquery >= 1.8
	                promise.done(success);
	                promise.fail(error);
	            }
	            else {
	                callback('Incompatible ajax function. Could not find success/fail methods on returned promise.');
	            }
	        }
	        else {
	            callback('No ajax function. Ensure that either $.ajax is available, or call siesta.setAjax(ajax) with a compatible ajax function e.g. zepto, jquery, $http')
	        }
	    }.bind(this));
	    return deferred.promise;
	}
	
	function _serialiseObject(opts, obj, cb) {
	    this._serialise(obj, function (err, data) {
	        var retData = data;
	        if (opts.fields) {
	            retData = {};
	            _.each(opts.fields, function (f) {
	                retData[f] = data[f];
	            });
	        }
	        cb(err, retData);
	    });
	}
	
	/**
	 * Send a HTTP request to the given method and path
	 * @param {String} method
	 * @param {String} path The path to the resource we want to GET
	 * @param {ModelInstance} object The model we're pushing to the server
	 * @param {Object|Function} optsOrCallback Either an options object or a callback if can use defaults
	 * @param {Function} callback Callback if opts specified.
	 */
	function _httpRequest(method, path, object) {
	    var self = this;
	    var args = Array.prototype.slice.call(arguments, 3);
	    var callback;
	    var opts = {};
	    if (typeof(args[0]) == 'function') {
	        callback = args[0];
	    } else if (typeof(args[0]) == 'object') {
	        opts = args[0];
	        callback = args[1];
	    }
	    var deferred = util.defer(callback);
	    callback = deferred.finish.bind(deferred);
	    args = Array.prototype.slice.call(args, 2);
	    var requestDescriptors = DescriptorRegistry.requestDescriptorsForCollection(this);
	    var matchedDescriptor;
	    opts.type = method;
	    var baseURL = this.baseURL;
	    opts.url = baseURL + path;
	    for (var i = 0; i < requestDescriptors.length; i++) {
	        var requestDescriptor = requestDescriptors[i];
	        if (requestDescriptor._matchConfig(opts)) {
	            matchedDescriptor = requestDescriptor;
	            break;
	        }
	    }
	    if (matchedDescriptor) {
	        if (Logger.trace.isEnabled)
	            Logger.trace('Matched descriptor: ' + matchedDescriptor._dump(true));
	        _serialiseObject.call(matchedDescriptor, object, opts, function (err, data) {
	            if (Logger.trace.isEnabled)
	                Logger.trace('_serialise', {
	                    err: err,
	                    data: data
	                });
	            if (err) {
	                if (callback) callback(err, null, null);
	            } else {
	                opts.data = data;
	                opts.obj = object;
	                _.partial(_httpResponse, method, path, opts, callback).apply(self, args);
	            }
	        });
	
	    } else if (callback) {
	        if (Logger.trace.isEnabled)
	            Logger.trace('Did not match descriptor');
	        callback('No descriptor matched', null, null);
	    }
	    return deferred.promise;
	}
	
	/**
	 * Send a DELETE request. Also removes the object.
	 * @param {String} path The path to the resource to which we want to DELETE
	 * @param {ModelInstance} object The model that we would like to PATCH
	 * @returns {Promise}
	 */
	function DELETE(path, object) {
	    var args = Array.prototype.slice.call(arguments, 2);
	    var opts = {};
	    var callback;
	    if (typeof(args[0]) == 'function') {
	        callback = args[0];
	    } else if (typeof(args[0]) == 'object') {
	        opts = args[0];
	        callback = args[1];
	    }
	    var deferred = util.defer(callback);
	    var deletionMode = opts.deletionMode || 'restore';
	    // By default we do not map the response from a DELETE request.
	    if (opts.parseResponse === undefined) opts.parseResponse = false;
	    _httpResponse.call(this, 'DELETE', path, opts, function (err, x, y, z) {
	        if (err) {
	            if (deletionMode == 'restore') {
	                object.restore();
	            }
	        } else if (deletionMode == 'success') {
	            object.remove();
	        }
	        callback(err, x, y, z);
	        deferred.finish(err, {x: x, y: y, z: z});
	    });
	    if (deletionMode == 'now' || deletionMode == 'restore') {
	        object.remove();
	    }
	    return deferred.promise;
	}
	
	/**
	 * Send a HTTP request using the given method
	 * @param request Does the request contain data? e.g. POST/PATCH/PUT will be true, GET will false
	 * @param method
	 * @internal
	 * @returns {Promise}
	 */
	function HTTP_METHOD(request, method) {
	    var args = Array.prototype.slice.call(arguments, 2);
	    return _.partial(request ? _httpRequest : _httpResponse, method).apply(this, args);
	}
	
	/**
	 * Send a GET request
	 * @param {String} path The path to the resource we want to GET
	 * @param {Object|Function} optsOrCallback Either an options object or a callback if can use defaults
	 * @param {Function} callback Callback if opts specified.
	 * @package HTTP
	 * @returns {Promise}
	 */
	function GET() {
	    return _.partial(HTTP_METHOD, false, 'GET').apply(this, arguments);
	}
	
	/**
	 * Send an OPTIONS request
	 * @param {String} path The path to the resource we want to GET
	 * @param {Object|Function} optsOrCallback Either an options object or a callback if can use defaults
	 * @param {Function} callback Callback if opts specified.
	 * @package HTTP
	 * @returns {Promise}
	 */
	function OPTIONS() {
	    return _.partial(HTTP_METHOD, false, 'OPTIONS').apply(this, arguments);
	}
	
	/**
	 * Send an TRACE request
	 * @param {String} path The path to the resource we want to GET
	 * @param {Object|Function} optsOrCallback Either an options object or a callback if can use defaults
	 * @param {Function} callback Callback if opts specified.
	 * @package HTTP
	 * @returns {Promise}
	 */
	function TRACE() {
	    return _.partial(HTTP_METHOD, false, 'TRACE').apply(this, arguments);
	}
	
	/**
	 * Send an HEAD request
	 * @param {String} path The path to the resource we want to GET
	 * @param {Object|Function} optsOrCallback Either an options object or a callback if can use defaults
	 * @param {Function} callback Callback if opts specified.
	 * @package HTTP
	 * @returns {Promise}
	 */
	function HEAD() {
	    return _.partial(HTTP_METHOD, false, 'HEAD').apply(this, arguments);
	}
	
	/**
	 * Send an POST request
	 * @param {String} path The path to the resource we want to GET
	 * @param {ModelInstance} model The model that we would like to POST
	 * @param {Object|Function} optsOrCallback Either an options object or a callback if can use defaults
	 * @param {Function} callback Callback if opts specified.
	 * @package HTTP
	 * @returns {Promise}
	 */
	function POST() {
	    return _.partial(HTTP_METHOD, true, 'POST').apply(this, arguments);
	}
	
	/**
	 * Send an PUT request
	 * @param {String} path The path to the resource we want to GET
	 * @param {ModelInstance} model The model that we would like to POST
	 * @param {Object|Function} optsOrCallback Either an options object or a callback if can use defaults
	 * @param {Function} callback Callback if opts specified.
	 * @package HTTP
	 * @returns {Promise}
	 */
	function PUT() {
	    return _.partial(HTTP_METHOD, true, 'PUT').apply(this, arguments);
	}
	
	/**
	 * Send an PATCH request
	 * @param {String} path The path to the resource we want to GET
	 * @param {ModelInstance} model The model that we would like to POST
	 * @param {Object|Function} optsOrCallback Either an options object or a callback if can use defaults
	 * @param {Function} callback Callback if opts specified.
	 * @package HTTP
	 * @returns {Promise}
	 */
	function PATCH() {
	    return _.partial(HTTP_METHOD, true, 'PATCH').apply(this, arguments);
	}
	
	
	var http = {
	    RequestDescriptor: __webpack_require__(77).RequestDescriptor,
	    ResponseDescriptor: __webpack_require__(78).ResponseDescriptor,
	    Descriptor: descriptor.Descriptor,
	    _resolveMethod: descriptor.resolveMethod,
	    Serialiser: __webpack_require__(79),
	    DescriptorRegistry: __webpack_require__(76).DescriptorRegistry,
	    _httpResponse: _httpResponse,
	    _httpRequest: _httpRequest,
	    DELETE: DELETE,
	    HTTP_METHOD: HTTP_METHOD,
	    GET: GET,
	    TRACE: TRACE,
	    OPTIONS: OPTIONS,
	    HEAD: HEAD,
	    POST: POST,
	    PUT: PUT,
	    PATCH: PATCH,
	    _serialiseObject: _serialiseObject,
	    Paginator: __webpack_require__(80)
	};
	
	Object.defineProperty(http, 'ajax', {
	    get: function () {
	        return ajax || ($ ? $.ajax : null) || (jQuery ? jQuery.ajax : null);
	    },
	    set: function (v) {
	        ajax = v;
	    }
	});
	
	_.extend(Collection.prototype, {
	    DELETE: DELETE,
	    GET: GET,
	    TRACE: TRACE,
	    OPTIONS: OPTIONS,
	    HEAD: HEAD,
	    POST: POST,
	    PUT: PUT,
	    PATCH: PATCH
	});
	
	if (!siesta.ext) siesta.ext = {};
	siesta.ext.http = http;
	
	Object.defineProperties(siesta.ext, {
	    httpEnabled: {
	        get: function () {
	            if (siesta.ext._httpEnabled !== undefined) {
	                return siesta.ext._httpEnabled;
	            }
	            return !!siesta.ext.http;
	        },
	        set: function (v) {
	            siesta.ext._httpEnabled = v;
	        },
	        enumerable: true
	    }
	});
	
	var ajax, serialisers = {};
	
	_.extend(siesta, {
	    setAjax: function (_ajax) {
	        ajax = _ajax;
	    },
	    getAjax: function () {
	        return siesta.ext.http.ajax;
	    },
	    serialisers: serialisers,
	    serializers: serialisers
	});
	
	Object.defineProperty(siesta, 'ajax', {
	    get: function () {
	        return ajax;
	    },
	    set: function (_ajax) {
	        ajax = _ajax;
	    }
	});
	
	Object.defineProperties(serialisers, {
	    id: {
	        get: function () {
	            if (siesta.ext.httpEnabled) {
	                return siesta.ext.http.Serialiser.idSerialiser;
	            }
	            return null;
	        }
	    },
	    depth: {
	        get: function () {
	            if (siesta.ext.httpEnabled) {
	                return siesta.ext.http.Serialiser.depthSerializer;
	            }
	            return null;
	        }
	    }
	});
	
	if (true) module.exports = http;


/***/ },
/* 51 */
/***/ function(module, exports, __webpack_require__) {

	if (typeof siesta == 'undefined' && typeof module == 'undefined') {
	    throw new Error('Could not find window.siesta. Make sure you include siesta.core.js first.');
	}
	
	var _i = siesta._internal,
	    cache = _i.cache,
	    CollectionRegistry = _i.CollectionRegistry,
	    log = _i.log,
	    util = _i.util,
	    _ = util._,
	    events = _i.events;
	
	var unsavedObjects = [],
	    unsavedObjectsHash = {},
	    unsavedObjectsByCollection = {};
	
	var storage = {},
	    Logger = log.loggerWithName('Storage');
	
	
	function _initMeta() {
	    return {dateFields: []};
	}
	
	function fullyQualifiedModelName(collectionName, modelName) {
	    return collectionName + '.' + modelName;
	}
	
	if (typeof PouchDB == 'undefined') {
	    siesta.ext.storageEnabled = false;
	    console.log('PouchDB is not present therefore storage is disabled.');
	}
	else {
	    var DB_NAME = 'siesta',
	        pouch = new PouchDB(DB_NAME);
	
	    /**
	     * Sometimes siesta needs to store some extra information about the model instance.
	     * @param serialised
	     * @private
	     */
	    function _addMeta(serialised) {
	        // PouchDB <= 3.2.1 has a bug whereby date fields are not deserialised properly if you use db.query
	        // therefore we need to add extra info to the object for deserialising dates manually.
	        serialised.siesta_meta = _initMeta();
	        for (var prop in serialised) {
	            if (serialised.hasOwnProperty(prop)) {
	                if (serialised[prop] instanceof Date) {
	                    serialised.siesta_meta.dateFields.push(prop);
	                }
	            }
	        }
	    }
	
	    function _processMeta(datum) {
	        var meta = datum.siesta_meta || _initMeta();
	        // PouchDB <= 3.2.1 has a bug whereby date fields are not deserialised properly if you use db.query
	        // therefore we need to add extra info to the object for deserialising dates manually.
	        meta.dateFields.forEach(function (dateField) {
	            var value = datum[dateField];
	            if (!(value instanceof Date)) {
	                datum[dateField] = new Date(Date.parse(value));
	            }
	        });
	        delete datum.siesta_meta;
	    }
	
	    function constructIndexDesignDoc(collectionName, modelName) {
	        var fullyQualifiedName = fullyQualifiedModelName(collectionName, modelName);
	        var views = {};
	        views[fullyQualifiedName] = {
	            map: function (doc) {
	                if (doc.collection == '$1' && doc.model == '$2') emit(doc.collection + '.' + doc.model, doc);
	            }.toString().replace('$1', collectionName).replace('$2', modelName)
	        };
	        return {
	            _id: '_design/' + fullyQualifiedName,
	            views: views
	        };
	    }
	
	    function constructIndexesForAll() {
	        var indexes = [];
	        var registry = siesta._internal.CollectionRegistry;
	        registry.collectionNames.forEach(function (collectionName) {
	            var models = registry[collectionName]._models;
	            for (var modelName in models) {
	                if (models.hasOwnProperty(modelName)) {
	                    indexes.push(constructIndexDesignDoc(collectionName, modelName));
	                }
	            }
	        });
	        return indexes;
	    }
	
	    function __ensureIndexes(indexes, cb) {
	        pouch.bulkDocs(indexes)
	            .then(function (resp) {
	                var errors = [];
	                for (var i = 0; i < resp.length; i++) {
	                    var response = resp[i];
	                    if (!response.ok) {
	                        // Conflict means already exists, and this is fine!
	                        var isConflict = response.status == 409;
	                        if (!isConflict) errors.push(response);
	                    }
	                }
	                cb(errors.length ? errors : null);
	            })
	            .catch(cb);
	    }
	
	    function ensureIndexesForAll(cb) {
	        var indexes = constructIndexesForAll();
	        console.log('ensureIndexesForAll', indexes);
	        __ensureIndexes(indexes, cb);
	    }
	
	    /**
	     * Serialise a model into a format that PouchDB bulkDocs API can process
	     * @param {ModelInstance} modelInstance
	     */
	    function _serialise(modelInstance) {
	        var serialised = siesta._.extend({}, modelInstance.__values);
	        _addMeta(serialised);
	        serialised['collection'] = modelInstance.collectionName;
	        serialised['model'] = modelInstance.modelName;
	        serialised['_id'] = modelInstance._id;
	        if (modelInstance.removed) serialised['_deleted'] = true;
	        var rev = modelInstance._rev;
	        if (rev) serialised['_rev'] = rev;
	        serialised = _.reduce(modelInstance._relationshipNames, function (memo, n) {
	            var val = modelInstance[n];
	            if (siesta.isArray(val)) {
	                memo[n] = _.pluck(val, '_id');
	            }
	            else if (val) {
	                memo[n] = val._id;
	            }
	            return memo;
	        }, serialised);
	        return serialised;
	    }
	
	    function _prepareDatum(datum, model) {
	        _processMeta(datum);
	        delete datum.collection;
	        delete datum.model;
	        var relationshipNames = model._relationshipNames;
	        _.each(relationshipNames, function (r) {
	            var _id = datum[r];
	            if (siesta.isArray(_id)) {
	                datum[r] = _.map(_id, function (x) {
	                    return {_id: x}
	                });
	            }
	            else {
	                datum[r] = {_id: _id};
	            }
	        });
	        return datum;
	    }
	
	    /**
	     *
	     * @param opts
	     * @param opts.collectionName
	     * @param opts.modelName
	     * @param callback
	     * @private
	     */
	    function _loadModel(opts, callback) {
	        var collectionName = opts.collectionName,
	            modelName = opts.modelName;
	        var fullyQualifiedName = fullyQualifiedModelName(collectionName, modelName);
	        if (Logger.trace) {
	            Logger.trace('Loading instances for ' + fullyQualifiedName);
	        }
	        var Model = CollectionRegistry[collectionName][modelName];
	        var mapFunc = function (doc) {
	            if (doc.model == '$1' && doc.collection == '$2') {
	                //noinspection JSUnresolvedFunction
	                emit(doc._id, doc);
	            }
	        }.toString().replace('$1', modelName).replace('$2', collectionName);
	        if (Logger.trace.isEnabled) Logger.trace('Querying pouch');
	        pouch.query(fullyQualifiedName)
	            //pouch.query({map: mapFunc})
	            .then(function (resp) {
	                console.log('resp', resp);
	                if (Logger.trace.isEnabled) Logger.trace('Queried pouch successfully');
	                var data = siesta._.map(siesta._.pluck(resp.rows, 'value'), function (datum) {
	                    return _prepareDatum(datum, Model);
	                });
	                if (Logger.trace.isEnabled) Logger.trace('Mapping data', data);
	                Model.graph(data, {
	                    disableevents: true,
	                    _ignoreInstalled: true,
	                    fromStorage: true
	                }, function (err, instances) {
	                    if (!err) {
	                        if (Logger.trace.isEnabled) {
	                            Logger.trace(true ? instances.length.toString() : 0 + ' instances for ' + fullyQualifiedName);
	                        }
	                    }
	                    else {
	                        Logger.error('Error loading models', err);
	                    }
	                    callback(err, instances);
	                });
	            })
	            .catch(function (err) {
	                callback(err);
	            });
	
	    }
	
	    /**
	     * Load all data from PouchDB.
	     */
	    function _load(callback) {
	        if (saving) throw new Error('not loaded yet how can i save');
	        var deferred = util.defer(callback);
	        if (siesta.ext.storageEnabled) {
	            var collectionNames = CollectionRegistry.collectionNames;
	            var tasks = [];
	            _.each(collectionNames, function (collectionName) {
	                var collection = CollectionRegistry[collectionName],
	                    modelNames = Object.keys(collection._models);
	                _.each(modelNames, function (modelName) {
	                    tasks.push(function (cb) {
	                        // We call from storage to allow for replacement of _loadModel for performance extension.
	                        storage._loadModel({
	                            collectionName: collectionName,
	                            modelName: modelName
	                        }, cb);
	                    });
	                });
	            });
	            siesta.async.series(tasks, function (err, results) {
	                var n;
	                if (!err) {
	                    var instances = [];
	                    siesta._.each(results, function (r) {
	                        instances = instances.concat(r)
	                    });
	                    n = instances.length;
	                    if (Logger.trace) {
	                        Logger.trace('Loaded ' + n.toString() + ' instances');
	                    }
	                }
	                deferred.finish(err, n);
	            });
	        }
	        else {
	            deferred.finish();
	        }
	        return deferred.promise;
	    }
	
	    function saveConflicts(objects, callback, deferred) {
	        pouch.allDocs({keys: _.pluck(objects, '_id')})
	            .then(function (resp) {
	                for (var i = 0; i < resp.rows.length; i++) {
	                    objects[i]._rev = resp.rows[i].value.rev;
	                }
	                saveToPouch(objects, callback, deferred);
	            })
	            .catch(function (err) {
	                deferred.reject(err);
	            })
	    }
	
	    function saveToPouch(objects, callback, deferred) {
	        var conflicts = [];
	        pouch.bulkDocs(_.map(objects, _serialise)).then(function (resp) {
	            for (var i = 0; i < resp.length; i++) {
	                var response = resp[i];
	                var obj = objects[i];
	                if (response.ok) {
	                    obj._rev = response.rev;
	                }
	                else if (response.status == 409) {
	                    conflicts.push(obj);
	                }
	                else {
	                    Logger.error('Error saving object with _id="' + obj._id + '"', response);
	                }
	            }
	            if (conflicts.length) {
	                saveConflicts(conflicts, callback, deferred);
	            }
	            else {
	                callback();
	                if (deferred) deferred.resolve();
	            }
	        }, function (err) {
	            callback(err);
	            if (deferred) deferred.reject(err);
	        });
	    }
	
	
	    /**
	     * Save all modelEvents down to PouchDB.
	     */
	    function save(callback) {
	        var deferred = util.defer(callback);
	        callback = deferred.finish.bind(deferred);
	        siesta._afterInstall(function () {
	            var objects = unsavedObjects;
	            unsavedObjects = [];
	            unsavedObjectsHash = {};
	            unsavedObjectsByCollection = {};
	            if (Logger.trace) {
	                Logger.trace('Saving objects', _.map(objects, function (x) {
	                    return x._dump()
	                }))
	            }
	            saveToPouch(objects, callback, deferred);
	        });
	        return deferred.promise;
	    }
	
	    var listener = function (n) {
	        var changedObject = n.obj,
	            ident = changedObject._id;
	        if (!changedObject) {
	            throw new _i.error.InternalSiestaError('No obj field in notification received by storage extension');
	        }
	        if (!(ident in unsavedObjectsHash)) {
	            unsavedObjectsHash[ident] = changedObject;
	            unsavedObjects.push(changedObject);
	            var collectionName = changedObject.collectionName;
	            if (!unsavedObjectsByCollection[collectionName]) {
	                unsavedObjectsByCollection[collectionName] = {};
	            }
	            var modelName = changedObject.model.name;
	            if (!unsavedObjectsByCollection[collectionName][modelName]) {
	                unsavedObjectsByCollection[collectionName][modelName] = {};
	            }
	            unsavedObjectsByCollection[collectionName][modelName][ident] = changedObject;
	        }
	    };
	    siesta.on('Siesta', listener);
	
	    _.extend(storage, {
	        _load: _load,
	        _loadModel: _loadModel,
	        save: save,
	        _serialise: _serialise,
	        ensureIndexesForAll: ensureIndexesForAll,
	        _reset: function (cb) {
	            siesta.removeListener('Siesta', listener);
	            unsavedObjects = [];
	            unsavedObjectsHash = {};
	            pouch.destroy(function (err) {
	                if (!err) {
	                    pouch = new PouchDB(DB_NAME);
	                }
	                siesta.on('Siesta', listener);
	                Logger.warn('Reset complete');
	                cb(err);
	            })
	        }
	
	    });
	
	    Object.defineProperties(storage, {
	        _unsavedObjects: {
	            get: function () {
	                return unsavedObjects
	            }
	        },
	        _unsavedObjectsHash: {
	            get: function () {
	                return unsavedObjectsHash
	            }
	        },
	        _unsavedObjectsByCollection: {
	            get: function () {
	                return unsavedObjectsByCollection
	            }
	        },
	        _pouch: {
	            get: function () {
	                return pouch
	            }
	        }
	    });
	
	
	    if (!siesta.ext) siesta.ext = {};
	    siesta.ext.storage = storage;
	
	    Object.defineProperties(siesta.ext, {
	        storageEnabled: {
	            get: function () {
	                if (siesta.ext._storageEnabled !== undefined) {
	                    return siesta.ext._storageEnabled;
	                }
	                return !!siesta.ext.storage;
	            },
	            set: function (v) {
	                siesta.ext._storageEnabled = v;
	            },
	            enumerable: true
	        }
	    });
	
	    var interval, saving, autosaveInterval = 1000;
	
	    Object.defineProperties(siesta, {
	        autosave: {
	            get: function () {
	                return !!interval;
	            },
	            set: function (autosave) {
	                if (autosave) {
	                    if (!interval) {
	                        interval = setInterval(function () {
	                            // Cheeky way of avoiding multiple saves happening...
	                            if (!saving) {
	                                saving = true;
	                                siesta.save(function (err) {
	                                    if (!err) {
	                                        events.emit('saved');
	                                    }
	                                    saving = false;
	                                });
	                            }
	                        }, siesta.autosaveInterval);
	                    }
	                }
	                else {
	                    if (interval) {
	                        clearInterval(interval);
	                        interval = null;
	                    }
	                }
	            }
	        },
	        autosaveInterval: {
	            get: function () {
	                return autosaveInterval;
	            },
	            set: function (_autosaveInterval) {
	                autosaveInterval = _autosaveInterval;
	                if (interval) {
	                    // Reset interval
	                    siesta.autosave = false;
	                    siesta.autosave = true;
	                }
	            }
	        },
	        dirty: {
	            get: function () {
	                var unsavedObjectsByCollection = siesta.ext.storage._unsavedObjectsByCollection;
	                return !!Object.keys(unsavedObjectsByCollection).length;
	            },
	            enumerable: true
	        }
	    });
	
	    _.extend(siesta, {
	        save: save,
	        setPouch: function (_p) {
	            if (siesta._canChange) pouch = _p;
	            else throw new Error('Cannot change PouchDB instance when an object graph exists.');
	        }
	    });
	
	}
	
	module.exports = storage;


/***/ },
/* 52 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * assertion-error
	 * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>
	 * MIT Licensed
	 */
	
	/*!
	 * Return a function that will copy properties from
	 * one object to another excluding any originally
	 * listed. Returned function will create a new `{}`.
	 *
	 * @param {String} excluded properties ...
	 * @return {Function}
	 */
	
	function exclude () {
	  var excludes = [].slice.call(arguments);
	
	  function excludeProps (res, obj) {
	    Object.keys(obj).forEach(function (key) {
	      if (!~excludes.indexOf(key)) res[key] = obj[key];
	    });
	  }
	
	  return function extendExclude () {
	    var args = [].slice.call(arguments)
	      , i = 0
	      , res = {};
	
	    for (; i < args.length; i++) {
	      excludeProps(res, args[i]);
	    }
	
	    return res;
	  };
	};
	
	/*!
	 * Primary Exports
	 */
	
	module.exports = AssertionError;
	
	/**
	 * ### AssertionError
	 *
	 * An extension of the JavaScript `Error` constructor for
	 * assertion and validation scenarios.
	 *
	 * @param {String} message
	 * @param {Object} properties to include (optional)
	 * @param {callee} start stack function (optional)
	 */
	
	function AssertionError (message, _props, ssf) {
	  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')
	    , props = extend(_props || {});
	
	  // default values
	  this.message = message || 'Unspecified AssertionError';
	  this.showDiff = false;
	
	  // copy from properties
	  for (var key in props) {
	    this[key] = props[key];
	  }
	
	  // capture stack trace
	  ssf = ssf || arguments.callee;
	  if (ssf && Error.captureStackTrace) {
	    Error.captureStackTrace(this, ssf);
	  }
	}
	
	/*!
	 * Inherit from Error.prototype
	 */
	
	AssertionError.prototype = Object.create(Error.prototype);
	
	/*!
	 * Statically set name
	 */
	
	AssertionError.prototype.name = 'AssertionError';
	
	/*!
	 * Ensure correct constructor
	 */
	
	AssertionError.prototype.constructor = AssertionError;
	
	/**
	 * Allow errors to be converted to JSON for static transfer.
	 *
	 * @param {Boolean} include stack (default: `true`)
	 * @return {Object} object that can be `JSON.stringify`
	 */
	
	AssertionError.prototype.toJSON = function (stack) {
	  var extend = exclude('constructor', 'toJSON', 'stack')
	    , props = extend({ name: this.name }, this);
	
	  // include stack if exists and not turned off
	  if (false !== stack && this.stack) {
	    props.stack = this.stack;
	  }
	
	  return props;
	};


/***/ },
/* 53 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - test utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	/*!
	 * Module dependancies
	 */
	
	var flag = __webpack_require__(59);
	
	/**
	 * # test(object, expression)
	 *
	 * Test and object for expression.
	 *
	 * @param {Object} object (constructed Assertion)
	 * @param {Arguments} chai.Assertion.prototype.assert arguments
	 */
	
	module.exports = function (obj, args) {
	  var negate = flag(obj, 'negate')
	    , expr = args[0];
	  return negate ? !expr : expr;
	};


/***/ },
/* 54 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - type utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	/*!
	 * Detectable javascript natives
	 */
	
	var natives = {
	    '[object Arguments]': 'arguments'
	  , '[object Array]': 'array'
	  , '[object Date]': 'date'
	  , '[object Function]': 'function'
	  , '[object Number]': 'number'
	  , '[object RegExp]': 'regexp'
	  , '[object String]': 'string'
	};
	
	/**
	 * ### type(object)
	 *
	 * Better implementation of `typeof` detection that can
	 * be used cross-browser. Handles the inconsistencies of
	 * Array, `null`, and `undefined` detection.
	 *
	 *     utils.type({}) // 'object'
	 *     utils.type(null) // `null'
	 *     utils.type(undefined) // `undefined`
	 *     utils.type([]) // `array`
	 *
	 * @param {Mixed} object to detect type of
	 * @name type
	 * @api private
	 */
	
	module.exports = function (obj) {
	  var str = Object.prototype.toString.call(obj);
	  if (natives[str]) return natives[str];
	  if (obj === null) return 'null';
	  if (obj === undefined) return 'undefined';
	  if (obj === Object(obj)) return 'object';
	  return typeof obj;
	};


/***/ },
/* 55 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - message composition utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	/*!
	 * Module dependancies
	 */
	
	var flag = __webpack_require__(59)
	  , getActual = __webpack_require__(56)
	  , inspect = __webpack_require__(57)
	  , objDisplay = __webpack_require__(58);
	
	/**
	 * ### .getMessage(object, message, negateMessage)
	 *
	 * Construct the error message based on flags
	 * and template tags. Template tags will return
	 * a stringified inspection of the object referenced.
	 *
	 * Message template tags:
	 * - `#{this}` current asserted object
	 * - `#{act}` actual value
	 * - `#{exp}` expected value
	 *
	 * @param {Object} object (constructed Assertion)
	 * @param {Arguments} chai.Assertion.prototype.assert arguments
	 * @name getMessage
	 * @api public
	 */
	
	module.exports = function (obj, args) {
	  var negate = flag(obj, 'negate')
	    , val = flag(obj, 'object')
	    , expected = args[3]
	    , actual = getActual(obj, args)
	    , msg = negate ? args[2] : args[1]
	    , flagMsg = flag(obj, 'message');
	
	  if(typeof msg === "function") msg = msg();
	  msg = msg || '';
	  msg = msg
	    .replace(/#{this}/g, objDisplay(val))
	    .replace(/#{act}/g, objDisplay(actual))
	    .replace(/#{exp}/g, objDisplay(expected));
	
	  return flagMsg ? flagMsg + ': ' + msg : msg;
	};


/***/ },
/* 56 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - getActual utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	/**
	 * # getActual(object, [actual])
	 *
	 * Returns the `actual` value for an Assertion
	 *
	 * @param {Object} object (constructed Assertion)
	 * @param {Arguments} chai.Assertion.prototype.assert arguments
	 */
	
	module.exports = function (obj, args) {
	  return args.length > 4 ? args[4] : obj._obj;
	};


/***/ },
/* 57 */
/***/ function(module, exports, __webpack_require__) {

	// This is (almost) directly from Node.js utils
	// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js
	
	var getName = __webpack_require__(62);
	var getProperties = __webpack_require__(83);
	var getEnumerableProperties = __webpack_require__(84);
	
	module.exports = inspect;
	
	/**
	 * Echos the value of a value. Trys to print the value out
	 * in the best way possible given the different types.
	 *
	 * @param {Object} obj The object to print out.
	 * @param {Boolean} showHidden Flag that shows hidden (not enumerable)
	 *    properties of objects.
	 * @param {Number} depth Depth in which to descend in object. Default is 2.
	 * @param {Boolean} colors Flag to turn on ANSI escape codes to color the
	 *    output. Default is false (no coloring).
	 */
	function inspect(obj, showHidden, depth, colors) {
	  var ctx = {
	    showHidden: showHidden,
	    seen: [],
	    stylize: function (str) { return str; }
	  };
	  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));
	}
	
	// Returns true if object is a DOM element.
	var isDOMElement = function (object) {
	  if (typeof HTMLElement === 'object') {
	    return object instanceof HTMLElement;
	  } else {
	    return object &&
	      typeof object === 'object' &&
	      object.nodeType === 1 &&
	      typeof object.nodeName === 'string';
	  }
	};
	
	function formatValue(ctx, value, recurseTimes) {
	  // Provide a hook for user-specified inspect functions.
	  // Check that value is an object with an inspect function on it
	  if (value && typeof value.inspect === 'function' &&
	      // Filter out the util module, it's inspect function is special
	      value.inspect !== exports.inspect &&
	      // Also filter out any prototype objects using the circular check.
	      !(value.constructor && value.constructor.prototype === value)) {
	    var ret = value.inspect(recurseTimes);
	    if (typeof ret !== 'string') {
	      ret = formatValue(ctx, ret, recurseTimes);
	    }
	    return ret;
	  }
	
	  // Primitive types cannot have properties
	  var primitive = formatPrimitive(ctx, value);
	  if (primitive) {
	    return primitive;
	  }
	
	  // If this is a DOM element, try to get the outer HTML.
	  if (isDOMElement(value)) {
	    if ('outerHTML' in value) {
	      return value.outerHTML;
	      // This value does not have an outerHTML attribute,
	      //   it could still be an XML element
	    } else {
	      // Attempt to serialize it
	      try {
	        if (document.xmlVersion) {
	          var xmlSerializer = new XMLSerializer();
	          return xmlSerializer.serializeToString(value);
	        } else {
	          // Firefox 11- do not support outerHTML
	          //   It does, however, support innerHTML
	          //   Use the following to render the element
	          var ns = "http://www.w3.org/1999/xhtml";
	          var container = document.createElementNS(ns, '_');
	
	          container.appendChild(value.cloneNode(false));
	          html = container.innerHTML
	            .replace('><', '>' + value.innerHTML + '<');
	          container.innerHTML = '';
	          return html;
	        }
	      } catch (err) {
	        // This could be a non-native DOM implementation,
	        //   continue with the normal flow:
	        //   printing the element as if it is an object.
	      }
	    }
	  }
	
	  // Look up the keys of the object.
	  var visibleKeys = getEnumerableProperties(value);
	  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;
	
	  // Some type of object without properties can be shortcutted.
	  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,
	  // a `stack` plus `description` property; ignore those for consistency.
	  if (keys.length === 0 || (isError(value) && (
	      (keys.length === 1 && keys[0] === 'stack') ||
	      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')
	     ))) {
	    if (typeof value === 'function') {
	      var name = getName(value);
	      var nameSuffix = name ? ': ' + name : '';
	      return ctx.stylize('[Function' + nameSuffix + ']', 'special');
	    }
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    }
	    if (isDate(value)) {
	      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');
	    }
	    if (isError(value)) {
	      return formatError(value);
	    }
	  }
	
	  var base = '', array = false, braces = ['{', '}'];
	
	  // Make Array say that they are Array
	  if (isArray(value)) {
	    array = true;
	    braces = ['[', ']'];
	  }
	
	  // Make functions say that they are functions
	  if (typeof value === 'function') {
	    var name = getName(value);
	    var nameSuffix = name ? ': ' + name : '';
	    base = ' [Function' + nameSuffix + ']';
	  }
	
	  // Make RegExps say that they are RegExps
	  if (isRegExp(value)) {
	    base = ' ' + RegExp.prototype.toString.call(value);
	  }
	
	  // Make dates with properties first say the date
	  if (isDate(value)) {
	    base = ' ' + Date.prototype.toUTCString.call(value);
	  }
	
	  // Make error with message first say the error
	  if (isError(value)) {
	    return formatError(value);
	  }
	
	  if (keys.length === 0 && (!array || value.length == 0)) {
	    return braces[0] + base + braces[1];
	  }
	
	  if (recurseTimes < 0) {
	    if (isRegExp(value)) {
	      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
	    } else {
	      return ctx.stylize('[Object]', 'special');
	    }
	  }
	
	  ctx.seen.push(value);
	
	  var output;
	  if (array) {
	    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
	  } else {
	    output = keys.map(function(key) {
	      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
	    });
	  }
	
	  ctx.seen.pop();
	
	  return reduceToSingleString(output, base, braces);
	}
	
	
	function formatPrimitive(ctx, value) {
	  switch (typeof value) {
	    case 'undefined':
	      return ctx.stylize('undefined', 'undefined');
	
	    case 'string':
	      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
	                                               .replace(/'/g, "\\'")
	                                               .replace(/\\"/g, '"') + '\'';
	      return ctx.stylize(simple, 'string');
	
	    case 'number':
	      if (value === 0 && (1/value) === -Infinity) {
	        return ctx.stylize('-0', 'number');
	      }
	      return ctx.stylize('' + value, 'number');
	
	    case 'boolean':
	      return ctx.stylize('' + value, 'boolean');
	  }
	  // For some reason typeof null is "object", so special case here.
	  if (value === null) {
	    return ctx.stylize('null', 'null');
	  }
	}
	
	
	function formatError(value) {
	  return '[' + Error.prototype.toString.call(value) + ']';
	}
	
	
	function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
	  var output = [];
	  for (var i = 0, l = value.length; i < l; ++i) {
	    if (Object.prototype.hasOwnProperty.call(value, String(i))) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          String(i), true));
	    } else {
	      output.push('');
	    }
	  }
	  keys.forEach(function(key) {
	    if (!key.match(/^\d+$/)) {
	      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
	          key, true));
	    }
	  });
	  return output;
	}
	
	
	function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
	  var name, str;
	  if (value.__lookupGetter__) {
	    if (value.__lookupGetter__(key)) {
	      if (value.__lookupSetter__(key)) {
	        str = ctx.stylize('[Getter/Setter]', 'special');
	      } else {
	        str = ctx.stylize('[Getter]', 'special');
	      }
	    } else {
	      if (value.__lookupSetter__(key)) {
	        str = ctx.stylize('[Setter]', 'special');
	      }
	    }
	  }
	  if (visibleKeys.indexOf(key) < 0) {
	    name = '[' + key + ']';
	  }
	  if (!str) {
	    if (ctx.seen.indexOf(value[key]) < 0) {
	      if (recurseTimes === null) {
	        str = formatValue(ctx, value[key], null);
	      } else {
	        str = formatValue(ctx, value[key], recurseTimes - 1);
	      }
	      if (str.indexOf('\n') > -1) {
	        if (array) {
	          str = str.split('\n').map(function(line) {
	            return '  ' + line;
	          }).join('\n').substr(2);
	        } else {
	          str = '\n' + str.split('\n').map(function(line) {
	            return '   ' + line;
	          }).join('\n');
	        }
	      }
	    } else {
	      str = ctx.stylize('[Circular]', 'special');
	    }
	  }
	  if (typeof name === 'undefined') {
	    if (array && key.match(/^\d+$/)) {
	      return str;
	    }
	    name = JSON.stringify('' + key);
	    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
	      name = name.substr(1, name.length - 2);
	      name = ctx.stylize(name, 'name');
	    } else {
	      name = name.replace(/'/g, "\\'")
	                 .replace(/\\"/g, '"')
	                 .replace(/(^"|"$)/g, "'");
	      name = ctx.stylize(name, 'string');
	    }
	  }
	
	  return name + ': ' + str;
	}
	
	
	function reduceToSingleString(output, base, braces) {
	  var numLinesEst = 0;
	  var length = output.reduce(function(prev, cur) {
	    numLinesEst++;
	    if (cur.indexOf('\n') >= 0) numLinesEst++;
	    return prev + cur.length + 1;
	  }, 0);
	
	  if (length > 60) {
	    return braces[0] +
	           (base === '' ? '' : base + '\n ') +
	           ' ' +
	           output.join(',\n  ') +
	           ' ' +
	           braces[1];
	  }
	
	  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
	}
	
	function isArray(ar) {
	  return Array.isArray(ar) ||
	         (typeof ar === 'object' && objectToString(ar) === '[object Array]');
	}
	
	function isRegExp(re) {
	  return typeof re === 'object' && objectToString(re) === '[object RegExp]';
	}
	
	function isDate(d) {
	  return typeof d === 'object' && objectToString(d) === '[object Date]';
	}
	
	function isError(e) {
	  return typeof e === 'object' && objectToString(e) === '[object Error]';
	}
	
	function objectToString(o) {
	  return Object.prototype.toString.call(o);
	}


/***/ },
/* 58 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - flag utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	/*!
	 * Module dependancies
	 */
	
	var inspect = __webpack_require__(57);
	var config = __webpack_require__(23);
	
	/**
	 * ### .objDisplay (object)
	 *
	 * Determines if an object or an array matches
	 * criteria to be inspected in-line for error
	 * messages or should be truncated.
	 *
	 * @param {Mixed} javascript object to inspect
	 * @name objDisplay
	 * @api public
	 */
	
	module.exports = function (obj) {
	  var str = inspect(obj)
	    , type = Object.prototype.toString.call(obj);
	
	  if (config.truncateThreshold && str.length >= config.truncateThreshold) {
	    if (type === '[object Function]') {
	      return !obj.name || obj.name === ''
	        ? '[Function]'
	        : '[Function: ' + obj.name + ']';
	    } else if (type === '[object Array]') {
	      return '[ Array(' + obj.length + ') ]';
	    } else if (type === '[object Object]') {
	      var keys = Object.keys(obj)
	        , kstr = keys.length > 2
	          ? keys.splice(0, 2).join(', ') + ', ...'
	          : keys.join(', ');
	      return '{ Object (' + kstr + ') }';
	    } else {
	      return str;
	    }
	  } else {
	    return str;
	  }
	};


/***/ },
/* 59 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - flag utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	/**
	 * ### flag(object ,key, [value])
	 *
	 * Get or set a flag value on an object. If a
	 * value is provided it will be set, else it will
	 * return the currently set value or `undefined` if
	 * the value is not set.
	 *
	 *     utils.flag(this, 'foo', 'bar'); // setter
	 *     utils.flag(this, 'foo'); // getter, returns `bar`
	 *
	 * @param {Object} object (constructed Assertion
	 * @param {String} key
	 * @param {Mixed} value (optional)
	 * @name flag
	 * @api private
	 */
	
	module.exports = function (obj, key, value) {
	  var flags = obj.__flags || (obj.__flags = Object.create(null));
	  if (arguments.length === 3) {
	    flags[key] = value;
	  } else {
	    return flags[key];
	  }
	};


/***/ },
/* 60 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - transferFlags utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	/**
	 * ### transferFlags(assertion, object, includeAll = true)
	 *
	 * Transfer all the flags for `assertion` to `object`. If
	 * `includeAll` is set to `false`, then the base Chai
	 * assertion flags (namely `object`, `ssfi`, and `message`)
	 * will not be transferred.
	 *
	 *
	 *     var newAssertion = new Assertion();
	 *     utils.transferFlags(assertion, newAssertion);
	 *
	 *     var anotherAsseriton = new Assertion(myObj);
	 *     utils.transferFlags(assertion, anotherAssertion, false);
	 *
	 * @param {Assertion} assertion the assertion to transfer the flags from
	 * @param {Object} object the object to transfer the flags too; usually a new assertion
	 * @param {Boolean} includeAll
	 * @name getAllFlags
	 * @api private
	 */
	
	module.exports = function (assertion, object, includeAll) {
	  var flags = assertion.__flags || (assertion.__flags = Object.create(null));
	
	  if (!object.__flags) {
	    object.__flags = Object.create(null);
	  }
	
	  includeAll = arguments.length === 3 ? includeAll : true;
	
	  for (var flag in flags) {
	    if (includeAll ||
	        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {
	      object.__flags[flag] = flags[flag];
	    }
	  }
	};


/***/ },
/* 61 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - getPathValue utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * @see https://github.com/logicalparadox/filtr
	 * MIT Licensed
	 */
	
	/**
	 * ### .getPathValue(path, object)
	 *
	 * This allows the retrieval of values in an
	 * object given a string path.
	 *
	 *     var obj = {
	 *         prop1: {
	 *             arr: ['a', 'b', 'c']
	 *           , str: 'Hello'
	 *         }
	 *       , prop2: {
	 *             arr: [ { nested: 'Universe' } ]
	 *           , str: 'Hello again!'
	 *         }
	 *     }
	 *
	 * The following would be the results.
	 *
	 *     getPathValue('prop1.str', obj); // Hello
	 *     getPathValue('prop1.att[2]', obj); // b
	 *     getPathValue('prop2.arr[0].nested', obj); // Universe
	 *
	 * @param {String} path
	 * @param {Object} object
	 * @returns {Object} value or `undefined`
	 * @name getPathValue
	 * @api public
	 */
	
	var getPathValue = module.exports = function (path, obj) {
	  var parsed = parsePath(path);
	  return _getPathValue(parsed, obj);
	};
	
	/*!
	 * ## parsePath(path)
	 *
	 * Helper function used to parse string object
	 * paths. Use in conjunction with `_getPathValue`.
	 *
	 *      var parsed = parsePath('myobject.property.subprop');
	 *
	 * ### Paths:
	 *
	 * * Can be as near infinitely deep and nested
	 * * Arrays are also valid using the formal `myobject.document[3].property`.
	 *
	 * @param {String} path
	 * @returns {Object} parsed
	 * @api private
	 */
	
	function parsePath (path) {
	  var str = path.replace(/\[/g, '.[')
	    , parts = str.match(/(\\\.|[^.]+?)+/g);
	  return parts.map(function (value) {
	    var re = /\[(\d+)\]$/
	      , mArr = re.exec(value)
	    if (mArr) return { i: parseFloat(mArr[1]) };
	    else return { p: value };
	  });
	};
	
	/*!
	 * ## _getPathValue(parsed, obj)
	 *
	 * Helper companion function for `.parsePath` that returns
	 * the value located at the parsed address.
	 *
	 *      var value = getPathValue(parsed, obj);
	 *
	 * @param {Object} parsed definition from `parsePath`.
	 * @param {Object} object to search against
	 * @returns {Object|Undefined} value
	 * @api private
	 */
	
	function _getPathValue (parsed, obj) {
	  var tmp = obj
	    , res;
	  for (var i = 0, l = parsed.length; i < l; i++) {
	    var part = parsed[i];
	    if (tmp) {
	      if ('undefined' !== typeof part.p)
	        tmp = tmp[part.p];
	      else if ('undefined' !== typeof part.i)
	        tmp = tmp[part.i];
	      if (i == (l - 1)) res = tmp;
	    } else {
	      res = undefined;
	    }
	  }
	  return res;
	};


/***/ },
/* 62 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - getName utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	/**
	 * # getName(func)
	 *
	 * Gets the name of a function, in a cross-browser way.
	 *
	 * @param {Function} a function (usually a constructor)
	 */
	
	module.exports = function (func) {
	  if (func.name) return func.name;
	
	  var match = /^\s?function ([^(]*)\(/.exec(func);
	  return match && match[1] ? match[1] : "";
	};


/***/ },
/* 63 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - addProperty utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	/**
	 * ### addProperty (ctx, name, getter)
	 *
	 * Adds a property to the prototype of an object.
	 *
	 *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {
	 *       var obj = utils.flag(this, 'object');
	 *       new chai.Assertion(obj).to.be.instanceof(Foo);
	 *     });
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.addProperty('foo', fn);
	 *
	 * Then can be used as any other assertion.
	 *
	 *     expect(myFoo).to.be.foo;
	 *
	 * @param {Object} ctx object to which the property is added
	 * @param {String} name of property to add
	 * @param {Function} getter function to be used for name
	 * @name addProperty
	 * @api public
	 */
	
	module.exports = function (ctx, name, getter) {
	  Object.defineProperty(ctx, name,
	    { get: function () {
	        var result = getter.call(this);
	        return result === undefined ? this : result;
	      }
	    , configurable: true
	  });
	};


/***/ },
/* 64 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - addMethod utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	var config = __webpack_require__(23);
	
	/**
	 * ### .addMethod (ctx, name, method)
	 *
	 * Adds a method to the prototype of an object.
	 *
	 *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {
	 *       var obj = utils.flag(this, 'object');
	 *       new chai.Assertion(obj).to.be.equal(str);
	 *     });
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.addMethod('foo', fn);
	 *
	 * Then can be used as any other assertion.
	 *
	 *     expect(fooStr).to.be.foo('bar');
	 *
	 * @param {Object} ctx object to which the method is added
	 * @param {String} name of method to add
	 * @param {Function} method function to be used for name
	 * @name addMethod
	 * @api public
	 */
	var flag = __webpack_require__(59);
	
	module.exports = function (ctx, name, method) {
	  ctx[name] = function () {
	    var old_ssfi = flag(this, 'ssfi');
	    if (old_ssfi && config.includeStack === false)
	      flag(this, 'ssfi', ctx[name]);
	    var result = method.apply(this, arguments);
	    return result === undefined ? this : result;
	  };
	};


/***/ },
/* 65 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - overwriteProperty utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	/**
	 * ### overwriteProperty (ctx, name, fn)
	 *
	 * Overwites an already existing property getter and provides
	 * access to previous value. Must return function to use as getter.
	 *
	 *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {
	 *       return function () {
	 *         var obj = utils.flag(this, 'object');
	 *         if (obj instanceof Foo) {
	 *           new chai.Assertion(obj.name).to.equal('bar');
	 *         } else {
	 *           _super.call(this);
	 *         }
	 *       }
	 *     });
	 *
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.overwriteProperty('foo', fn);
	 *
	 * Then can be used as any other assertion.
	 *
	 *     expect(myFoo).to.be.ok;
	 *
	 * @param {Object} ctx object whose property is to be overwritten
	 * @param {String} name of property to overwrite
	 * @param {Function} getter function that returns a getter function to be used for name
	 * @name overwriteProperty
	 * @api public
	 */
	
	module.exports = function (ctx, name, getter) {
	  var _get = Object.getOwnPropertyDescriptor(ctx, name)
	    , _super = function () {};
	
	  if (_get && 'function' === typeof _get.get)
	    _super = _get.get
	
	  Object.defineProperty(ctx, name,
	    { get: function () {
	        var result = getter(_super).call(this);
	        return result === undefined ? this : result;
	      }
	    , configurable: true
	  });
	};


/***/ },
/* 66 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - overwriteMethod utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	/**
	 * ### overwriteMethod (ctx, name, fn)
	 *
	 * Overwites an already existing method and provides
	 * access to previous function. Must return function
	 * to be used for name.
	 *
	 *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {
	 *       return function (str) {
	 *         var obj = utils.flag(this, 'object');
	 *         if (obj instanceof Foo) {
	 *           new chai.Assertion(obj.value).to.equal(str);
	 *         } else {
	 *           _super.apply(this, arguments);
	 *         }
	 *       }
	 *     });
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.overwriteMethod('foo', fn);
	 *
	 * Then can be used as any other assertion.
	 *
	 *     expect(myFoo).to.equal('bar');
	 *
	 * @param {Object} ctx object whose method is to be overwritten
	 * @param {String} name of method to overwrite
	 * @param {Function} method function that returns a function to be used for name
	 * @name overwriteMethod
	 * @api public
	 */
	
	module.exports = function (ctx, name, method) {
	  var _method = ctx[name]
	    , _super = function () { return this; };
	
	  if (_method && 'function' === typeof _method)
	    _super = _method;
	
	  ctx[name] = function () {
	    var result = method(_super).apply(this, arguments);
	    return result === undefined ? this : result;
	  }
	};


/***/ },
/* 67 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - addChainingMethod utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	/*!
	 * Module dependencies
	 */
	
	var transferFlags = __webpack_require__(60);
	var flag = __webpack_require__(59);
	var config = __webpack_require__(23);
	
	/*!
	 * Module variables
	 */
	
	// Check whether `__proto__` is supported
	var hasProtoSupport = '__proto__' in Object;
	
	// Without `__proto__` support, this module will need to add properties to a function.
	// However, some Function.prototype methods cannot be overwritten,
	// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).
	var excludeNames = /^(?:length|name|arguments|caller)$/;
	
	// Cache `Function` properties
	var call  = Function.prototype.call,
	    apply = Function.prototype.apply;
	
	/**
	 * ### addChainableMethod (ctx, name, method, chainingBehavior)
	 *
	 * Adds a method to an object, such that the method can also be chained.
	 *
	 *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {
	 *       var obj = utils.flag(this, 'object');
	 *       new chai.Assertion(obj).to.be.equal(str);
	 *     });
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);
	 *
	 * The result can then be used as both a method assertion, executing both `method` and
	 * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.
	 *
	 *     expect(fooStr).to.be.foo('bar');
	 *     expect(fooStr).to.be.foo.equal('foo');
	 *
	 * @param {Object} ctx object to which the method is added
	 * @param {String} name of method to add
	 * @param {Function} method function to be used for `name`, when called
	 * @param {Function} chainingBehavior function to be called every time the property is accessed
	 * @name addChainableMethod
	 * @api public
	 */
	
	module.exports = function (ctx, name, method, chainingBehavior) {
	  if (typeof chainingBehavior !== 'function') {
	    chainingBehavior = function () { };
	  }
	
	  var chainableBehavior = {
	      method: method
	    , chainingBehavior: chainingBehavior
	  };
	
	  // save the methods so we can overwrite them later, if we need to.
	  if (!ctx.__methods) {
	    ctx.__methods = {};
	  }
	  ctx.__methods[name] = chainableBehavior;
	
	  Object.defineProperty(ctx, name,
	    { get: function () {
	        chainableBehavior.chainingBehavior.call(this);
	
	        var assert = function assert() {
	          var old_ssfi = flag(this, 'ssfi');
	          if (old_ssfi && config.includeStack === false)
	            flag(this, 'ssfi', assert);
	          var result = chainableBehavior.method.apply(this, arguments);
	          return result === undefined ? this : result;
	        };
	
	        // Use `__proto__` if available
	        if (hasProtoSupport) {
	          // Inherit all properties from the object by replacing the `Function` prototype
	          var prototype = assert.__proto__ = Object.create(this);
	          // Restore the `call` and `apply` methods from `Function`
	          prototype.call = call;
	          prototype.apply = apply;
	        }
	        // Otherwise, redefine all properties (slow!)
	        else {
	          var asserterNames = Object.getOwnPropertyNames(ctx);
	          asserterNames.forEach(function (asserterName) {
	            if (!excludeNames.test(asserterName)) {
	              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
	              Object.defineProperty(assert, asserterName, pd);
	            }
	          });
	        }
	
	        transferFlags(this, assert);
	        return assert;
	      }
	    , configurable: true
	  });
	};


/***/ },
/* 68 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - overwriteChainableMethod utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	/**
	 * ### overwriteChainableMethod (ctx, name, fn)
	 *
	 * Overwites an already existing chainable method
	 * and provides access to the previous function or
	 * property.  Must return functions to be used for
	 * name.
	 *
	 *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',
	 *       function (_super) {
	 *       }
	 *     , function (_super) {
	 *       }
	 *     );
	 *
	 * Can also be accessed directly from `chai.Assertion`.
	 *
	 *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);
	 *
	 * Then can be used as any other assertion.
	 *
	 *     expect(myFoo).to.have.length(3);
	 *     expect(myFoo).to.have.length.above(3);
	 *
	 * @param {Object} ctx object whose method / property is to be overwritten
	 * @param {String} name of method / property to overwrite
	 * @param {Function} method function that returns a function to be used for name
	 * @param {Function} chainingBehavior function that returns a function to be used for property
	 * @name overwriteChainableMethod
	 * @api public
	 */
	
	module.exports = function (ctx, name, method, chainingBehavior) {
	  var chainableBehavior = ctx.__methods[name];
	
	  var _chainingBehavior = chainableBehavior.chainingBehavior;
	  chainableBehavior.chainingBehavior = function () {
	    var result = chainingBehavior(_chainingBehavior).call(this);
	    return result === undefined ? this : result;
	  };
	
	  var _method = chainableBehavior.method;
	  chainableBehavior.method = function () {
	    var result = method(_method).apply(this, arguments);
	    return result === undefined ? this : result;
	  };
	};


/***/ },
/* 69 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Solves the common problem of maintaining the order of a set of a models and querying on that order.
	 *
	 * The same as ReactiveQuery but enables manual reordering of models and maintains an index field.
	 */
	
	var ReactiveQuery = __webpack_require__(37),
	    log = __webpack_require__(45),
	    util = __webpack_require__(49),
	    error = __webpack_require__(34),
	    modelEvents = __webpack_require__(42),
	    InternalSiestaError = error.InternalSiestaError,
	    constructQuerySet = __webpack_require__(44),
	    constructError = error.errorFactory(error.Components.ArrangedReactiveQuery),
	    _ = util._;
	
	
	var Logger = log.loggerWithName('Query');
	
	function ArrangedReactiveQuery(query) {
	    ReactiveQuery.call(this, query);
	    this.indexAttribute = 'index';
	}
	
	ArrangedReactiveQuery.prototype = Object.create(ReactiveQuery.prototype);
	
	_.extend(ArrangedReactiveQuery.prototype, {
	    _refreshIndexes: function () {
	        var results = this.results,
	            indexAttribute = this.indexAttribute;
	        if (!results) throw new InternalSiestaError('ArrangedReactiveQuery must be initialised');
	        for (var i = 0; i < results.length; i++) {
	            var modelInstance = results[i];
	            modelInstance[indexAttribute] = i;
	        }
	    },
	    _mergeIndexes: function () {
	        var results = this.results,
	            newResults = [],
	            outOfBounds = [],
	            unindexed = [];
	        for (var i = 0; i < results.length; i++) {
	            var res = results[i],
	                storedIndex = res[this.indexAttribute];
	            if (storedIndex == undefined) { // null or undefined
	                unindexed.push(res);
	            }
	            else if (storedIndex > results.length) {
	                outOfBounds.push(res);
	            }
	            else {
	                // Handle duplicate indexes
	                if (!newResults[storedIndex]) {
	                    newResults[storedIndex] = res;
	                }
	                else {
	                    unindexed.push(res);
	                }
	            }
	        }
	        outOfBounds = _.sortBy(outOfBounds, function (x) {
	            return x[this.indexAttribute];
	        }.bind(this));
	        // Shift the index of all models with indexes out of bounds into the correct range.
	        for (i = 0; i < outOfBounds.length; i++) {
	            res = outOfBounds[i];
	            var resultsIndex = this.results.length - outOfBounds.length + i;
	            res[this.indexAttribute] = resultsIndex;
	            newResults[resultsIndex] = res;
	        }
	        unindexed = this._query._sortResults(unindexed);
	        var n = 0;
	        while (unindexed.length) {
	            res = unindexed.shift();
	            while (newResults[n]) {
	                n++;
	            }
	            newResults[n] = res;
	            res[this.indexAttribute] = n;
	        }
	
	        this.results = constructQuerySet(newResults, this.model);
	    },
	    init: function (cb) {
	        var deferred = util.defer(cb);
	        ReactiveQuery.prototype.init.call(this, function (err) {
	            if (!err) {
	                if (!this.model.hasAttributeNamed(this.indexAttribute)) {
	                    err = constructError('Model "' + this.model.name + '" does not have an attribute named "' + this.indexAttribute + '"')
	                }
	                else {
	                    this._mergeIndexes();
	                    this._query.clearOrdering();
	                }
	            }
	            deferred.finish(err, err ? null : this.results);
	        }.bind(this));
	        return deferred.promise;
	    },
	    _handleNotif: function (n) {
	        // We don't want to keep executing the query each time the index event fires as we're changing the index ourselves
	        if (n.field != this.indexAttribute) {
	            ReactiveQuery.prototype._handleNotif.call(this, n);
	            this._refreshIndexes();
	        }
	    },
	    validateIndex: function (idx) {
	        var maxIndex = this.results.length - 1,
	            minIndex = 0;
	        if (!(idx >= minIndex && idx <= maxIndex)) {
	            throw new Error('Index ' + idx.toString() + ' is out of bounds');
	        }
	    },
	    swapObjectsAtIndexes: function (from, to) {
	        //noinspection UnnecessaryLocalVariableJS
	        this.validateIndex(from);
	        this.validateIndex(to);
	        var fromModel = this.results[from],
	            toModel = this.results[to];
	        if (!fromModel) {
	            throw new Error('No model at index "' + from.toString() + '"');
	        }
	        if (!toModel) {
	            throw new Error('No model at index "' + to.toString() + '"');
	        }
	        this.results[to] = fromModel;
	        this.results[from] = toModel;
	        fromModel[this.indexAttribute] = to;
	        toModel[this.indexAttribute] = from;
	    },
	    swapObjects: function (obj1, obj2) {
	        var fromIdx = this.results.indexOf(obj1),
	            toIdx = this.results.indexOf(obj2);
	        this.swapObjectsAtIndexes(fromIdx, toIdx);
	    },
	    move: function (from, to) {
	        this.validateIndex(from);
	        this.validateIndex(to);
	        var results = this.results.mutableCopy();
	        (function (oldIndex, newIndex) {
	            if (newIndex >= this.length) {
	                var k = newIndex - this.length;
	                while ((k--) + 1) {
	                    this.push(undefined);
	                }
	            }
	        }).call(results, from, to);
	        var removed = results.splice(from, 1)[0];
	        this.results = results.asModelQuerySet(this.model);
	        this.emit('change', {
	            index: from,
	            removed: [removed],
	            type: modelEvents.ModelEventType.Splice,
	            obj: this,
	            field: 'results'
	        });
	        results.splice(to, 0, removed);
	        this.results = results.asModelQuerySet(this.model);
	        this.emit('change', {
	            index: to,
	            added: [removed],
	            type: modelEvents.ModelEventType.Splice,
	            obj: this,
	            field: 'results'
	        });
	        this._refreshIndexes();
	    }
	});
	
	module.exports = ArrangedReactiveQuery;

/***/ },
/* 70 */
/***/ function(module, exports, __webpack_require__) {

	var hasOwn = Object.prototype.hasOwnProperty;
	var toString = Object.prototype.toString;
	var undefined;
	
	var isPlainObject = function isPlainObject(obj) {
	    "use strict";
	    if (!obj || toString.call(obj) !== '[object Object]' || obj.nodeType || obj.setInterval) {
	        return false;
	    }
	
	    var has_own_constructor = hasOwn.call(obj, 'constructor');
	    var has_is_property_of_method = obj.constructor && obj.constructor.prototype && hasOwn.call(obj.constructor.prototype, 'isPrototypeOf');
	    // Not own constructor property must be Object
	    if (obj.constructor && !has_own_constructor && !has_is_property_of_method) {
	        return false;
	    }
	
	    // Own properties are enumerated firstly, so to speed up,
	    // if last one is own, then all properties are own.
	    var key;
	    for (key in obj) {}
	
	    return key === undefined || hasOwn.call(obj, key);
	};
	
	module.exports = function extend() {
	    "use strict";
	    var options, name, src, copy, copyIsArray, clone,
	        target = arguments[0],
	        i = 1,
	        length = arguments.length,
	        deep = false;
	
	    // Handle a deep copy situation
	    if (typeof target === "boolean") {
	        deep = target;
	        target = arguments[1] || {};
	        // skip the boolean and the target
	        i = 2;
	    } else if (typeof target !== "object" && typeof target !== "function" || target == undefined) {
	        target = {};
	    }
	
	    for (; i < length; ++i) {
	        // Only deal with non-null/undefined values
	        if ((options = arguments[i]) != null) {
	            // Extend the base object
	            for (name in options) {
	                src = target[name];
	                copy = options[name];
	
	                // Prevent never-ending loop
	                if (target === copy) {
	                    continue;
	                }
	
	                // Recurse if we're merging plain objects or arrays
	                if (deep && copy && (isPlainObject(copy) || (copyIsArray = Array.isArray(copy)))) {
	                    if (copyIsArray) {
	                        copyIsArray = false;
	                        clone = src && Array.isArray(src) ? src : [];
	                    } else {
	                        clone = src && isPlainObject(src) ? src : {};
	                    }
	
	                    // Never move original objects, clone them
	                    target[name] = extend(deep, clone, copy);
	
	                    // Don't bring in undefined values
	                } else if (copy !== undefined) {
	                    target[name] = copy;
	                }
	            }
	        }
	    }
	
	    // Return the modified object
	    return target;
	};
	


/***/ },
/* 71 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(global, module) {/*
	 * Copyright (c) 2014 The Polymer Project Authors. All rights reserved.
	 * This code may only be used under the BSD style license found at http://polymer.github.io/LICENSE.txt
	 * The complete set of authors may be found at http://polymer.github.io/AUTHORS.txt
	 * The complete set of contributors may be found at http://polymer.github.io/CONTRIBUTORS.txt
	 * Code distributed by Google as part of the polymer project is also
	 * subject to an additional IP rights grant found at http://polymer.github.io/PATENTS.txt
	 */
	
	(function(global) {
	  'use strict';
	
	  var testingExposeCycleCount = global.testingExposeCycleCount;
	
	  // Detect and do basic sanity checking on Object/Array.observe.
	  function detectObjectObserve() {
	    if (typeof Object.observe !== 'function' ||
	        typeof Array.observe !== 'function') {
	      return false;
	    }
	
	    var records = [];
	
	    function callback(recs) {
	      records = recs;
	    }
	
	    var test = {};
	    var arr = [];
	    Object.observe(test, callback);
	    Array.observe(arr, callback);
	    test.id = 1;
	    test.id = 2;
	    delete test.id;
	    arr.push(1, 2);
	    arr.length = 0;
	
	    Object.deliverChangeRecords(callback);
	    if (records.length !== 5)
	      return false;
	
	    if (records[0].type != 'add' ||
	        records[1].type != 'update' ||
	        records[2].type != 'delete' ||
	        records[3].type != 'splice' ||
	        records[4].type != 'splice') {
	      return false;
	    }
	
	    Object.unobserve(test, callback);
	    Array.unobserve(arr, callback);
	
	    return true;
	  }
	
	  var hasObserve = detectObjectObserve();
	
	  function detectEval() {
	    // Don't test for eval if we're running in a Chrome App environment.
	    // We check for APIs set that only exist in a Chrome App context.
	    if (typeof chrome !== 'undefined' && chrome.app && chrome.app.runtime) {
	      return false;
	    }
	
	    // Firefox OS Apps do not allow eval. This feature detection is very hacky
	    // but even if some other platform adds support for this function this code
	    // will continue to work.
	    if (navigator.getDeviceStorage) {
	      return false;
	    }
	
	    try {
	      var f = new Function('', 'return true;');
	      return f();
	    } catch (ex) {
	      return false;
	    }
	  }
	
	  var hasEval = detectEval();
	
	  function isIndex(s) {
	    return +s === s >>> 0 && s !== '';
	  }
	
	  function toNumber(s) {
	    return +s;
	  }
	
	  var numberIsNaN = global.Number.isNaN || function(value) {
	    return typeof value === 'number' && global.isNaN(value);
	  }
	
	
	  var createObject = ('__proto__' in {}) ?
	    function(obj) { return obj; } :
	    function(obj) {
	      var proto = obj.__proto__;
	      if (!proto)
	        return obj;
	      var newObject = Object.create(proto);
	      Object.getOwnPropertyNames(obj).forEach(function(name) {
	        Object.defineProperty(newObject, name,
	                             Object.getOwnPropertyDescriptor(obj, name));
	      });
	      return newObject;
	    };
	
	  var identStart = '[\$_a-zA-Z]';
	  var identPart = '[\$_a-zA-Z0-9]';
	
	
	  var MAX_DIRTY_CHECK_CYCLES = 1000;
	
	  function dirtyCheck(observer) {
	    var cycles = 0;
	    while (cycles < MAX_DIRTY_CHECK_CYCLES && observer.check_()) {
	      cycles++;
	    }
	    if (testingExposeCycleCount)
	      global.dirtyCheckCycleCount = cycles;
	
	    return cycles > 0;
	  }
	
	  function objectIsEmpty(object) {
	    for (var prop in object)
	      return false;
	    return true;
	  }
	
	  function diffIsEmpty(diff) {
	    return objectIsEmpty(diff.added) &&
	           objectIsEmpty(diff.removed) &&
	           objectIsEmpty(diff.changed);
	  }
	
	  function diffObjectFromOldObject(object, oldObject) {
	    var added = {};
	    var removed = {};
	    var changed = {};
	
	    for (var prop in oldObject) {
	      var newValue = object[prop];
	
	      if (newValue !== undefined && newValue === oldObject[prop])
	        continue;
	
	      if (!(prop in object)) {
	        removed[prop] = undefined;
	        continue;
	      }
	
	      if (newValue !== oldObject[prop])
	        changed[prop] = newValue;
	    }
	
	    for (var prop in object) {
	      if (prop in oldObject)
	        continue;
	
	      added[prop] = object[prop];
	    }
	
	    if (Array.isArray(object) && object.length !== oldObject.length)
	      changed.length = object.length;
	
	    return {
	      added: added,
	      removed: removed,
	      changed: changed
	    };
	  }
	
	  var eomTasks = [];
	  function runEOMTasks() {
	    if (!eomTasks.length)
	      return false;
	
	    for (var i = 0; i < eomTasks.length; i++) {
	      eomTasks[i]();
	    }
	    eomTasks.length = 0;
	    return true;
	  }
	
	  var runEOM = hasObserve ? (function(){
	    var eomObj = { pingPong: true };
	    var eomRunScheduled = false;
	
	    Object.observe(eomObj, function() {
	      runEOMTasks();
	      eomRunScheduled = false;
	    });
	
	    return function(fn) {
	      eomTasks.push(fn);
	      if (!eomRunScheduled) {
	        eomRunScheduled = true;
	        eomObj.pingPong = !eomObj.pingPong;
	      }
	    };
	  })() :
	  (function() {
	    return function(fn) {
	      eomTasks.push(fn);
	    };
	  })();
	
	  var observedObjectCache = [];
	
	  function newObservedObject() {
	    var observer;
	    var object;
	    var discardRecords = false;
	    var first = true;
	
	    function callback(records) {
	      if (observer && observer.state_ === OPENED && !discardRecords)
	        observer.check_(records);
	    }
	
	    return {
	      open: function(obs) {
	        if (observer)
	          throw Error('ObservedObject in use');
	
	        if (!first)
	          Object.deliverChangeRecords(callback);
	
	        observer = obs;
	        first = false;
	      },
	      observe: function(obj, arrayObserve) {
	        object = obj;
	        if (arrayObserve)
	          Array.observe(object, callback);
	        else
	          Object.observe(object, callback);
	      },
	      deliver: function(discard) {
	        discardRecords = discard;
	        Object.deliverChangeRecords(callback);
	        discardRecords = false;
	      },
	      close: function() {
	        observer = undefined;
	        Object.unobserve(object, callback);
	        observedObjectCache.push(this);
	      }
	    };
	  }
	
	  /*
	   * The observedSet abstraction is a perf optimization which reduces the total
	   * number of Object.observe observations of a set of objects. The idea is that
	   * groups of Observers will have some object dependencies in common and this
	   * observed set ensures that each object in the transitive closure of
	   * dependencies is only observed once. The observedSet acts as a write barrier
	   * such that whenever any change comes through, all Observers are checked for
	   * changed values.
	   *
	   * Note that this optimization is explicitly moving work from setup-time to
	   * change-time.
	   *
	   * TODO(rafaelw): Implement "garbage collection". In order to move work off
	   * the critical path, when Observers are closed, their observed objects are
	   * not Object.unobserve(d). As a result, it'siesta possible that if the observedSet
	   * is kept open, but some Observers have been closed, it could cause "leaks"
	   * (prevent otherwise collectable objects from being collected). At some
	   * point, we should implement incremental "gc" which keeps a list of
	   * observedSets which may need clean-up and does small amounts of cleanup on a
	   * timeout until all is clean.
	   */
	
	  function getObservedObject(observer, object, arrayObserve) {
	    var dir = observedObjectCache.pop() || newObservedObject();
	    dir.open(observer);
	    dir.observe(object, arrayObserve);
	    return dir;
	  }
	
	  var observedSetCache = [];
	
	  function newObservedSet() {
	    var observerCount = 0;
	    var observers = [];
	    var objects = [];
	    var rootObj;
	    var rootObjProps;
	
	    function observe(obj, prop) {
	      if (!obj)
	        return;
	
	      if (obj === rootObj)
	        rootObjProps[prop] = true;
	
	      if (objects.indexOf(obj) < 0) {
	        objects.push(obj);
	        Object.observe(obj, callback);
	      }
	
	      observe(Object.getPrototypeOf(obj), prop);
	    }
	
	    function allRootObjNonObservedProps(recs) {
	      for (var i = 0; i < recs.length; i++) {
	        var rec = recs[i];
	        if (rec.object !== rootObj ||
	            rootObjProps[rec.name] ||
	            rec.type === 'setPrototype') {
	          return false;
	        }
	      }
	      return true;
	    }
	
	    function callback(recs) {
	      if (allRootObjNonObservedProps(recs))
	        return;
	
	      var observer;
	      for (var i = 0; i < observers.length; i++) {
	        observer = observers[i];
	        if (observer.state_ == OPENED) {
	          observer.iterateObjects_(observe);
	        }
	      }
	
	      for (var i = 0; i < observers.length; i++) {
	        observer = observers[i];
	        if (observer.state_ == OPENED) {
	          observer.check_();
	        }
	      }
	    }
	
	    var record = {
	      object: undefined,
	      objects: objects,
	      open: function(obs, object) {
	        if (!rootObj) {
	          rootObj = object;
	          rootObjProps = {};
	        }
	
	        observers.push(obs);
	        observerCount++;
	        obs.iterateObjects_(observe);
	      },
	      close: function(obs) {
	        observerCount--;
	        if (observerCount > 0) {
	          return;
	        }
	
	        for (var i = 0; i < objects.length; i++) {
	          Object.unobserve(objects[i], callback);
	          Observer.unobservedCount++;
	        }
	
	        observers.length = 0;
	        objects.length = 0;
	        rootObj = undefined;
	        rootObjProps = undefined;
	        observedSetCache.push(this);
	      }
	    };
	
	    return record;
	  }
	
	  var lastObservedSet;
	
	  var UNOPENED = 0;
	  var OPENED = 1;
	  var CLOSED = 2;
	
	  var nextObserverId = 1;
	
	  function Observer() {
	    this.state_ = UNOPENED;
	    this.callback_ = undefined;
	    this.target_ = undefined; // TODO(rafaelw): Should be WeakRef
	    this.directObserver_ = undefined;
	    this.value_ = undefined;
	    this.id_ = nextObserverId++;
	  }
	
	  Observer.prototype = {
	    open: function(callback, target) {
	      if (this.state_ != UNOPENED)
	        throw Error('Observer has already been opened.');
	
	      addToAll(this);
	      this.callback_ = callback;
	      this.target_ = target;
	      this.connect_();
	      this.state_ = OPENED;
	      return this.value_;
	    },
	
	    close: function() {
	      if (this.state_ != OPENED)
	        return;
	
	      removeFromAll(this);
	      this.disconnect_();
	      this.value_ = undefined;
	      this.callback_ = undefined;
	      this.target_ = undefined;
	      this.state_ = CLOSED;
	    },
	
	    deliver: function() {
	      if (this.state_ != OPENED)
	        return;
	
	      dirtyCheck(this);
	    },
	
	    report_: function(changes) {
	      try {
	        this.callback_.apply(this.target_, changes);
	      } catch (ex) {
	        Observer._errorThrownDuringCallback = true;
	        console.error('Exception caught during observer callback: ' +
	                       (ex.stack || ex));
	      }
	    },
	
	    discardChanges: function() {
	      this.check_(undefined, true);
	      return this.value_;
	    }
	  }
	
	  var collectObservers = !hasObserve;
	  var allObservers;
	  Observer._allObserversCount = 0;
	
	  if (collectObservers) {
	    allObservers = [];
	  }
	
	  function addToAll(observer) {
	    Observer._allObserversCount++;
	    if (!collectObservers)
	      return;
	
	    allObservers.push(observer);
	  }
	
	  function removeFromAll(observer) {
	    Observer._allObserversCount--;
	  }
	
	  var runningMicrotaskCheckpoint = false;
	
	  var hasDebugForceFullDelivery = hasObserve && hasEval && (function() {
	    try {
	      eval('%RunMicrotasks()');
	      return true;
	    } catch (ex) {
	      return false;
	    }
	  })();
	
	  global.Platform = global.Platform || {};
	
	  global.Platform.performMicrotaskCheckpoint = function() {
	    if (runningMicrotaskCheckpoint)
	      return;
	
	    if (hasDebugForceFullDelivery) {
	      eval('%RunMicrotasks()');
	      return;
	    }
	
	    if (!collectObservers)
	      return;
	
	    runningMicrotaskCheckpoint = true;
	
	    var cycles = 0;
	    var anyChanged, toCheck;
	
	    do {
	      cycles++;
	      toCheck = allObservers;
	      allObservers = [];
	      anyChanged = false;
	
	      for (var i = 0; i < toCheck.length; i++) {
	        var observer = toCheck[i];
	        if (observer.state_ != OPENED)
	          continue;
	
	        if (observer.check_())
	          anyChanged = true;
	
	        allObservers.push(observer);
	      }
	      if (runEOMTasks())
	        anyChanged = true;
	    } while (cycles < MAX_DIRTY_CHECK_CYCLES && anyChanged);
	
	    if (testingExposeCycleCount)
	      global.dirtyCheckCycleCount = cycles;
	
	    runningMicrotaskCheckpoint = false;
	  };
	
	  if (collectObservers) {
	    global.Platform.clearObservers = function() {
	      allObservers = [];
	    };
	  }
	
	  function ObjectObserver(object) {
	    Observer.call(this);
	    this.value_ = object;
	    this.oldObject_ = undefined;
	  }
	
	  ObjectObserver.prototype = createObject({
	    __proto__: Observer.prototype,
	
	    arrayObserve: false,
	
	    connect_: function(callback, target) {
	      if (hasObserve) {
	        this.directObserver_ = getObservedObject(this, this.value_,
	                                                 this.arrayObserve);
	      } else {
	        this.oldObject_ = this.copyObject(this.value_);
	      }
	
	    },
	
	    copyObject: function(object) {
	      var copy = Array.isArray(object) ? [] : {};
	      for (var prop in object) {
	        copy[prop] = object[prop];
	      };
	      if (Array.isArray(object))
	        copy.length = object.length;
	      return copy;
	    },
	
	    check_: function(changeRecords, skipChanges) {
	      var diff;
	      var oldValues;
	      if (hasObserve) {
	        if (!changeRecords)
	          return false;
	
	        oldValues = {};
	        diff = diffObjectFromChangeRecords(this.value_, changeRecords,
	                                           oldValues);
	      } else {
	        oldValues = this.oldObject_;
	        diff = diffObjectFromOldObject(this.value_, this.oldObject_);
	      }
	
	      if (diffIsEmpty(diff))
	        return false;
	
	      if (!hasObserve)
	        this.oldObject_ = this.copyObject(this.value_);
	
	      this.report_([
	        diff.added || {},
	        diff.removed || {},
	        diff.changed || {},
	        function(property) {
	          return oldValues[property];
	        }
	      ]);
	
	      return true;
	    },
	
	    disconnect_: function() {
	      if (hasObserve) {
	        this.directObserver_.close();
	        this.directObserver_ = undefined;
	      } else {
	        this.oldObject_ = undefined;
	      }
	    },
	
	    deliver: function() {
	      if (this.state_ != OPENED)
	        return;
	
	      if (hasObserve)
	        this.directObserver_.deliver(false);
	      else
	        dirtyCheck(this);
	    },
	
	    discardChanges: function() {
	      if (this.directObserver_)
	        this.directObserver_.deliver(true);
	      else
	        this.oldObject_ = this.copyObject(this.value_);
	
	      return this.value_;
	    }
	  });
	
	  function ArrayObserver(array) {
	    if (!Array.isArray(array))
	      throw Error('Provided object is not an Array');
	    ObjectObserver.call(this, array);
	  }
	
	  ArrayObserver.prototype = createObject({
	
	    __proto__: ObjectObserver.prototype,
	
	    arrayObserve: true,
	
	    copyObject: function(arr) {
	      return arr.slice();
	    },
	
	    check_: function(changeRecords) {
	      var splices;
	      if (hasObserve) {
	        if (!changeRecords)
	          return false;
	        splices = projectArraySplices(this.value_, changeRecords);
	      } else {
	        splices = calcSplices(this.value_, 0, this.value_.length,
	                              this.oldObject_, 0, this.oldObject_.length);
	      }
	
	      if (!splices || !splices.length)
	        return false;
	
	      if (!hasObserve)
	        this.oldObject_ = this.copyObject(this.value_);
	
	      this.report_([splices]);
	      return true;
	    }
	  });
	
	  ArrayObserver.applySplices = function(previous, current, splices) {
	    splices.forEach(function(splice) {
	      var spliceArgs = [splice.index, splice.removed.length];
	      var addIndex = splice.index;
	      while (addIndex < splice.index + splice.addedCount) {
	        spliceArgs.push(current[addIndex]);
	        addIndex++;
	      }
	
	      Array.prototype.splice.apply(previous, spliceArgs);
	    });
	  };
	
	  var observerSentinel = {};
	
	  var expectedRecordTypes = {
	    add: true,
	    update: true,
	    delete: true
	  };
	
	  function diffObjectFromChangeRecords(object, changeRecords, oldValues) {
	    var added = {};
	    var removed = {};
	
	    for (var i = 0; i < changeRecords.length; i++) {
	      var record = changeRecords[i];
	      if (!expectedRecordTypes[record.type]) {
	        console.error('Unknown changeRecord type: ' + record.type);
	        console.error(record);
	        continue;
	      }
	
	      if (!(record.name in oldValues))
	        oldValues[record.name] = record.oldValue;
	
	      if (record.type == 'update')
	        continue;
	
	      if (record.type == 'add') {
	        if (record.name in removed)
	          delete removed[record.name];
	        else
	          added[record.name] = true;
	
	        continue;
	      }
	
	      // type = 'delete'
	      if (record.name in added) {
	        delete added[record.name];
	        delete oldValues[record.name];
	      } else {
	        removed[record.name] = true;
	      }
	    }
	
	    for (var prop in added)
	      added[prop] = object[prop];
	
	    for (var prop in removed)
	      removed[prop] = undefined;
	
	    var changed = {};
	    for (var prop in oldValues) {
	      if (prop in added || prop in removed)
	        continue;
	
	      var newValue = object[prop];
	      if (oldValues[prop] !== newValue)
	        changed[prop] = newValue;
	    }
	
	    return {
	      added: added,
	      removed: removed,
	      changed: changed
	    };
	  }
	
	  function newSplice(index, removed, addedCount) {
	    return {
	      index: index,
	      removed: removed,
	      addedCount: addedCount
	    };
	  }
	
	  var EDIT_LEAVE = 0;
	  var EDIT_UPDATE = 1;
	  var EDIT_ADD = 2;
	  var EDIT_DELETE = 3;
	
	  function ArraySplice() {}
	
	  ArraySplice.prototype = {
	
	    // Note: This function is *based* on the computation of the Levenshtein
	    // "edit" distance. The one change is that "updates" are treated as two
	    // edits - not one. With Array splices, an update is really a delete
	    // followed by an add. By retaining this, we optimize for "keeping" the
	    // maximum array items in the original array. For example:
	    //
	    //   'xxxx123' -> '123yyyy'
	    //
	    // With 1-edit updates, the shortest path would be just to update all seven
	    // characters. With 2-edit updates, we delete 4, leave 3, and add 4. This
	    // leaves the substring '123' intact.
	    calcEditDistances: function(current, currentStart, currentEnd,
	                                old, oldStart, oldEnd) {
	      // "Deletion" columns
	      var rowCount = oldEnd - oldStart + 1;
	      var columnCount = currentEnd - currentStart + 1;
	      var distances = new Array(rowCount);
	
	      // "Addition" rows. Initialize null column.
	      for (var i = 0; i < rowCount; i++) {
	        distances[i] = new Array(columnCount);
	        distances[i][0] = i;
	      }
	
	      // Initialize null row
	      for (var j = 0; j < columnCount; j++)
	        distances[0][j] = j;
	
	      for (var i = 1; i < rowCount; i++) {
	        for (var j = 1; j < columnCount; j++) {
	          if (this.equals(current[currentStart + j - 1], old[oldStart + i - 1]))
	            distances[i][j] = distances[i - 1][j - 1];
	          else {
	            var north = distances[i - 1][j] + 1;
	            var west = distances[i][j - 1] + 1;
	            distances[i][j] = north < west ? north : west;
	          }
	        }
	      }
	
	      return distances;
	    },
	
	    // This starts at the final weight, and walks "backward" by finding
	    // the minimum previous weight recursively until the origin of the weight
	    // matrix.
	    spliceOperationsFromEditDistances: function(distances) {
	      var i = distances.length - 1;
	      var j = distances[0].length - 1;
	      var current = distances[i][j];
	      var edits = [];
	      while (i > 0 || j > 0) {
	        if (i == 0) {
	          edits.push(EDIT_ADD);
	          j--;
	          continue;
	        }
	        if (j == 0) {
	          edits.push(EDIT_DELETE);
	          i--;
	          continue;
	        }
	        var northWest = distances[i - 1][j - 1];
	        var west = distances[i - 1][j];
	        var north = distances[i][j - 1];
	
	        var min;
	        if (west < north)
	          min = west < northWest ? west : northWest;
	        else
	          min = north < northWest ? north : northWest;
	
	        if (min == northWest) {
	          if (northWest == current) {
	            edits.push(EDIT_LEAVE);
	          } else {
	            edits.push(EDIT_UPDATE);
	            current = northWest;
	          }
	          i--;
	          j--;
	        } else if (min == west) {
	          edits.push(EDIT_DELETE);
	          i--;
	          current = west;
	        } else {
	          edits.push(EDIT_ADD);
	          j--;
	          current = north;
	        }
	      }
	
	      edits.reverse();
	      return edits;
	    },
	
	    /**
	     * Splice Projection functions:
	     *
	     * A splice map is a representation of how a previous array of items
	     * was transformed into a new array of items. Conceptually it is a list of
	     * tuples of
	     *
	     *   <index, removed, addedCount>
	     *
	     * which are kept in ascending index order of. The tuple represents that at
	     * the |index|, |removed| sequence of items were removed, and counting forward
	     * from |index|, |addedCount| items were added.
	     */
	
	    /**
	     * Lacking individual splice mutation information, the minimal set of
	     * splices can be synthesized given the previous state and final state of an
	     * array. The basic approach is to calculate the edit distance matrix and
	     * choose the shortest path through it.
	     *
	     * Complexity: O(l * p)
	     *   l: The length of the current array
	     *   p: The length of the old array
	     */
	    calcSplices: function(current, currentStart, currentEnd,
	                          old, oldStart, oldEnd) {
	      var prefixCount = 0;
	      var suffixCount = 0;
	
	      var minLength = Math.min(currentEnd - currentStart, oldEnd - oldStart);
	      if (currentStart == 0 && oldStart == 0)
	        prefixCount = this.sharedPrefix(current, old, minLength);
	
	      if (currentEnd == current.length && oldEnd == old.length)
	        suffixCount = this.sharedSuffix(current, old, minLength - prefixCount);
	
	      currentStart += prefixCount;
	      oldStart += prefixCount;
	      currentEnd -= suffixCount;
	      oldEnd -= suffixCount;
	
	      if (currentEnd - currentStart == 0 && oldEnd - oldStart == 0)
	        return [];
	
	      if (currentStart == currentEnd) {
	        var splice = newSplice(currentStart, [], 0);
	        while (oldStart < oldEnd)
	          splice.removed.push(old[oldStart++]);
	
	        return [ splice ];
	      } else if (oldStart == oldEnd)
	        return [ newSplice(currentStart, [], currentEnd - currentStart) ];
	
	      var ops = this.spliceOperationsFromEditDistances(
	          this.calcEditDistances(current, currentStart, currentEnd,
	                                 old, oldStart, oldEnd));
	
	      var splice = undefined;
	      var splices = [];
	      var index = currentStart;
	      var oldIndex = oldStart;
	      for (var i = 0; i < ops.length; i++) {
	        switch(ops[i]) {
	          case EDIT_LEAVE:
	            if (splice) {
	              splices.push(splice);
	              splice = undefined;
	            }
	
	            index++;
	            oldIndex++;
	            break;
	          case EDIT_UPDATE:
	            if (!splice)
	              splice = newSplice(index, [], 0);
	
	            splice.addedCount++;
	            index++;
	
	            splice.removed.push(old[oldIndex]);
	            oldIndex++;
	            break;
	          case EDIT_ADD:
	            if (!splice)
	              splice = newSplice(index, [], 0);
	
	            splice.addedCount++;
	            index++;
	            break;
	          case EDIT_DELETE:
	            if (!splice)
	              splice = newSplice(index, [], 0);
	
	            splice.removed.push(old[oldIndex]);
	            oldIndex++;
	            break;
	        }
	      }
	
	      if (splice) {
	        splices.push(splice);
	      }
	      return splices;
	    },
	
	    sharedPrefix: function(current, old, searchLength) {
	      for (var i = 0; i < searchLength; i++)
	        if (!this.equals(current[i], old[i]))
	          return i;
	      return searchLength;
	    },
	
	    sharedSuffix: function(current, old, searchLength) {
	      var index1 = current.length;
	      var index2 = old.length;
	      var count = 0;
	      while (count < searchLength && this.equals(current[--index1], old[--index2]))
	        count++;
	
	      return count;
	    },
	
	    calculateSplices: function(current, previous) {
	      return this.calcSplices(current, 0, current.length, previous, 0,
	                              previous.length);
	    },
	
	    equals: function(currentValue, previousValue) {
	      return currentValue === previousValue;
	    }
	  };
	
	  var arraySplice = new ArraySplice();
	
	  function calcSplices(current, currentStart, currentEnd,
	                       old, oldStart, oldEnd) {
	    return arraySplice.calcSplices(current, currentStart, currentEnd,
	                                   old, oldStart, oldEnd);
	  }
	
	  function intersect(start1, end1, start2, end2) {
	    // Disjoint
	    if (end1 < start2 || end2 < start1)
	      return -1;
	
	    // Adjacent
	    if (end1 == start2 || end2 == start1)
	      return 0;
	
	    // Non-zero intersect, span1 first
	    if (start1 < start2) {
	      if (end1 < end2)
	        return end1 - start2; // Overlap
	      else
	        return end2 - start2; // Contained
	    } else {
	      // Non-zero intersect, span2 first
	      if (end2 < end1)
	        return end2 - start1; // Overlap
	      else
	        return end1 - start1; // Contained
	    }
	  }
	
	  function mergeSplice(splices, index, removed, addedCount) {
	
	    var splice = newSplice(index, removed, addedCount);
	
	    var inserted = false;
	    var insertionOffset = 0;
	
	    for (var i = 0; i < splices.length; i++) {
	      var current = splices[i];
	      current.index += insertionOffset;
	
	      if (inserted)
	        continue;
	
	      var intersectCount = intersect(splice.index,
	                                     splice.index + splice.removed.length,
	                                     current.index,
	                                     current.index + current.addedCount);
	
	      if (intersectCount >= 0) {
	        // Merge the two splices
	
	        splices.splice(i, 1);
	        i--;
	
	        insertionOffset -= current.addedCount - current.removed.length;
	
	        splice.addedCount += current.addedCount - intersectCount;
	        var deleteCount = splice.removed.length +
	                          current.removed.length - intersectCount;
	
	        if (!splice.addedCount && !deleteCount) {
	          // merged splice is a noop. discard.
	          inserted = true;
	        } else {
	          var removed = current.removed;
	
	          if (splice.index < current.index) {
	            // some prefix of splice.removed is prepended to current.removed.
	            var prepend = splice.removed.slice(0, current.index - splice.index);
	            Array.prototype.push.apply(prepend, removed);
	            removed = prepend;
	          }
	
	          if (splice.index + splice.removed.length > current.index + current.addedCount) {
	            // some suffix of splice.removed is appended to current.removed.
	            var append = splice.removed.slice(current.index + current.addedCount - splice.index);
	            Array.prototype.push.apply(removed, append);
	          }
	
	          splice.removed = removed;
	          if (current.index < splice.index) {
	            splice.index = current.index;
	          }
	        }
	      } else if (splice.index < current.index) {
	        // Insert splice here.
	
	        inserted = true;
	
	        splices.splice(i, 0, splice);
	        i++;
	
	        var offset = splice.addedCount - splice.removed.length
	        current.index += offset;
	        insertionOffset += offset;
	      }
	    }
	
	    if (!inserted)
	      splices.push(splice);
	  }
	
	  function createInitialSplices(array, changeRecords) {
	    var splices = [];
	
	    for (var i = 0; i < changeRecords.length; i++) {
	      var record = changeRecords[i];
	      switch(record.type) {
	        case 'splice':
	          mergeSplice(splices, record.index, record.removed.slice(), record.addedCount);
	          break;
	        case 'add':
	        case 'update':
	        case 'delete':
	          if (!isIndex(record.name))
	            continue;
	          var index = toNumber(record.name);
	          if (index < 0)
	            continue;
	          mergeSplice(splices, index, [record.oldValue], 1);
	          break;
	        default:
	          console.error('Unexpected record type: ' + JSON.stringify(record));
	          break;
	      }
	    }
	
	    return splices;
	  }
	
	  function projectArraySplices(array, changeRecords) {
	    var splices = [];
	
	    createInitialSplices(array, changeRecords).forEach(function(splice) {
	      if (splice.addedCount == 1 && splice.removed.length == 1) {
	        if (splice.removed[0] !== array[splice.index])
	          splices.push(splice);
	
	        return
	      };
	
	      splices = splices.concat(calcSplices(array, splice.index, splice.index + splice.addedCount,
	                                           splice.removed, 0, splice.removed.length));
	    });
	
	    return splices;
	  }
	
	 // Export the observe-js object for **Node.js**, with
	// backwards-compatibility for the old `require()` API. If we're in
	// the browser, export as a global object.
	var expose = global;
	if (true) {
	if (typeof module !== 'undefined' && module.exports) {
	expose = exports = module.exports;
	}
	expose = exports;
	}
	expose.Observer = Observer;
	expose.Observer.runEOM_ = runEOM;
	expose.Observer.observerSentinel_ = observerSentinel; // for testing.
	expose.Observer.hasObjectObserve = hasObserve;
	expose.ArrayObserver = ArrayObserver;
	expose.ArrayObserver.calculateSplices = function(current, previous) {
	return arraySplice.calculateSplices(current, previous);
	};
	expose.Platform = global.Platform;
	expose.ArraySplice = ArraySplice;
	expose.ObjectObserver = ObjectObserver;
	})(typeof global !== 'undefined' && global && typeof module !== 'undefined' && module ? global : this || window);
	
	/* WEBPACK VAR INJECTION */}.call(exports, (function() { return this; }()), __webpack_require__(86)(module)))

/***/ },
/* 72 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Often used functions from underscore, pulled out for brevity.
	 * @module underscore
	 */
	
	var _ = {},
	    ArrayProto = Array.prototype,
	    FuncProto = Function.prototype,
	    nativeForEach = ArrayProto.forEach,
	    nativeMap = ArrayProto.map,
	    nativeReduce = ArrayProto.reduce,
	    nativeBind = FuncProto.bind,
	    slice = ArrayProto.slice,
	    breaker = {},
	    ctor = function () {};
	
	function keys(obj) {
	    if (Object.keys) {
	        return Object.keys(obj);
	    }
	    var keys = [];
	    for (var k in obj) {
	        if (obj.hasOwnProperty(k)) {
	            keys.push(k);
	        }
	    }
	    return keys;
	}
	
	_.keys = keys;
	
	_.each = _.forEach = function (obj, iterator, context) {
	    if (obj == null) return obj;
	    if (nativeForEach && obj.forEach === nativeForEach) {
	        obj.forEach(iterator, context);
	    } else if (obj.length === +obj.length) {
	        for (var i = 0, length = obj.length; i < length; i++) {
	            if (iterator.call(context, obj[i], i, obj) === breaker) return;
	        }
	    } else {
	        var keys = _.keys(obj);
	        for (var i = 0, length = keys.length; i < length; i++) {
	            if (iterator.call(context, obj[keys[i]], keys[i], obj) === breaker) return;
	        }
	    }
	    return obj;
	};
	
	// Return the results of applying the iterator to each element.
	// Delegates to **ECMAScript 5**'s native `map` if available.
	_.map = _.collect = function (obj, iterator, context) {
	    var results = [];
	    if (obj == null) return results;
	    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
	    _.each(obj, function (value, index, list) {
	        results.push(iterator.call(context, value, index, list));
	    });
	    return results;
	};
	
	// Internal function that returns an efficient (for current engines) version
	// of the passed-in callback, to be repeatedly applied in other Underscore
	// functions.
	var createCallback = function (func, context, argCount) {
	    if (context === void 0) return func;
	    switch (argCount == null ? 3 : argCount) {
	        case 1:
	            return function (value) {
	                return func.call(context, value);
	            };
	        case 2:
	            return function (value, other) {
	                return func.call(context, value, other);
	            };
	        case 3:
	            return function (value, index, collection) {
	                return func.call(context, value, index, collection);
	            };
	        case 4:
	            return function (accumulator, value, index, collection) {
	                return func.call(context, accumulator, value, index, collection);
	            };
	    }
	    return function () {
	        return func.apply(context, arguments);
	    };
	};
	
	// Run a function **n** times.
	_.times = function (n, iteratee, context) {
	    var accum = new Array(Math.max(0, n));
	    iteratee = createCallback(iteratee, context, 1);
	    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
	    return accum;
	};
	
	// Partially apply a function by creating a version that has had some of its
	// arguments pre-filled, without changing its dynamic `this` context. _ acts
	// as a placeholder, allowing any combination of arguments to be pre-filled.
	_.partial = function (func) {
	    var boundArgs = slice.call(arguments, 1);
	    return function () {
	        var position = 0;
	        var args = boundArgs.slice();
	        for (var i = 0, length = args.length; i < length; i++) {
	            if (args[i] === _) args[i] = arguments[position++];
	        }
	        while (position < arguments.length) args.push(arguments[position++]);
	        return func.apply(this, args);
	    };
	};
	
	// Convenience version of a common use case of `map`: fetching a property.
	_.pluck = function (obj, key) {
	    return _.map(obj, _.property(key));
	};
	
	var reduceError = 'Reduce of empty array with no initial value';
	
	// **Reduce** builds up a single result from a list of values, aka `inject`,
	// or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
	_.reduce = _.foldl = _.inject = function (obj, iterator, memo, context) {
	    var initial = arguments.length > 2;
	    if (obj == null) obj = [];
	    if (nativeReduce && obj.reduce === nativeReduce) {
	        if (context) iterator = _.bind(iterator, context);
	        return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
	    }
	    _.each(obj, function (value, index, list) {
	        if (!initial) {
	            memo = value;
	            initial = true;
	        } else {
	            memo = iterator.call(context, memo, value, index, list);
	        }
	    });
	    if (!initial) throw new TypeError(reduceError);
	    return memo;
	};
	
	_.property = function (key) {
	    return function (obj) {
	        return obj[key];
	    };
	};
	
	// Optimize `isFunction` if appropriate.
	if (true) {
	    _.isFunction = function (obj) {
	        return typeof obj === 'function';
	    };
	}
	
	_.isObject = function (obj) {
	    var type = typeof obj;
	    return type === 'function' || type === 'object' && !!obj;
	};
	
	// An internal function to generate lookup iterators.
	var lookupIterator = function (value) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return value;
	    return _.property(value);
	};
	
	// Sort the object's values by a criterion produced by an iterator.
	_.sortBy = function (obj, iterator, context) {
	    iterator = lookupIterator(iterator);
	    return _.pluck(_.map(obj, function (value, index, list) {
	        return {
	            value: value,
	            index: index,
	            criteria: iterator.call(context, value, index, list)
	        };
	    }).sort(function (left, right) {
	        var a = left.criteria;
	        var b = right.criteria;
	        if (a !== b) {
	            if (a > b || a === void 0) return 1;
	            if (a < b || b === void 0) return -1;
	        }
	        return left.index - right.index;
	    }), 'value');
	};
	
	
	// Create a function bound to a given object (assigning `this`, and arguments,
	// optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
	// available.
	_.bind = function (func, context) {
	    var args, bound;
	    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
	    if (!_.isFunction(func)) throw new TypeError;
	    args = slice.call(arguments, 2);
	    return bound = function () {
	        if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
	        ctor.prototype = func.prototype;
	        var self = new ctor;
	        ctor.prototype = null;
	        u
	        var result = func.apply(self, args.concat(slice.call(arguments)));
	        if (Object(result) === result) return result;
	        return self;
	    };
	};
	
	_.identity = function (value) {
	    return value;
	};
	
	_.zip = function (array) {
	    if (array == null) return [];
	    var length = _.max(arguments, 'length').length;
	    var results = Array(length);
	    for (var i = 0; i < length; i++) {
	        results[i] = _.pluck(arguments, i);
	    }
	    return results;
	};
	
	// Return the maximum element (or element-based computation).
	_.max = function (obj, iteratee, context) {
	    var result = -Infinity,
	        lastComputed = -Infinity,
	        value, computed;
	    if (iteratee == null && obj != null) {
	        obj = obj.length === +obj.length ? obj : _.values(obj);
	        for (var i = 0, length = obj.length; i < length; i++) {
	            value = obj[i];
	            if (value > result) {
	                result = value;
	            }
	        }
	    } else {
	        iteratee = _.iteratee(iteratee, context);
	        _.each(obj, function (value, index, list) {
	            computed = iteratee(value, index, list);
	            if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
	                result = value;
	                lastComputed = computed;
	            }
	        });
	    }
	    return result;
	};
	
	
	_.iteratee = function (value, context, argCount) {
	    if (value == null) return _.identity;
	    if (_.isFunction(value)) return createCallback(value, context, argCount);
	    if (_.isObject(value)) return _.matches(value);
	    return _.property(value);
	};
	
	_.pairs = function (obj) {
	    var keys = _.keys(obj);
	    var length = keys.length;
	    var pairs = Array(length);
	    for (var i = 0; i < length; i++) {
	        pairs[i] = [keys[i], obj[keys[i]]];
	    }
	    return pairs;
	};
	
	_.matches = function (attrs) {
	    var pairs = _.pairs(attrs),
	        length = pairs.length;
	    return function (obj) {
	        if (obj == null) return !length;
	        obj = new Object(obj);
	        for (var i = 0; i < length; i++) {
	            var pair = pairs[i],
	                key = pair[0];
	            if (pair[1] !== obj[key] || !(key in obj)) return false;
	        }
	        return true;
	    };
	};
	
	_.some = function (obj, predicate, context) {
	    if (obj == null) return false;
	    predicate = _.iteratee(predicate, context);
	    var keys = obj.length !== +obj.length && _.keys(obj),
	        length = (keys || obj).length,
	        index, currentKey;
	    for (index = 0; index < length; index++) {
	        currentKey = keys ? keys[index] : index;
	        if (predicate(obj[currentKey], currentKey, obj)) return true;
	    }
	    return false;
	};
	
	
	// Extend a given object with all the properties in passed-in object(s).
	_.extend = function (obj) {
	    if (!_.isObject(obj)) return obj;
	    var source, prop;
	    for (var i = 1, length = arguments.length; i < length; i++) {
	        source = arguments[i];
	        for (prop in source) {
	            //noinspection JSUnfilteredForInLoop
	            if (hasOwnProperty.call(source, prop)) {
	                //noinspection JSUnfilteredForInLoop
	                obj[prop] = source[prop];
	            }
	        }
	    }
	    return obj;
	};
	
	module.exports = _;

/***/ },
/* 73 */
/***/ function(module, exports, __webpack_require__) {

	var misc = __webpack_require__(74),
	    _ = __webpack_require__(72);
	
	function doParallel(fn) {
	    return function () {
	        var args = Array.prototype.slice.call(arguments);
	        return fn.apply(null, [each].concat(args));
	    };
	}
	
	var map = doParallel(_asyncMap);
	
	var root;
	
	function _map(arr, iterator) {
	    if (arr.map) {
	        return arr.map(iterator);
	    }
	    var results = [];
	    each(arr, function (x, i, a) {
	        results.push(iterator(x, i, a));
	    });
	    return results;
	}
	
	function _asyncMap(eachfn, arr, iterator, callback) {
	    arr = _map(arr, function (x, i) {
	        return {
	            index: i,
	            value: x
	        };
	    });
	    if (!callback) {
	        eachfn(arr, function (x, callback) {
	            iterator(x.value, function (err) {
	                callback(err);
	            });
	        });
	    } else {
	        var results = [];
	        eachfn(arr, function (x, callback) {
	            iterator(x.value, function (err, v) {
	                results[x.index] = v;
	                callback(err);
	            });
	        }, function (err) {
	            callback(err, results);
	        });
	    }
	}
	
	var mapSeries = doSeries(_asyncMap);
	
	function doSeries(fn) {
	    return function () {
	        var args = Array.prototype.slice.call(arguments);
	        return fn.apply(null, [eachSeries].concat(args));
	    };
	}
	
	
	function eachSeries(arr, iterator, callback) {
	    callback = callback || function () {};
	    if (!arr.length) {
	        return callback();
	    }
	    var completed = 0;
	    var iterate = function () {
	        iterator(arr[completed], function (err) {
	            if (err) {
	                callback(err);
	                callback = function () {};
	            } else {
	                completed += 1;
	                if (completed >= arr.length) {
	                    callback();
	                } else {
	                    iterate();
	                }
	            }
	        });
	    };
	    iterate();
	}
	
	
	function _each(arr, iterator) {
	    if (arr.forEach) {
	        return arr.forEach(iterator);
	    }
	    for (var i = 0; i < arr.length; i += 1) {
	        iterator(arr[i], i, arr);
	    }
	}
	
	function each(arr, iterator, callback) {
	    callback = callback || function () {};
	    if (!arr.length) {
	        return callback();
	    }
	    var completed = 0;
	    _each(arr, function (x) {
	        iterator(x, only_once(done));
	    });
	
	    function done(err) {
	        if (err) {
	            callback(err);
	            callback = function () {};
	        } else {
	            completed += 1;
	            if (completed >= arr.length) {
	                callback();
	            }
	        }
	    }
	}
	
	
	
	
	var _parallel = function (eachfn, tasks, callback) {
	    callback = callback || function () {};
	    if (misc.isArray(tasks)) {
	        eachfn.map(tasks, function (fn, callback) {
	            if (fn) {
	                fn(function (err) {
	                    var args = Array.prototype.slice.call(arguments, 1);
	                    if (args.length <= 1) {
	                        args = args[0];
	                    }
	                    callback.call(null, err, args);
	                });
	            }
	        }, callback);
	    } else {
	        var results = {};
	        eachfn.each(Object.keys(tasks), function (k, callback) {
	            tasks[k](function (err) {
	                var args = Array.prototype.slice.call(arguments, 1);
	                if (args.length <= 1) {
	                    args = args[0];
	                }
	                results[k] = args;
	                callback(err);
	            });
	        }, function (err) {
	            callback(err, results);
	        });
	    }
	};
	
	function series(tasks, callback) {
	    callback = callback || function () {};
	    if (misc.isArray(tasks)) {
	        mapSeries(tasks, function (fn, callback) {
	            if (fn) {
	                fn(function (err) {
	                    var args = Array.prototype.slice.call(arguments, 1);
	                    if (args.length <= 1) {
	                        args = args[0];
	                    }
	                    callback.call(null, err, args);
	                });
	            }
	        }, callback);
	    } else {
	        var results = {};
	        eachSeries(_.keys(tasks), function (k, callback) {
	            tasks[k](function (err) {
	                var args = Array.prototype.slice.call(arguments, 1);
	                if (args.length <= 1) {
	                    args = args[0];
	                }
	                results[k] = args;
	                callback(err);
	            });
	        }, function (err) {
	            callback(err, results);
	        });
	    }
	}
	
	function only_once(fn) {
	    var called = false;
	    return function () {
	        if (called) throw new Error("Callback was already called.");
	        called = true;
	        fn.apply(root, arguments);
	    }
	}
	
	function parallel(tasks, callback) {
	    _parallel({
	        map: map,
	        each: each
	    }, tasks, callback);
	}
	
	module.exports = {
	    series: series,
	    parallel: parallel
	};

/***/ },
/* 74 */
/***/ function(module, exports, __webpack_require__) {

	var observe = __webpack_require__(71).Platform,
	    _ = __webpack_require__(72),
	    InternalSiestaError = __webpack_require__(34).InternalSiestaError;
	
	// Used by paramNames function.
	var FN_ARGS = /^function\s*[^\(]*\(\s*([^\)]*)\)/m,
	    FN_ARG_SPLIT = /,/,
	    FN_ARG = /^\s*(_?)(.+?)\1\s*$/,
	    STRIP_COMMENTS = /((\/\/.*$)|(\/\*[\s\S]*?\*\/))/mg;
	
	function cb(callback, deferred) {
	    return function (err) {
	        if (callback) callback.apply(callback, arguments);
	        if (deferred) {
	            if (err) {
	                deferred.reject(err);
	            }
	            else {
	                deferred.resolve.apply(deferred, Array.prototype.slice.call(arguments, 1));
	            }
	        }
	    };
	}
	
	var isArrayShim = function (obj) {
	        return _.toString.call(obj) === '[object Array]';
	    },
	    isArray = Array.isArray || isArrayShim,
	    isString = function (o) {
	        return typeof o == 'string' || o instanceof String
	    };
	_.extend(module.exports, {
	    /**
	     * Performs dirty check/Object.observe callbacks depending on the browser.
	     *
	     * If Object.observe is present,
	     * @param callback
	     */
	    next: function (callback) {
	        observe.performMicrotaskCheckpoint();
	        setTimeout(callback);
	    },
	    /**
	     * Returns a handler that acts upon a callback or a promise depending on the result of a different callback.
	     * @param callback
	     * @param [deferred]
	     * @returns {Function}
	     */
	    cb: cb,
	    guid: (function () {
	        function s4() {
	            return Math.floor((1 + Math.random()) * 0x10000)
	                .toString(16)
	                .substring(1);
	        }
	
	        return function () {
	            return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
	                s4() + '-' + s4() + s4() + s4();
	        };
	    })(),
	    assert: function (condition, message, context) {
	        if (!condition) {
	            message = message || "Assertion failed";
	            context = context || {};
	            throw new InternalSiestaError(message, context);
	        }
	    },
	    thenBy: (function () {
	        /* mixin for the `thenBy` property */
	        function extend(f) {
	            f.thenBy = tb;
	            return f;
	        }
	
	        /* adds a secondary compare function to the target function (`this` context)
	         which is applied in case the first one returns 0 (equal)
	         returns a new compare function, which has a `thenBy` method as well */
	        function tb(y) {
	            var x = this;
	            return extend(function (a, b) {
	                return x(a, b) || y(a, b);
	            });
	        }
	
	        return extend;
	    })(),
	    defer: function (cb) {
	        var deferred;
	        cb = cb || function () {};
	        if (siesta.q) {
	            deferred = siesta.q.defer();
	            var reject = deferred.reject,
	                resolve = deferred.resolve;
	            _.extend(deferred, {
	                reject: function (err) {
	                    cb(err);
	                    reject.call(this, err);
	                },
	                resolve: function (res) {
	                    var thisArg = cb.__siesta_bound_object || cb;
	                    var args = Array.prototype.slice.call(arguments, 0);
	                    args.unshift(null);
	                    cb.apply(thisArg, args);
	                    resolve.apply(this, arguments);
	                },
	                finish: function (err, res) {
	                    if (err) {
	                        this.reject(err);
	                    }
	                    else {
	                        var args = Array.prototype.slice.call(arguments, 1);
	                        this.resolve.apply(this, args);
	                    }
	                }
	            });
	        }
	        else {
	            deferred = {
	                promise: undefined,
	                reject: function (err) {
	                    var thisArg = cb.__siesta_bound_object || cb;
	                    cb.apply(thisArg, arguments);
	                },
	                resolve: function (res) {
	                    var thisArg = cb.__siesta_bound_object || cb;
	                    var args = Array.prototype.slice.call(arguments, 0);
	                    args.unshift(null);
	                    cb.apply(thisArg, args);
	                },
	                finish: function (err, res) {
	                    var thisArg = cb.__siesta_bound_object || cb;
	                    cb.apply(thisArg, arguments)
	                }
	            }
	        }
	        return deferred;
	    },
	    defineSubProperty: function (property, subObj, innerProperty) {
	        return Object.defineProperty(this, property, {
	            get: function () {
	                if (innerProperty) {
	                    return subObj[innerProperty];
	                }
	                else {
	                    return subObj[property];
	                }
	            },
	            set: function (value) {
	                if (innerProperty) {
	                    subObj[innerProperty] = value;
	                }
	                else {
	                    subObj[property] = value;
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	    },
	    defineSubPropertyNoSet: function (property, subObj, innerProperty) {
	        return Object.defineProperty(this, property, {
	            get: function () {
	                if (innerProperty) {
	                    return subObj[innerProperty];
	                }
	                else {
	                    return subObj[property];
	                }
	            },
	            enumerable: true,
	            configurable: true
	        });
	    },
	    subProperties: function (obj, subObj, properties) {
	        if (!isArray(properties)) {
	            properties = Array.prototype.slice.call(arguments, 2);
	        }
	        for (var i = 0; i < properties.length; i++) {
	            (function (property) {
	                var opts = {
	                    set: false,
	                    name: property,
	                    property: property
	                };
	                if (!isString(property)) {
	                    _.extend(opts, property);
	                }
	                var desc = {
	                    get: function () {
	                        return subObj[opts.property];
	                    },
	                    enumerable: true,
	                    configurable: true
	                };
	                if (opts.set) {
	                    desc.set = function (v) {
	                        subObj[opts.property] = v;
	                    };
	                }
	                Object.defineProperty(obj, opts.name, desc);
	            })(properties[i]);
	        }
	    },
	    capitaliseFirstLetter: function (string) {
	        return string.charAt(0).toUpperCase() + string.slice(1);
	    },
	    extendFromOpts: function (obj, opts, defaults, errorOnUnknown) {
	        errorOnUnknown = errorOnUnknown == undefined ? true : errorOnUnknown;
	        if (errorOnUnknown) {
	            var defaultKeys = Object.keys(defaults),
	                optsKeys = Object.keys(opts);
	            var unknownKeys = optsKeys.filter(function (n) {
	                return defaultKeys.indexOf(n) == -1
	            });
	            if (unknownKeys.length) throw Error('Unknown options: ' + unknownKeys.toString());
	        }
	        // Apply any functions specified in the defaults.
	        _.each(Object.keys(defaults), function (k) {
	            var d = defaults[k];
	            if (typeof d == 'function') {
	                defaults[k] = d(opts[k]);
	                delete opts[k];
	            }
	        });
	        _.extend(defaults, opts);
	        _.extend(obj, defaults);
	    },
	    isString: isString,
	    isArray: isArray,
	    prettyPrint: function (o) {
	        return JSON.stringify(o, null, 4);
	    },
	    flattenArray: function (arr) {
	        return _.reduce(arr, function (memo, e) {
	            if (isArray(e)) {
	                memo = memo.concat(e);
	            } else {
	                memo.push(e);
	            }
	            return memo;
	        }, []);
	    },
	    unflattenArray: function (arr, modelArr) {
	        var n = 0;
	        var unflattened = [];
	        for (var i = 0; i < modelArr.length; i++) {
	            if (isArray(modelArr[i])) {
	                var newArr = [];
	                unflattened[i] = newArr;
	                for (var j = 0; j < modelArr[i].length; j++) {
	                    newArr.push(arr[n]);
	                    n++;
	                }
	            } else {
	                unflattened[i] = arr[n];
	                n++;
	            }
	        }
	        return unflattened;
	    },
	    /**
	     * Return the parameter names of a function.
	     * Note: adapted from AngularJS dependency injection :)
	     * @param fn
	     */
	    paramNames: function (fn) {
	        // TODO: Is there a more robust way of doing this?
	        var params = [],
	            fnText,
	            argDecl;
	        fnText = fn.toString().replace(STRIP_COMMENTS, '');
	        argDecl = fnText.match(FN_ARGS);
	
	        argDecl[1].split(FN_ARG_SPLIT).forEach(function (arg) {
	            arg.replace(FN_ARG, function (all, underscore, name) {
	                params.push(name);
	            });
	        });
	        return params;
	    }
	});

/***/ },
/* 75 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * Descriptors deal with the description of HTTP requests and are used by Siesta to determine what to do
	 * with HTTP request/response bodies.
	 * @module http
	 */
	
	var _internal = siesta._internal,
	    log = _internal.log,
	    InternalSiestaError = _internal.error.InternalSiestaError,
	    util = _internal.util,
	    assert = util.assert,
	    defineSubProperty = util.defineSubProperty,
	    CollectionRegistry = _internal.CollectionRegistry,
	    extend = _internal.extend,
	    _ = util._;
	
	var Logger = log.loggerWithName('Descriptor');
	
	var httpMethods = ['POST', 'PATCH', 'PUT', 'HEAD', 'GET', 'DELETE', 'OPTIONS', 'TRACE', 'CONNECT'];
	
	function resolveMethod(methods) {
	    // Convert wildcards into methods and ensure is an array of uppercase methods.
	    if (methods) {
	        if (methods == '*' || methods.indexOf('*') > -1) {
	            methods = httpMethods;
	        } else if (!util.isArray(methods)) {
	            methods = [methods];
	        }
	    } else {
	        methods = ['GET'];
	    }
	    return _.map(methods, function (x) {
	        return x.toUpperCase()
	    });
	}
	
	/**
	 * A descriptor 'describes' possible HTTP requests against an API, and is used to decide whether or not to
	 * intercept a HTTP request/response and perform a mapping.
	 *
	 * @constructor
	 * @param {Object} opts
	 */
	function Descriptor(opts) {
	    if (!this) {
	        return new Descriptor(opts);
	    }
	
	    this._rawOpts = extend(true, {}, opts);
	    this._opts = opts;
	
	    var processPath = function (raw) {
	        if (!(raw instanceof RegExp)) {
	            raw = new RegExp(raw, 'g');
	        }
	        return raw;
	    }.bind(this);
	
	    if (this._opts.path) {
	        var paths = this._opts.path;
	        if (!util.isArray(paths)) {
	            paths = [paths];
	        }
	
	        this._opts.path = [];
	
	        _.each(paths, function (p) {
	            this._opts.path.push(processPath.call(this, p));
	        }.bind(this));
	    } else {
	        this._opts.path = [''];
	    }
	
	    this._opts.method = resolveMethod(this._opts.method);
	
	    //this._resolveCollectionAndModel();
	
	    // If key path, convert data key path into an object that we can then use to traverse the HTTP bodies.
	    // otherwise leave as string or undefined.
	    var data = this._opts.data;
	    if (data) {
	        if (data.length) {
	            var root;
	            var arr = data.split('.');
	            if (arr.length == 1) {
	                root = arr[0];
	            } else {
	                var obj = {};
	                root = obj;
	                var previousKey = arr[0];
	                for (var i = 1; i < arr.length; i++) {
	                    var key = arr[i];
	                    if (i == (arr.length - 1)) {
	                        obj[previousKey] = key;
	                    } else {
	                        var newVar = {};
	                        obj[previousKey] = newVar;
	                        obj = newVar;
	                        previousKey = key;
	                    }
	                }
	            }
	            this._opts.data = root;
	        }
	    }
	
	    /**
	     * @name path
	     * @type {String}
	     */
	    defineSubProperty.call(this, 'path', this._opts);
	    defineSubProperty.call(this, 'method', this._opts);
	    defineSubProperty.call(this, 'data', this._opts);
	    defineSubProperty.call(this, 'transforms', this._opts);
	}
	
	_.extend(Descriptor.prototype, {
	    httpMethods: httpMethods,
	    _resolveCollectionAndModel: function () {
	        var collection;
	        var rawCollection = this._opts.collection,
	            rawModel = this._opts.model;
	        if (rawCollection) {
	            if (typeof rawCollection == 'string') {
	                collection = CollectionRegistry[rawCollection];
	            }
	            else {
	                collection = rawCollection;
	            }
	        }
	        else if (rawModel && !util.isString(rawModel)) {
	            collection = rawModel.collection;
	        }
	        else {
	            return 'Must pass collection or a model object';
	        }
	
	        var actualModel;
	        // Mappings can be passed as the actual mapping object or as a string (with API specified too)
	        if (rawModel) {
	            if (util.isString(rawModel)) {
	                actualModel = collection._models[rawModel];
	                if (actualModel) {
	                    this._opts.model = actualModel;
	                } else {
	                    return 'Model ' + rawModel + ' does not exist in collection';
	                }
	            }
	            else {
	                if (rawModel.collection != collection) {
	                    return 'Passed model is not part of the passed collection';
	                }
	                actualModel = rawModel;
	            }
	        }
	        else {
	            return 'Descriptors must be initialised with a model';
	        }
	
	        this.model = actualModel;
	        this.collection = collection;
	    },
	    /**
	     * Takes a regex path and returns true if matched
	     *
	     * @param  {String} path
	     * @return {boolean}
	     * @internal
	     * @example
	     * ```js
	     * var d = new Descriptor({
	     *     path: '/resource/(?P<id>)/'
	     * })
	     * var matched = d._matchPath('/resource/2');
	     * console.log(matched); // {id: '2'}
	     * ```
	     */
	    _matchPath: function (path) {
	        var i;
	        for (i = 0; i < this._opts.path.length; i++) {
	            var regExp = this._opts.path[i];
	            if (Logger.trace.isEnabled)
	                Logger.trace('Matching path', path, regExp.toString());
	            var matched = regExp.exec(path);
	            if (Logger.trace.isEnabled) {
	                if (matched) {
	                    Logger.trace('Matched path successfully', path, regExp.toString());
	                }
	                else {
	                    Logger.trace('Failed to match path', path, regExp.toString());
	                }
	            }
	            if (matched) return true;
	        }
	        return false;
	    },
	
	    /**
	     * Returns true if the descriptor accepts the HTTP method.
	     *
	     * @param  {String} method
	     * @return {boolean}
	     * @internal
	     * @example
	     * ```js
	     * var d = new Descriptor({
	     *     method: ['POST', 'PUT']
	     * });
	     * console.log(d._matchMethod('GET')); // false
	     * ```
	     */
	    _matchMethod: function (method) {
	        for (var i = 0; i < this.method.length; i++) {
	            if (method.toUpperCase() == this.method[i]) {
	                return true;
	            }
	        }
	        return false;
	    },
	    /**
	     * Performs a breadth-first search through data, embedding obj in the first leaf.
	     *
	     * @param  {Object} obj
	     * @param  {Object} data
	     * @return {Object}
	     */
	    bury: function (obj, data) {
	        var root = data;
	        var keys = Object.keys(data);
	        assert(keys.length == 1);
	        var key = keys[0];
	        var curr = data;
	        while (!(typeof(curr[key]) == 'string')) {
	            curr = curr[key];
	            keys = Object.keys(curr);
	            assert(keys.length == 1);
	            key = keys[0];
	        }
	        var newParent = curr[key];
	        var newObj = {};
	        curr[key] = newObj;
	        newObj[newParent] = obj;
	        return root;
	    },
	    _embedData: function (data) {
	        if (this.data) {
	            var nested;
	            if (typeof(this.data) == 'string') {
	                nested = {};
	                nested[this.data] = data;
	            } else {
	                nested = this.bury(data, extend(true, {}, this.data));
	            }
	            return nested;
	        } else {
	            return data;
	        }
	    },
	    /**
	     * If nested data has been specified in the descriptor, extract the data.
	     * @param  {Object} data
	     * @return {Object}
	     */
	    _extractData: function (data) {
	        if (Logger.debug.isEnabled)
	            Logger.debug('_extractData', data);
	        if (this.data) {
	            if (typeof(this.data) == 'string') {
	                return data[this.data];
	            } else {
	                var keys = Object.keys(this.data);
	                assert(keys.length == 1);
	                var currTheirs = data;
	                var currOurs = this.data;
	                while (typeof(currOurs) != 'string') {
	                    keys = Object.keys(currOurs);
	                    assert(keys.length == 1);
	                    var key = keys[0];
	                    currOurs = currOurs[key];
	                    currTheirs = currTheirs[key];
	                    if (!currTheirs) {
	                        break;
	                    }
	                }
	                return currTheirs ? currTheirs[currOurs] : null;
	            }
	        } else {
	            return data;
	        }
	    },
	    /**
	     * Returns this descriptors mapping if the request config matches.
	     * @param {Object} config
	     * @returns {Object}
	     */
	    _matchConfig: function (config) {
	        var matches = config.type ? this._matchMethod(config.type) : {};
	        if (matches) {
	            matches = config.url ? this._matchPath(config.url) : {};
	        }
	        return matches;
	    },
	
	    /**
	     * Returns data if the data matches, performing any extraction as specified in opts.data
	     *
	     * @param  {Object} data
	     * @return {Object}
	     */
	    _matchData: function (data) {
	        var extractedData = null;
	        if (this.data) {
	            if (data) {
	                extractedData = this._extractData(data);
	            }
	        } else {
	            extractedData = data;
	        }
	        return extractedData;
	    },
	    /**
	     * Check if the HTTP config and returned data match this descriptor definition.
	     *
	     * @param  {Object} config Config object for $.ajax and similar
	     * @param  {Object} data
	     * @return {Object} Extracted data
	     */
	    match: function (config, data) {
	        var regexMatches = this._matchConfig(config);
	        var matches = !!regexMatches;
	        var extractedData = false;
	        if (matches) {
	            extractedData = this._matchData(data);
	        }
	        return extractedData;
	    },
	
	    /**
	     * Apply any transforms.
	     * @param  {Object} data Serialised data.
	     * @return {Object} Serialised data with applied transformations.
	     */
	    _transformData: function (data) {
	        var transforms = this.transforms;
	        if (typeof(transforms) == 'function') {
	            data = transforms(data);
	        } else {
	            for (var attr in transforms) {
	                if (transforms.hasOwnProperty(attr)) {
	                    if (data[attr]) {
	                        var transform = transforms[attr];
	                        var val = data[attr];
	                        if (typeof(transform) == 'string') {
	                            var split = transform.split('.');
	                            delete data[attr];
	                            if (split.length == 1) {
	                                data[split[0]] = val;
	                            } else {
	                                data[split[0]] = {};
	                                var newVal = data[split[0]];
	                                for (var i = 1; i < split.length - 1; i++) {
	                                    var newAttr = split[i];
	                                    newVal[newAttr] = {};
	                                    newVal = newVal[newAttr];
	                                }
	                                newVal[split[split.length - 1]] = val;
	                            }
	                        } else if (typeof(transform) == 'function') {
	                            var transformed = transform(val);
	                            if (util.isArray(transformed)) {
	                                delete data[attr];
	                                data[transformed[0]] = transformed[1];
	                            } else {
	                                data[attr] = transformed;
	                            }
	                        } else {
	                            throw new InternalSiestaError('Invalid transformer');
	                        }
	                    }
	                }
	            }
	        }
	        return data;
	    }
	});
	
	exports.Descriptor = Descriptor;
	exports.resolveMethod = resolveMethod;

/***/ },
/* 76 */
/***/ function(module, exports, __webpack_require__) {

	var _internal = siesta._internal,
	    util = _internal.util,
	    _ = util._,
	    InternalSiestaError = _internal.error.InternalSiestaError,
	    log = _internal.log;
	
	var Logger = log.loggerWithName('Descriptor');
	
	/**
	 * @class Entry point for descriptor registration.
	 * @constructor
	 */
	function DescriptorRegistry() {
	    if (!this) {
	        return new DescriptorRegistry(opts);
	    }
	    this.requestDescriptors = {};
	    this.responseDescriptors = {};
	}
	
	function _registerDescriptor(descriptors, descriptor) {
	    var model = descriptor._opts.model,
	        collection = descriptor._opts.collection,
	        collectionName;
	    if (collection) {
	        if (util.isString(collection)) collectionName = collection;
	        else collectionName = collection.name;
	    }
	    else if (model) {
	        if (util.isString(model)) throw new InternalSiestaError('Not enough information to register the descriptor');
	        else collectionName = model.collection.name;
	    }
	    if (!descriptors[collectionName]) {
	        descriptors[collectionName] = [];
	    }
	    descriptors[collectionName].push(descriptor);
	}
	
	function _descriptorsForCollection(descriptors, collection) {
	    var descriptorsForCollection;
	    if (typeof(collection) == 'string') {
	        descriptorsForCollection = descriptors[collection] || [];
	    }
	    else {
	        descriptorsForCollection = (descriptors[collection.name] || []);
	    }
	    if (Logger.trace.isEnabled) {
	        Logger.trace('_descriptorsForCollection', {
	            collection: collection,
	            allDescriptors: descriptors,
	            descriptors: descriptorsForCollection
	        })
	    }
	    return descriptorsForCollection;
	}
	
	
	_.extend(DescriptorRegistry.prototype, {
	    registerRequestDescriptor: function (requestDescriptor) {
	        _registerDescriptor(this.requestDescriptors, requestDescriptor);
	    },
	    registerResponseDescriptor: function (responseDescriptor) {
	        if (Logger.trace.isEnabled)
	            Logger.trace('registerResponseDescriptor');
	        _registerDescriptor(this.responseDescriptors, responseDescriptor);
	    },
	    requestDescriptorsForCollection: function (collection) {
	        return _descriptorsForCollection(this.requestDescriptors, collection);
	    },
	    responseDescriptorsForCollection: function (collection) {
	        var descriptorsForCollection = _descriptorsForCollection(this.responseDescriptors, collection);
	        if (!descriptorsForCollection.length) {
	            if (Logger.debug.isEnabled)
	                Logger.debug('No response descriptors for collection ', {collection: collection});
	        }
	        return descriptorsForCollection;
	    },
	    reset: function () {
	        this.requestDescriptors = {};
	        this.responseDescriptors = {};
	    }
	});
	
	exports.DescriptorRegistry = new DescriptorRegistry();

/***/ },
/* 77 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module http
	 */
	
	var Descriptor = __webpack_require__(75).Descriptor,
	    Serialiser = __webpack_require__(79);
	
	var _internal = siesta._internal,
	    util = _internal.util,
	    _ = util._,
	    log = _internal.log,
	    defineSubProperty = util.defineSubProperty
	    ;
	
	var Logger = log.loggerWithName('Descriptor');
	
	/**
	 * @class Describes a HTTP request
	 * @param {Object} opts
	 */
	function RequestDescriptor(opts) {
	    if (!this) {
	        return new RequestDescriptor(opts);
	    }
	
	    Descriptor.call(this, opts);
	    if (this._opts['serializer']) {
	        this._opts.serialiser = this._opts['serializer'];
	    }
	
	    if (!this._opts.serialiser) {
	        this._opts.serialiser = Serialiser.depthSerializer(0);
	    }
	
	
	    defineSubProperty.call(this, 'serialiser', this._opts);
	    defineSubProperty.call(this, 'serializer', this._opts, 'serialiser');
	
	}
	
	RequestDescriptor.prototype = Object.create(Descriptor.prototype);
	
	_.extend(RequestDescriptor.prototype, {
	    _serialise: function (obj, callback) {
	        var deferred = util.defer(callback);
	        callback = deferred.finish.bind(deferred);
	        var self = this;
	        if (Logger.trace.isEnabled)
	            Logger.trace('_serialise');
	        var finished;
	        var data = this.serialiser(obj, function (err, data) {
	            if (!finished) {
	                data = self._transformData(data);
	                if (callback) callback(err, self._embedData(data));
	            }
	        });
	        if (data !== undefined) {
	            if (Logger.trace.isEnabled)
	                Logger.trace('serialiser doesnt use a callback');
	            finished = true;
	            data = self._transformData(data);
	            if (callback) callback(null, self._embedData(data));
	        }
	        else {
	            if (Logger.trace.isEnabled)
	                Logger.trace('serialiser uses a callback', this.serialiser);
	        }
	        return deferred.promise;
	    },
	    _dump: function (asJson) {
	        var obj = {};
	        obj.methods = this.method;
	        obj.model = this.model.name;
	        obj.path = this._rawOpts.path;
	        var serialiser;
	        if (typeof(this._rawOpts.serialiser) == 'function') {
	            serialiser = 'function () { ... }'
	        }
	        else {
	            serialiser = this._rawOpts.serialiser;
	        }
	        obj.serialiser = serialiser;
	        var transforms = {};
	        for (var f in this.transforms) {
	            if (this.transforms.hasOwnProperty(f)) {
	                var transform = this.transforms[f];
	                if (typeof(transform) == 'function') {
	                    transforms[f] = 'function () { ... }'
	                }
	                else {
	                    transforms[f] = this.transforms[f];
	                }
	            }
	        }
	        obj.transforms = transforms;
	        return asJson ? util.prettyPrint(obj) : obj;
	    }
	});
	
	exports.RequestDescriptor = RequestDescriptor;


/***/ },
/* 78 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module http
	 */
	
	
	var Descriptor = __webpack_require__(75).Descriptor,
	    _ = siesta._internal.util._;
	
	/**
	 * Describes what to do with a HTTP response.
	 * @constructor
	 * @implements {Descriptor}
	 * @param {Object} opts
	 */
	function ResponseDescriptor(opts) {
	    if (!this) {
	        return new ResponseDescriptor(opts);
	    }
	    Descriptor.call(this, opts);
	}
	
	ResponseDescriptor.prototype = Object.create(Descriptor.prototype);
	
	_.extend(ResponseDescriptor.prototype, {
	    _extractData: function (data) {
	        var extractedData = Descriptor.prototype._extractData.call(this, data);
	        if (extractedData) {
	            extractedData = this._transformData(extractedData);
	        }
	        return extractedData;
	    },
	    _matchData: function (data) {
	        var extractedData = Descriptor.prototype._matchData.call(this, data);
	        if (extractedData) {
	            extractedData = this._transformData(extractedData);
	        }
	        return extractedData;
	    },
	    _dump: function (asJson) {
	        var obj = {};
	        obj.methods = this.method;
	        obj.model = this.model.name;
	        obj.path = this._rawOpts.path;
	        var transforms = {};
	        for (var f in this.transforms) {
	            if (this.transforms.hasOwnProperty(f)) {
	                var transform = this.transforms[f];
	                if (typeof(transform) == 'function') {
	                    transforms[f] = 'function () { ... }'
	                }
	                else {
	                    transforms[f] = this.transforms[f];
	                }
	            }
	        }
	        obj.transforms = transforms;
	        return asJson ? util.prettyPrint(obj) : obj;
	    }
	});
	
	exports.ResponseDescriptor = ResponseDescriptor;

/***/ },
/* 79 */
/***/ function(module, exports, __webpack_require__) {

	/**
	 * @module http
	 */
	
	var _internal = siesta._internal;
	
	var log = _internal.log,
	    utils = _internal.util;
	var Logger = log.loggerWithName('Serialisation');
	var _ = utils._;
	
	
	/**
	 * Serialises an object into it's remote identifier (as defined by the mapping)
	 * @param  {ModelInstance} obj
	 * @return {String}
	 *
	 */
	function idSerialiser(obj) {
	    var idField = obj.model.id;
	    if (idField) {
	        return obj[idField] ? obj[idField] : null;
	    }
	    else {
	        if (Logger.debug.isEnabled)
	            Logger.debug('No idfield');
	        return undefined;
	    }
	}
	
	/**
	 * Serialises obj following relationships to specified depth.
	 * @param  {Integer}   depth
	 * @param  {ModelInstance}   obj
	 * @param  {Function} callback
	 */
	function depthSerialiser(depth, obj, callback) {
	    callback = callback || function () {};
	    if (Logger.trace.isEnabled)
	        Logger.trace('depthSerialiser');
	    var data = {};
	    _.each(obj._attributeNames, function (f) {
	        if (Logger.trace.isEnabled)
	            Logger.trace('field', f);
	        if (obj[f]) {
	            data[f] = obj[f];
	        }
	    });
	    var waiting = [],
	        errors = [],
	        result = {},
	        finished = [];
	    _.each(obj._relationshipNames, function (f) {
	        if (Logger.trace.isEnabled)
	            Logger.trace('relationshipField', f);
	        var proxy = obj.__proxies[f];
	        if (proxy.isForward) { // By default only forward relationships
	            if (Logger.debug.isEnabled)
	                Logger.debug(f);
	            waiting.push(f);
	            proxy.get(function (err, v) {
	                if (Logger.trace.isEnabled)
	                    Logger.trace('proxy.get', f);
	                if (Logger.debug.isEnabled)
	                    Logger.debug(f, v);
	                if (err) {
	                    errors.push(err);
	                    finished.push(f);
	                    result[f] = {err: err, v: v};
	                }
	                else if (v) {
	                    if (!depth) {
	                        finished.push(f);
	                        data[f] = v[obj.__proxies[f].forwardModel.id];
	                        result[f] = {err: err, v: v};
	                        if ((waiting.length == finished.length) && callback) {
	                            callback(errors.length ? errors : null, data, result);
	                        }
	                    }
	                    else {
	                        depthSerialiser(depth - 1, v, function (err, subData, resp) {
	                            if (err) {
	                                errors.push(err);
	                            }
	                            else {
	                                data[f] = subData;
	                            }
	                            finished.push(f);
	                            result[f] = {err: err, v: v, resp: resp};
	                            if ((waiting.length == finished.length) && callback) {
	                                callback(errors.length ? errors : null, data, result);
	                            }
	                        });
	                    }
	                }
	                else {
	                    if (Logger.debug.isEnabled)
	                        Logger.debug('no value for ' + f);
	                    finished.push(f);
	                    result[f] = {err: err, v: v};
	                    if ((waiting.length == finished.length) && callback) {
	                        callback(errors.length ? errors : null, data, result);
	                    }
	                }
	            });
	        }
	    });
	    if (!waiting.length) {
	        callback(null, data, {});
	    }
	}
	
	
	exports.depthSerialiser = function (depth) {
	    return _.partial(depthSerialiser, depth);
	};
	exports.depthSerializer = function (depth) {
	    return _.partial(depthSerialiser, depth);
	};
	exports.idSerializer = idSerialiser;
	exports.idSerialiser = idSerialiser;
	


/***/ },
/* 80 */
/***/ function(module, exports, __webpack_require__) {

	var _internal = siesta._internal,
	    log = _internal.log,
	    InternalSiestaError = _internal.error.InternalSiestaError,
	    util = _internal.util,
	    _ = util._;
	
	var querystring = __webpack_require__(87);
	
	function Paginator(opts) {
	    this.opts = {};
	    util.extendFromOpts(this.opts, opts, {
	        path: '/',
	        model: null,
	        page: 'page',
	        queryParams: true,
	        pageSize: 'pageSize',
	        numPages: 'numPages',
	        dataPath: 'data',
	        count: 'count',
	        type: 'GET',
	        dataType: 'json'
	    }, false);
	    _.extend(this, {
	        numPages: null,
	        count: null
	    });
	
	    this.validate();
	}
	
	_.extend(Paginator.prototype, {
	    _extract: function (path, data, jqXHR) {
	        if (path) {
	            if (typeof path == 'function') {
	                data = path(data, jqXHR);
	            }
	            else {
	                var splt = path.split('.');
	                for (var i = 0; i < splt.length; i++) {
	                    var key = splt[i];
	                    data = data[key];
	                }
	            }
	        }
	        return data;
	    },
	    _extractData: function (data, jqXHR) {
	        return this._extract(this.opts.dataPath, data, jqXHR);
	    },
	    _extractNumPages: function (data, jqXHR) {
	        return this._extract(this.opts.numPages, data, jqXHR);
	    },
	    _extractCount: function (data, jqXHR) {
	        return this._extract(this.opts.count, data, jqXHR);
	    },
	    /**
	     * var parser = document.createElement('a');
	     * parser.href = "http://example.com:3000/pathname/?search=test#hash";
	     * parser.href = URL;
	     * parser.protocol; // => "http:"
	     * parser.hostname; // => "example.com"
	     * parser.port;     // => "3000"
	     * parser.pathname; // => "/pathname/"
	     * parser.search;   // => "?search=test"
	     * parser.hash;     // => "#hash"
	     * parser.host;     // => "example.com:3000"
	     * @param {String} URL
	     * @private
	     */
	    _parseURL: function (URL) {
	        var parser = document.createElement('a');
	        parser.href = URL;
	        return parser;
	    },
	    page: function (optsOrCallback, callback) {
	        var self = this;
	        var opts = {};
	        if (typeof optsOrCallback == 'function') {
	            callback = optsOrCallback;
	        }
	        else if (optsOrCallback) {
	            opts = optsOrCallback;
	        }
	        var deferred = util.defer(callback);
	        var page = opts.page,
	            pageSize = opts.pageSize;
	        callback = deferred.finish.bind(deferred);
	        var ajax = siesta.ext.http.ajax,
	            ajaxOpts = _.extend({}, this.opts);
	        var collection = this.opts.model.collection,
	            url = collection.baseURL + this.opts.path;
	        if (this.opts.queryParams) {
	            var parser = this._parseURL(url);
	            var rawQuery = parser.search,
	                rawQuerySplt = rawQuery.split('?');
	            if (rawQuerySplt.length > 1) rawQuery = rawQuerySplt[1];
	            var query = querystring.parse(rawQuery);
	            if (page) {
	                query[this.opts.page] = page;
	            }
	            if (pageSize) {
	                query[this.opts.pageSize] = pageSize;
	            }
	            if (Object.keys(query).length) {
	                parser.search = '?' + querystring.stringify(query);
	            }
	            url = parser.href;
	        }
	        else {
	            var data = {};
	            if (page) {
	                data[this.opts.page] = page;
	            }
	            if (pageSize) {
	                data[this.opts.pageSize] = pageSize;
	            }
	            ajaxOpts.data = data
	        }
	        _.extend(ajaxOpts, {
	            url: url,
	            success: function (data, textStatus, jqXHR) {
	                var modelData = self._extractData(data, jqXHR),
	                    count = self._extractCount(data, jqXHR),
	                    numPages = self._extractNumPages(data, jqXHR);
	
	                self.opts.model.graph(modelData, function (err, modelInstances) {
	                    if (!err) {
	                        self.count = count;
	                        self.numPages = numPages;
	                        callback(null, modelInstances, {data: data, textStatus: textStatus, jqXHR: jqXHR});
	                    }
	                    else {
	                        callback(err);
	                    }
	                });
	            },
	            fail: callback
	        });
	        ajax(ajaxOpts);
	        return deferred.promise;
	    },
	    validate: function () {
	        if (!this.opts.model) throw new InternalSiestaError('Paginator must have a model');
	    }
	});
	
	module.exports = Paginator;

/***/ },
/* 81 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(85);


/***/ },
/* 82 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	function EventEmitter() {
	  this._events = this._events || {};
	  this._maxListeners = this._maxListeners || undefined;
	}
	module.exports = EventEmitter;
	
	// Backwards-compat with node 0.10.x
	EventEmitter.EventEmitter = EventEmitter;
	
	EventEmitter.prototype._events = undefined;
	EventEmitter.prototype._maxListeners = undefined;
	
	// By default EventEmitters will print a warning if more than 10 listeners are
	// added to it. This is a useful default which helps finding memory leaks.
	EventEmitter.defaultMaxListeners = 10;
	
	// Obviously not all Emitters should be limited to 10. This function allows
	// that to be increased. Set to zero for unlimited.
	EventEmitter.prototype.setMaxListeners = function(n) {
	  if (!isNumber(n) || n < 0 || isNaN(n))
	    throw TypeError('n must be a positive number');
	  this._maxListeners = n;
	  return this;
	};
	
	EventEmitter.prototype.emit = function(type) {
	  var er, handler, len, args, i, listeners;
	
	  if (!this._events)
	    this._events = {};
	
	  // If there is no 'error' event listener then throw.
	  if (type === 'error') {
	    if (!this._events.error ||
	        (isObject(this._events.error) && !this._events.error.length)) {
	      er = arguments[1];
	      if (er instanceof Error) {
	        throw er; // Unhandled 'error' event
	      }
	      throw TypeError('Uncaught, unspecified "error" event.');
	    }
	  }
	
	  handler = this._events[type];
	
	  if (isUndefined(handler))
	    return false;
	
	  if (isFunction(handler)) {
	    switch (arguments.length) {
	      // fast cases
	      case 1:
	        handler.call(this);
	        break;
	      case 2:
	        handler.call(this, arguments[1]);
	        break;
	      case 3:
	        handler.call(this, arguments[1], arguments[2]);
	        break;
	      // slower
	      default:
	        len = arguments.length;
	        args = new Array(len - 1);
	        for (i = 1; i < len; i++)
	          args[i - 1] = arguments[i];
	        handler.apply(this, args);
	    }
	  } else if (isObject(handler)) {
	    len = arguments.length;
	    args = new Array(len - 1);
	    for (i = 1; i < len; i++)
	      args[i - 1] = arguments[i];
	
	    listeners = handler.slice();
	    len = listeners.length;
	    for (i = 0; i < len; i++)
	      listeners[i].apply(this, args);
	  }
	
	  return true;
	};
	
	EventEmitter.prototype.addListener = function(type, listener) {
	  var m;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events)
	    this._events = {};
	
	  // To avoid recursion in the case that type === "newListener"! Before
	  // adding it to the listeners, first emit "newListener".
	  if (this._events.newListener)
	    this.emit('newListener', type,
	              isFunction(listener.listener) ?
	              listener.listener : listener);
	
	  if (!this._events[type])
	    // Optimize the case of one listener. Don't need the extra array object.
	    this._events[type] = listener;
	  else if (isObject(this._events[type]))
	    // If we've already got an array, just append.
	    this._events[type].push(listener);
	  else
	    // Adding the second element, need to change to array.
	    this._events[type] = [this._events[type], listener];
	
	  // Check for listener leak
	  if (isObject(this._events[type]) && !this._events[type].warned) {
	    var m;
	    if (!isUndefined(this._maxListeners)) {
	      m = this._maxListeners;
	    } else {
	      m = EventEmitter.defaultMaxListeners;
	    }
	
	    if (m && m > 0 && this._events[type].length > m) {
	      this._events[type].warned = true;
	      console.error('(node) warning: possible EventEmitter memory ' +
	                    'leak detected. %d listeners added. ' +
	                    'Use emitter.setMaxListeners() to increase limit.',
	                    this._events[type].length);
	      if (typeof console.trace === 'function') {
	        // not supported in IE 10
	        console.trace();
	      }
	    }
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.on = EventEmitter.prototype.addListener;
	
	EventEmitter.prototype.once = function(type, listener) {
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  var fired = false;
	
	  function g() {
	    this.removeListener(type, g);
	
	    if (!fired) {
	      fired = true;
	      listener.apply(this, arguments);
	    }
	  }
	
	  g.listener = listener;
	  this.on(type, g);
	
	  return this;
	};
	
	// emits a 'removeListener' event iff the listener was removed
	EventEmitter.prototype.removeListener = function(type, listener) {
	  var list, position, length, i;
	
	  if (!isFunction(listener))
	    throw TypeError('listener must be a function');
	
	  if (!this._events || !this._events[type])
	    return this;
	
	  list = this._events[type];
	  length = list.length;
	  position = -1;
	
	  if (list === listener ||
	      (isFunction(list.listener) && list.listener === listener)) {
	    delete this._events[type];
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	
	  } else if (isObject(list)) {
	    for (i = length; i-- > 0;) {
	      if (list[i] === listener ||
	          (list[i].listener && list[i].listener === listener)) {
	        position = i;
	        break;
	      }
	    }
	
	    if (position < 0)
	      return this;
	
	    if (list.length === 1) {
	      list.length = 0;
	      delete this._events[type];
	    } else {
	      list.splice(position, 1);
	    }
	
	    if (this._events.removeListener)
	      this.emit('removeListener', type, listener);
	  }
	
	  return this;
	};
	
	EventEmitter.prototype.removeAllListeners = function(type) {
	  var key, listeners;
	
	  if (!this._events)
	    return this;
	
	  // not listening for removeListener, no need to emit
	  if (!this._events.removeListener) {
	    if (arguments.length === 0)
	      this._events = {};
	    else if (this._events[type])
	      delete this._events[type];
	    return this;
	  }
	
	  // emit removeListener for all listeners on all events
	  if (arguments.length === 0) {
	    for (key in this._events) {
	      if (key === 'removeListener') continue;
	      this.removeAllListeners(key);
	    }
	    this.removeAllListeners('removeListener');
	    this._events = {};
	    return this;
	  }
	
	  listeners = this._events[type];
	
	  if (isFunction(listeners)) {
	    this.removeListener(type, listeners);
	  } else {
	    // LIFO order
	    while (listeners.length)
	      this.removeListener(type, listeners[listeners.length - 1]);
	  }
	  delete this._events[type];
	
	  return this;
	};
	
	EventEmitter.prototype.listeners = function(type) {
	  var ret;
	  if (!this._events || !this._events[type])
	    ret = [];
	  else if (isFunction(this._events[type]))
	    ret = [this._events[type]];
	  else
	    ret = this._events[type].slice();
	  return ret;
	};
	
	EventEmitter.listenerCount = function(emitter, type) {
	  var ret;
	  if (!emitter._events || !emitter._events[type])
	    ret = 0;
	  else if (isFunction(emitter._events[type]))
	    ret = 1;
	  else
	    ret = emitter._events[type].length;
	  return ret;
	};
	
	function isFunction(arg) {
	  return typeof arg === 'function';
	}
	
	function isNumber(arg) {
	  return typeof arg === 'number';
	}
	
	function isObject(arg) {
	  return typeof arg === 'object' && arg !== null;
	}
	
	function isUndefined(arg) {
	  return arg === void 0;
	}


/***/ },
/* 83 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - getProperties utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	/**
	 * ### .getProperties(object)
	 *
	 * This allows the retrieval of property names of an object, enumerable or not,
	 * inherited or not.
	 *
	 * @param {Object} object
	 * @returns {Array}
	 * @name getProperties
	 * @api public
	 */
	
	module.exports = function getProperties(object) {
	  var result = Object.getOwnPropertyNames(subject);
	
	  function addProperty(property) {
	    if (result.indexOf(property) === -1) {
	      result.push(property);
	    }
	  }
	
	  var proto = Object.getPrototypeOf(subject);
	  while (proto !== null) {
	    Object.getOwnPropertyNames(proto).forEach(addProperty);
	    proto = Object.getPrototypeOf(proto);
	  }
	
	  return result;
	};


/***/ },
/* 84 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * Chai - getEnumerableProperties utility
	 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	/**
	 * ### .getEnumerableProperties(object)
	 *
	 * This allows the retrieval of enumerable property names of an object,
	 * inherited or not.
	 *
	 * @param {Object} object
	 * @returns {Array}
	 * @name getEnumerableProperties
	 * @api public
	 */
	
	module.exports = function getEnumerableProperties(object) {
	  var result = [];
	  for (var name in object) {
	    result.push(name);
	  }
	  return result;
	};


/***/ },
/* 85 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * deep-eql
	 * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	/*!
	 * Module dependencies
	 */
	
	var type = __webpack_require__(91);
	
	/*!
	 * Buffer.isBuffer browser shim
	 */
	
	var Buffer;
	try { Buffer = __webpack_require__(90).Buffer; }
	catch(ex) {
	  Buffer = {};
	  Buffer.isBuffer = function() { return false; }
	}
	
	/*!
	 * Primary Export
	 */
	
	module.exports = deepEqual;
	
	/**
	 * Assert super-strict (egal) equality between
	 * two objects of any type.
	 *
	 * @param {Mixed} a
	 * @param {Mixed} b
	 * @param {Array} memoised (optional)
	 * @return {Boolean} equal match
	 */
	
	function deepEqual(a, b, m) {
	  if (sameValue(a, b)) {
	    return true;
	  } else if ('date' === type(a)) {
	    return dateEqual(a, b);
	  } else if ('regexp' === type(a)) {
	    return regexpEqual(a, b);
	  } else if (Buffer.isBuffer(a)) {
	    return bufferEqual(a, b);
	  } else if ('arguments' === type(a)) {
	    return argumentsEqual(a, b, m);
	  } else if (!typeEqual(a, b)) {
	    return false;
	  } else if (('object' !== type(a) && 'object' !== type(b))
	  && ('array' !== type(a) && 'array' !== type(b))) {
	    return sameValue(a, b);
	  } else {
	    return objectEqual(a, b, m);
	  }
	}
	
	/*!
	 * Strict (egal) equality test. Ensures that NaN always
	 * equals NaN and `-0` does not equal `+0`.
	 *
	 * @param {Mixed} a
	 * @param {Mixed} b
	 * @return {Boolean} equal match
	 */
	
	function sameValue(a, b) {
	  if (a === b) return a !== 0 || 1 / a === 1 / b;
	  return a !== a && b !== b;
	}
	
	/*!
	 * Compare the types of two given objects and
	 * return if they are equal. Note that an Array
	 * has a type of `array` (not `object`) and arguments
	 * have a type of `arguments` (not `array`/`object`).
	 *
	 * @param {Mixed} a
	 * @param {Mixed} b
	 * @return {Boolean} result
	 */
	
	function typeEqual(a, b) {
	  return type(a) === type(b);
	}
	
	/*!
	 * Compare two Date objects by asserting that
	 * the time values are equal using `saveValue`.
	 *
	 * @param {Date} a
	 * @param {Date} b
	 * @return {Boolean} result
	 */
	
	function dateEqual(a, b) {
	  if ('date' !== type(b)) return false;
	  return sameValue(a.getTime(), b.getTime());
	}
	
	/*!
	 * Compare two regular expressions by converting them
	 * to string and checking for `sameValue`.
	 *
	 * @param {RegExp} a
	 * @param {RegExp} b
	 * @return {Boolean} result
	 */
	
	function regexpEqual(a, b) {
	  if ('regexp' !== type(b)) return false;
	  return sameValue(a.toString(), b.toString());
	}
	
	/*!
	 * Assert deep equality of two `arguments` objects.
	 * Unfortunately, these must be sliced to arrays
	 * prior to test to ensure no bad behavior.
	 *
	 * @param {Arguments} a
	 * @param {Arguments} b
	 * @param {Array} memoize (optional)
	 * @return {Boolean} result
	 */
	
	function argumentsEqual(a, b, m) {
	  if ('arguments' !== type(b)) return false;
	  a = [].slice.call(a);
	  b = [].slice.call(b);
	  return deepEqual(a, b, m);
	}
	
	/*!
	 * Get enumerable properties of a given object.
	 *
	 * @param {Object} a
	 * @return {Array} property names
	 */
	
	function enumerable(a) {
	  var res = [];
	  for (var key in a) res.push(key);
	  return res;
	}
	
	/*!
	 * Simple equality for flat iterable objects
	 * such as Arrays or Node.js buffers.
	 *
	 * @param {Iterable} a
	 * @param {Iterable} b
	 * @return {Boolean} result
	 */
	
	function iterableEqual(a, b) {
	  if (a.length !==  b.length) return false;
	
	  var i = 0;
	  var match = true;
	
	  for (; i < a.length; i++) {
	    if (a[i] !== b[i]) {
	      match = false;
	      break;
	    }
	  }
	
	  return match;
	}
	
	/*!
	 * Extension to `iterableEqual` specifically
	 * for Node.js Buffers.
	 *
	 * @param {Buffer} a
	 * @param {Mixed} b
	 * @return {Boolean} result
	 */
	
	function bufferEqual(a, b) {
	  if (!Buffer.isBuffer(b)) return false;
	  return iterableEqual(a, b);
	}
	
	/*!
	 * Block for `objectEqual` ensuring non-existing
	 * values don't get in.
	 *
	 * @param {Mixed} object
	 * @return {Boolean} result
	 */
	
	function isValue(a) {
	  return a !== null && a !== undefined;
	}
	
	/*!
	 * Recursively check the equality of two objects.
	 * Once basic sameness has been established it will
	 * defer to `deepEqual` for each enumerable key
	 * in the object.
	 *
	 * @param {Mixed} a
	 * @param {Mixed} b
	 * @return {Boolean} result
	 */
	
	function objectEqual(a, b, m) {
	  if (!isValue(a) || !isValue(b)) {
	    return false;
	  }
	
	  if (a.prototype !== b.prototype) {
	    return false;
	  }
	
	  var i;
	  if (m) {
	    for (i = 0; i < m.length; i++) {
	      if ((m[i][0] === a && m[i][1] === b)
	      ||  (m[i][0] === b && m[i][1] === a)) {
	        return true;
	      }
	    }
	  } else {
	    m = [];
	  }
	
	  try {
	    var ka = enumerable(a);
	    var kb = enumerable(b);
	  } catch (ex) {
	    return false;
	  }
	
	  ka.sort();
	  kb.sort();
	
	  if (!iterableEqual(ka, kb)) {
	    return false;
	  }
	
	  m.push([ a, b ]);
	
	  var key;
	  for (i = ka.length - 1; i >= 0; i--) {
	    key = ka[i];
	    if (!deepEqual(a[key], b[key], m)) {
	      return false;
	    }
	  }
	
	  return true;
	}


/***/ },
/* 86 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = function(module) {
		if(!module.webpackPolyfill) {
			module.deprecate = function() {};
			module.paths = [];
			// module.parent = undefined by default
			module.children = [];
			module.webpackPolyfill = 1;
		}
		return module;
	}


/***/ },
/* 87 */
/***/ function(module, exports, __webpack_require__) {

	'use strict';
	
	exports.decode = exports.parse = __webpack_require__(88);
	exports.encode = exports.stringify = __webpack_require__(89);


/***/ },
/* 88 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	// If obj.hasOwnProperty has been overridden, then calling
	// obj.hasOwnProperty(prop) will break.
	// See: https://github.com/joyent/node/issues/1707
	function hasOwnProperty(obj, prop) {
	    return Object.prototype.hasOwnProperty.call(obj, prop);
	}
	
	module.exports = function (qs, sep, eq, options) {
	    sep = sep || '&';
	    eq = eq || '=';
	    var obj = {};
	
	    if (typeof qs !== 'string' || qs.length === 0) {
	        return obj;
	    }
	
	    var regexp = /\+/g;
	    qs = qs.split(sep);
	
	    var maxKeys = 1000;
	    if (options && typeof options.maxKeys === 'number') {
	        maxKeys = options.maxKeys;
	    }
	
	    var len = qs.length;
	    // maxKeys <= 0 means that we should not limit keys count
	    if (maxKeys > 0 && len > maxKeys) {
	        len = maxKeys;
	    }
	
	    for (var i = 0; i < len; ++i) {
	        var x = qs[i].replace(regexp, '%20'),
	            idx = x.indexOf(eq),
	            kstr, vstr, k, v;
	
	        if (idx >= 0) {
	            kstr = x.substr(0, idx);
	            vstr = x.substr(idx + 1);
	        } else {
	            kstr = x;
	            vstr = '';
	        }
	
	        k = decodeURIComponent(kstr);
	        v = decodeURIComponent(vstr);
	
	        if (!hasOwnProperty(obj, k)) {
	            obj[k] = v;
	        } else if (Array.isArray(obj[k])) {
	            obj[k].push(v);
	        } else {
	            obj[k] = [obj[k], v];
	        }
	    }
	
	    return obj;
	};


/***/ },
/* 89 */
/***/ function(module, exports, __webpack_require__) {

	// Copyright Joyent, Inc. and other Node contributors.
	//
	// Permission is hereby granted, free of charge, to any person obtaining a
	// copy of this software and associated documentation files (the
	// "Software"), to deal in the Software without restriction, including
	// without limitation the rights to use, copy, modify, merge, publish,
	// distribute, sublicense, and/or sell copies of the Software, and to permit
	// persons to whom the Software is furnished to do so, subject to the
	// following conditions:
	//
	// The above copyright notice and this permission notice shall be included
	// in all copies or substantial portions of the Software.
	//
	// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
	// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
	// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
	// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
	// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
	// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
	// USE OR OTHER DEALINGS IN THE SOFTWARE.
	
	'use strict';
	
	var stringifyPrimitive = function (v) {
	    switch (typeof v) {
	        case 'string':
	            return v;
	
	        case 'boolean':
	            return v ? 'true' : 'false';
	
	        case 'number':
	            return isFinite(v) ? v : '';
	
	        default:
	            return '';
	    }
	};
	
	module.exports = function (obj, sep, eq, name) {
	    sep = sep || '&';
	    eq = eq || '=';
	    if (obj === null) {
	        obj = undefined;
	    }
	
	    if (typeof obj === 'object') {
	        return Object.keys(obj).map(function (k) {
	            var ks = encodeURIComponent(stringifyPrimitive(k)) + eq;
	            if (Array.isArray(obj[k])) {
	                return obj[k].map(function (v) {
	                    return ks + encodeURIComponent(stringifyPrimitive(v));
	                }).join(sep);
	            } else {
	                return ks + encodeURIComponent(stringifyPrimitive(obj[k]));
	            }
	        }).join(sep);
	
	    }
	
	    if (!name) return '';
	    return encodeURIComponent(stringifyPrimitive(name)) + eq +
	        encodeURIComponent(stringifyPrimitive(obj));
	};


/***/ },
/* 90 */
/***/ function(module, exports, __webpack_require__) {

	/* WEBPACK VAR INJECTION */(function(Buffer) {/*!
	 * The buffer module from node.js, for the browser.
	 *
	 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
	 * @license  MIT
	 */
	
	var base64 = __webpack_require__(95)
	var ieee754 = __webpack_require__(93)
	var isArray = __webpack_require__(94)
	
	exports.Buffer = Buffer
	exports.SlowBuffer = Buffer
	exports.INSPECT_MAX_BYTES = 50
	Buffer.poolSize = 8192 // not used by this implementation
	
	var kMaxLength = 0x3fffffff
	
	/**
	 * If `Buffer.TYPED_ARRAY_SUPPORT`:
	 *   === true    Use Uint8Array implementation (fastest)
	 *   === false   Use Object implementation (most compatible, even IE6)
	 *
	 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
	 * Opera 11.6+, iOS 4.2+.
	 *
	 * Note:
	 *
	 * - Implementation must support adding new properties to `Uint8Array` instances.
	 *   Firefox 4-29 lacked support, fixed in Firefox 30+.
	 *   See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
	 *
	 *  - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
	 *
	 *  - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
	 *    incorrect length in some situations.
	 *
	 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they will
	 * get the Object implementation, which is slower but will work correctly.
	 */
	Buffer.TYPED_ARRAY_SUPPORT = (function () {
	  try {
	    var buf = new ArrayBuffer(0)
	    var arr = new Uint8Array(buf)
	    arr.foo = function () { return 42 }
	    return 42 === arr.foo() && // typed array instances can be augmented
	        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
	        new Uint8Array(1).subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
	  } catch (e) {
	    return false
	  }
	})()
	
	/**
	 * Class: Buffer
	 * =============
	 *
	 * The Buffer constructor returns instances of `Uint8Array` that are augmented
	 * with function properties for all the node `Buffer` API functions. We use
	 * `Uint8Array` so that square bracket notation works as expected -- it returns
	 * a single octet.
	 *
	 * By augmenting the instances, we can avoid modifying the `Uint8Array`
	 * prototype.
	 */
	function Buffer (subject, encoding, noZero) {
	  if (!(this instanceof Buffer))
	    return new Buffer(subject, encoding, noZero)
	
	  var type = typeof subject
	
	  // Find the length
	  var length
	  if (type === 'number')
	    length = subject > 0 ? subject >>> 0 : 0
	  else if (type === 'string') {
	    if (encoding === 'base64')
	      subject = base64clean(subject)
	    length = Buffer.byteLength(subject, encoding)
	  } else if (type === 'object' && subject !== null) { // assume object is array-like
	    if (subject.type === 'Buffer' && isArray(subject.data))
	      subject = subject.data
	    length = +subject.length > 0 ? Math.floor(+subject.length) : 0
	  } else
	    throw new TypeError('must start with number, buffer, array or string')
	
	  if (this.length > kMaxLength)
	    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
	      'size: 0x' + kMaxLength.toString(16) + ' bytes')
	
	  var buf
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    // Preferred: Return an augmented `Uint8Array` instance for best performance
	    buf = Buffer._augment(new Uint8Array(length))
	  } else {
	    // Fallback: Return THIS instance of Buffer (created by `new`)
	    buf = this
	    buf.length = length
	    buf._isBuffer = true
	  }
	
	  var i
	  if (Buffer.TYPED_ARRAY_SUPPORT && typeof subject.byteLength === 'number') {
	    // Speed optimization -- use set if we're copying from a typed array
	    buf._set(subject)
	  } else if (isArrayish(subject)) {
	    // Treat array-ish objects as a byte array
	    if (Buffer.isBuffer(subject)) {
	      for (i = 0; i < length; i++)
	        buf[i] = subject.readUInt8(i)
	    } else {
	      for (i = 0; i < length; i++)
	        buf[i] = ((subject[i] % 256) + 256) % 256
	    }
	  } else if (type === 'string') {
	    buf.write(subject, 0, encoding)
	  } else if (type === 'number' && !Buffer.TYPED_ARRAY_SUPPORT && !noZero) {
	    for (i = 0; i < length; i++) {
	      buf[i] = 0
	    }
	  }
	
	  return buf
	}
	
	Buffer.isBuffer = function (b) {
	  return !!(b != null && b._isBuffer)
	}
	
	Buffer.compare = function (a, b) {
	  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b))
	    throw new TypeError('Arguments must be Buffers')
	
	  var x = a.length
	  var y = b.length
	  for (var i = 0, len = Math.min(x, y); i < len && a[i] === b[i]; i++) {}
	  if (i !== len) {
	    x = a[i]
	    y = b[i]
	  }
	  if (x < y) return -1
	  if (y < x) return 1
	  return 0
	}
	
	Buffer.isEncoding = function (encoding) {
	  switch (String(encoding).toLowerCase()) {
	    case 'hex':
	    case 'utf8':
	    case 'utf-8':
	    case 'ascii':
	    case 'binary':
	    case 'base64':
	    case 'raw':
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      return true
	    default:
	      return false
	  }
	}
	
	Buffer.concat = function (list, totalLength) {
	  if (!isArray(list)) throw new TypeError('Usage: Buffer.concat(list[, length])')
	
	  if (list.length === 0) {
	    return new Buffer(0)
	  } else if (list.length === 1) {
	    return list[0]
	  }
	
	  var i
	  if (totalLength === undefined) {
	    totalLength = 0
	    for (i = 0; i < list.length; i++) {
	      totalLength += list[i].length
	    }
	  }
	
	  var buf = new Buffer(totalLength)
	  var pos = 0
	  for (i = 0; i < list.length; i++) {
	    var item = list[i]
	    item.copy(buf, pos)
	    pos += item.length
	  }
	  return buf
	}
	
	Buffer.byteLength = function (str, encoding) {
	  var ret
	  str = str + ''
	  switch (encoding || 'utf8') {
	    case 'ascii':
	    case 'binary':
	    case 'raw':
	      ret = str.length
	      break
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      ret = str.length * 2
	      break
	    case 'hex':
	      ret = str.length >>> 1
	      break
	    case 'utf8':
	    case 'utf-8':
	      ret = utf8ToBytes(str).length
	      break
	    case 'base64':
	      ret = base64ToBytes(str).length
	      break
	    default:
	      ret = str.length
	  }
	  return ret
	}
	
	// pre-set for values that may exist in the future
	Buffer.prototype.length = undefined
	Buffer.prototype.parent = undefined
	
	// toString(encoding, start=0, end=buffer.length)
	Buffer.prototype.toString = function (encoding, start, end) {
	  var loweredCase = false
	
	  start = start >>> 0
	  end = end === undefined || end === Infinity ? this.length : end >>> 0
	
	  if (!encoding) encoding = 'utf8'
	  if (start < 0) start = 0
	  if (end > this.length) end = this.length
	  if (end <= start) return ''
	
	  while (true) {
	    switch (encoding) {
	      case 'hex':
	        return hexSlice(this, start, end)
	
	      case 'utf8':
	      case 'utf-8':
	        return utf8Slice(this, start, end)
	
	      case 'ascii':
	        return asciiSlice(this, start, end)
	
	      case 'binary':
	        return binarySlice(this, start, end)
	
	      case 'base64':
	        return base64Slice(this, start, end)
	
	      case 'ucs2':
	      case 'ucs-2':
	      case 'utf16le':
	      case 'utf-16le':
	        return utf16leSlice(this, start, end)
	
	      default:
	        if (loweredCase)
	          throw new TypeError('Unknown encoding: ' + encoding)
	        encoding = (encoding + '').toLowerCase()
	        loweredCase = true
	    }
	  }
	}
	
	Buffer.prototype.equals = function (b) {
	  if(!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  return Buffer.compare(this, b) === 0
	}
	
	Buffer.prototype.inspect = function () {
	  var str = ''
	  var max = exports.INSPECT_MAX_BYTES
	  if (this.length > 0) {
	    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
	    if (this.length > max)
	      str += ' ... '
	  }
	  return '<Buffer ' + str + '>'
	}
	
	Buffer.prototype.compare = function (b) {
	  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
	  return Buffer.compare(this, b)
	}
	
	// `get` will be removed in Node 0.13+
	Buffer.prototype.get = function (offset) {
	  console.log('.get() is deprecated. Access using array indexes instead.')
	  return this.readUInt8(offset)
	}
	
	// `set` will be removed in Node 0.13+
	Buffer.prototype.set = function (v, offset) {
	  console.log('.set() is deprecated. Access using array indexes instead.')
	  return this.writeUInt8(v, offset)
	}
	
	function hexWrite (buf, string, offset, length) {
	  offset = Number(offset) || 0
	  var remaining = buf.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	
	  // must be an even number of digits
	  var strLen = string.length
	  if (strLen % 2 !== 0) throw new Error('Invalid hex string')
	
	  if (length > strLen / 2) {
	    length = strLen / 2
	  }
	  for (var i = 0; i < length; i++) {
	    var byte = parseInt(string.substr(i * 2, 2), 16)
	    if (isNaN(byte)) throw new Error('Invalid hex string')
	    buf[offset + i] = byte
	  }
	  return i
	}
	
	function utf8Write (buf, string, offset, length) {
	  var charsWritten = blitBuffer(utf8ToBytes(string), buf, offset, length)
	  return charsWritten
	}
	
	function asciiWrite (buf, string, offset, length) {
	  var charsWritten = blitBuffer(asciiToBytes(string), buf, offset, length)
	  return charsWritten
	}
	
	function binaryWrite (buf, string, offset, length) {
	  return asciiWrite(buf, string, offset, length)
	}
	
	function base64Write (buf, string, offset, length) {
	  var charsWritten = blitBuffer(base64ToBytes(string), buf, offset, length)
	  return charsWritten
	}
	
	function utf16leWrite (buf, string, offset, length) {
	  var charsWritten = blitBuffer(utf16leToBytes(string), buf, offset, length, 2)
	  return charsWritten
	}
	
	Buffer.prototype.write = function (string, offset, length, encoding) {
	  // Support both (string, offset, length, encoding)
	  // and the legacy (string, encoding, offset, length)
	  if (isFinite(offset)) {
	    if (!isFinite(length)) {
	      encoding = length
	      length = undefined
	    }
	  } else {  // legacy
	    var swap = encoding
	    encoding = offset
	    offset = length
	    length = swap
	  }
	
	  offset = Number(offset) || 0
	  var remaining = this.length - offset
	  if (!length) {
	    length = remaining
	  } else {
	    length = Number(length)
	    if (length > remaining) {
	      length = remaining
	    }
	  }
	  encoding = String(encoding || 'utf8').toLowerCase()
	
	  var ret
	  switch (encoding) {
	    case 'hex':
	      ret = hexWrite(this, string, offset, length)
	      break
	    case 'utf8':
	    case 'utf-8':
	      ret = utf8Write(this, string, offset, length)
	      break
	    case 'ascii':
	      ret = asciiWrite(this, string, offset, length)
	      break
	    case 'binary':
	      ret = binaryWrite(this, string, offset, length)
	      break
	    case 'base64':
	      ret = base64Write(this, string, offset, length)
	      break
	    case 'ucs2':
	    case 'ucs-2':
	    case 'utf16le':
	    case 'utf-16le':
	      ret = utf16leWrite(this, string, offset, length)
	      break
	    default:
	      throw new TypeError('Unknown encoding: ' + encoding)
	  }
	  return ret
	}
	
	Buffer.prototype.toJSON = function () {
	  return {
	    type: 'Buffer',
	    data: Array.prototype.slice.call(this._arr || this, 0)
	  }
	}
	
	function base64Slice (buf, start, end) {
	  if (start === 0 && end === buf.length) {
	    return base64.fromByteArray(buf)
	  } else {
	    return base64.fromByteArray(buf.slice(start, end))
	  }
	}
	
	function utf8Slice (buf, start, end) {
	  var res = ''
	  var tmp = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; i++) {
	    if (buf[i] <= 0x7F) {
	      res += decodeUtf8Char(tmp) + String.fromCharCode(buf[i])
	      tmp = ''
	    } else {
	      tmp += '%' + buf[i].toString(16)
	    }
	  }
	
	  return res + decodeUtf8Char(tmp)
	}
	
	function asciiSlice (buf, start, end) {
	  var ret = ''
	  end = Math.min(buf.length, end)
	
	  for (var i = start; i < end; i++) {
	    ret += String.fromCharCode(buf[i])
	  }
	  return ret
	}
	
	function binarySlice (buf, start, end) {
	  return asciiSlice(buf, start, end)
	}
	
	function hexSlice (buf, start, end) {
	  var len = buf.length
	
	  if (!start || start < 0) start = 0
	  if (!end || end < 0 || end > len) end = len
	
	  var out = ''
	  for (var i = start; i < end; i++) {
	    out += toHex(buf[i])
	  }
	  return out
	}
	
	function utf16leSlice (buf, start, end) {
	  var bytes = buf.slice(start, end)
	  var res = ''
	  for (var i = 0; i < bytes.length; i += 2) {
	    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
	  }
	  return res
	}
	
	Buffer.prototype.slice = function (start, end) {
	  var len = this.length
	  start = ~~start
	  end = end === undefined ? len : ~~end
	
	  if (start < 0) {
	    start += len;
	    if (start < 0)
	      start = 0
	  } else if (start > len) {
	    start = len
	  }
	
	  if (end < 0) {
	    end += len
	    if (end < 0)
	      end = 0
	  } else if (end > len) {
	    end = len
	  }
	
	  if (end < start)
	    end = start
	
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    return Buffer._augment(this.subarray(start, end))
	  } else {
	    var sliceLen = end - start
	    var newBuf = new Buffer(sliceLen, undefined, true)
	    for (var i = 0; i < sliceLen; i++) {
	      newBuf[i] = this[i + start]
	    }
	    return newBuf
	  }
	}
	
	/*
	 * Need to make sure that buffer isn't trying to write out of bounds.
	 */
	function checkOffset (offset, ext, length) {
	  if ((offset % 1) !== 0 || offset < 0)
	    throw new RangeError('offset is not uint')
	  if (offset + ext > length)
	    throw new RangeError('Trying to access beyond buffer length')
	}
	
	Buffer.prototype.readUInt8 = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 1, this.length)
	  return this[offset]
	}
	
	Buffer.prototype.readUInt16LE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 2, this.length)
	  return this[offset] | (this[offset + 1] << 8)
	}
	
	Buffer.prototype.readUInt16BE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 2, this.length)
	  return (this[offset] << 8) | this[offset + 1]
	}
	
	Buffer.prototype.readUInt32LE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 4, this.length)
	
	  return ((this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16)) +
	      (this[offset + 3] * 0x1000000)
	}
	
	Buffer.prototype.readUInt32BE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 4, this.length)
	
	  return (this[offset] * 0x1000000) +
	      ((this[offset + 1] << 16) |
	      (this[offset + 2] << 8) |
	      this[offset + 3])
	}
	
	Buffer.prototype.readInt8 = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 1, this.length)
	  if (!(this[offset] & 0x80))
	    return (this[offset])
	  return ((0xff - this[offset] + 1) * -1)
	}
	
	Buffer.prototype.readInt16LE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 2, this.length)
	  var val = this[offset] | (this[offset + 1] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt16BE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 2, this.length)
	  var val = this[offset + 1] | (this[offset] << 8)
	  return (val & 0x8000) ? val | 0xFFFF0000 : val
	}
	
	Buffer.prototype.readInt32LE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 4, this.length)
	
	  return (this[offset]) |
	      (this[offset + 1] << 8) |
	      (this[offset + 2] << 16) |
	      (this[offset + 3] << 24)
	}
	
	Buffer.prototype.readInt32BE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 4, this.length)
	
	  return (this[offset] << 24) |
	      (this[offset + 1] << 16) |
	      (this[offset + 2] << 8) |
	      (this[offset + 3])
	}
	
	Buffer.prototype.readFloatLE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, true, 23, 4)
	}
	
	Buffer.prototype.readFloatBE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 4, this.length)
	  return ieee754.read(this, offset, false, 23, 4)
	}
	
	Buffer.prototype.readDoubleLE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, true, 52, 8)
	}
	
	Buffer.prototype.readDoubleBE = function (offset, noAssert) {
	  if (!noAssert)
	    checkOffset(offset, 8, this.length)
	  return ieee754.read(this, offset, false, 52, 8)
	}
	
	function checkInt (buf, value, offset, ext, max, min) {
	  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
	  if (value > max || value < min) throw new TypeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new TypeError('index out of range')
	}
	
	Buffer.prototype.writeUInt8 = function (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert)
	    checkInt(this, value, offset, 1, 0xff, 0)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  this[offset] = value
	  return offset + 1
	}
	
	function objectWriteUInt16 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
	    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
	      (littleEndian ? i : 1 - i) * 8
	  }
	}
	
	Buffer.prototype.writeUInt16LE = function (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert)
	    checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else objectWriteUInt16(this, value, offset, true)
	  return offset + 2
	}
	
	Buffer.prototype.writeUInt16BE = function (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert)
	    checkInt(this, value, offset, 2, 0xffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else objectWriteUInt16(this, value, offset, false)
	  return offset + 2
	}
	
	function objectWriteUInt32 (buf, value, offset, littleEndian) {
	  if (value < 0) value = 0xffffffff + value + 1
	  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
	    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
	  }
	}
	
	Buffer.prototype.writeUInt32LE = function (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert)
	    checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset + 3] = (value >>> 24)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 1] = (value >>> 8)
	    this[offset] = value
	  } else objectWriteUInt32(this, value, offset, true)
	  return offset + 4
	}
	
	Buffer.prototype.writeUInt32BE = function (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert)
	    checkInt(this, value, offset, 4, 0xffffffff, 0)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else objectWriteUInt32(this, value, offset, false)
	  return offset + 4
	}
	
	Buffer.prototype.writeInt8 = function (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert)
	    checkInt(this, value, offset, 1, 0x7f, -0x80)
	  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
	  if (value < 0) value = 0xff + value + 1
	  this[offset] = value
	  return offset + 1
	}
	
	Buffer.prototype.writeInt16LE = function (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert)
	    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	  } else objectWriteUInt16(this, value, offset, true)
	  return offset + 2
	}
	
	Buffer.prototype.writeInt16BE = function (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert)
	    checkInt(this, value, offset, 2, 0x7fff, -0x8000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 8)
	    this[offset + 1] = value
	  } else objectWriteUInt16(this, value, offset, false)
	  return offset + 2
	}
	
	Buffer.prototype.writeInt32LE = function (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert)
	    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = value
	    this[offset + 1] = (value >>> 8)
	    this[offset + 2] = (value >>> 16)
	    this[offset + 3] = (value >>> 24)
	  } else objectWriteUInt32(this, value, offset, true)
	  return offset + 4
	}
	
	Buffer.prototype.writeInt32BE = function (value, offset, noAssert) {
	  value = +value
	  offset = offset >>> 0
	  if (!noAssert)
	    checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
	  if (value < 0) value = 0xffffffff + value + 1
	  if (Buffer.TYPED_ARRAY_SUPPORT) {
	    this[offset] = (value >>> 24)
	    this[offset + 1] = (value >>> 16)
	    this[offset + 2] = (value >>> 8)
	    this[offset + 3] = value
	  } else objectWriteUInt32(this, value, offset, false)
	  return offset + 4
	}
	
	function checkIEEE754 (buf, value, offset, ext, max, min) {
	  if (value > max || value < min) throw new TypeError('value is out of bounds')
	  if (offset + ext > buf.length) throw new TypeError('index out of range')
	}
	
	function writeFloat (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert)
	    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
	  ieee754.write(buf, value, offset, littleEndian, 23, 4)
	  return offset + 4
	}
	
	Buffer.prototype.writeFloatLE = function (value, offset, noAssert) {
	  return writeFloat(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeFloatBE = function (value, offset, noAssert) {
	  return writeFloat(this, value, offset, false, noAssert)
	}
	
	function writeDouble (buf, value, offset, littleEndian, noAssert) {
	  if (!noAssert)
	    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
	  ieee754.write(buf, value, offset, littleEndian, 52, 8)
	  return offset + 8
	}
	
	Buffer.prototype.writeDoubleLE = function (value, offset, noAssert) {
	  return writeDouble(this, value, offset, true, noAssert)
	}
	
	Buffer.prototype.writeDoubleBE = function (value, offset, noAssert) {
	  return writeDouble(this, value, offset, false, noAssert)
	}
	
	// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
	Buffer.prototype.copy = function (target, target_start, start, end) {
	  var source = this
	
	  if (!start) start = 0
	  if (!end && end !== 0) end = this.length
	  if (!target_start) target_start = 0
	
	  // Copy 0 bytes; we're done
	  if (end === start) return
	  if (target.length === 0 || source.length === 0) return
	
	  // Fatal error conditions
	  if (end < start) throw new TypeError('sourceEnd < sourceStart')
	  if (target_start < 0 || target_start >= target.length)
	    throw new TypeError('targetStart out of bounds')
	  if (start < 0 || start >= source.length) throw new TypeError('sourceStart out of bounds')
	  if (end < 0 || end > source.length) throw new TypeError('sourceEnd out of bounds')
	
	  // Are we oob?
	  if (end > this.length)
	    end = this.length
	  if (target.length - target_start < end - start)
	    end = target.length - target_start + start
	
	  var len = end - start
	
	  if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
	    for (var i = 0; i < len; i++) {
	      target[i + target_start] = this[i + start]
	    }
	  } else {
	    target._set(this.subarray(start, start + len), target_start)
	  }
	}
	
	// fill(value, start=0, end=buffer.length)
	Buffer.prototype.fill = function (value, start, end) {
	  if (!value) value = 0
	  if (!start) start = 0
	  if (!end) end = this.length
	
	  if (end < start) throw new TypeError('end < start')
	
	  // Fill 0 bytes; we're done
	  if (end === start) return
	  if (this.length === 0) return
	
	  if (start < 0 || start >= this.length) throw new TypeError('start out of bounds')
	  if (end < 0 || end > this.length) throw new TypeError('end out of bounds')
	
	  var i
	  if (typeof value === 'number') {
	    for (i = start; i < end; i++) {
	      this[i] = value
	    }
	  } else {
	    var bytes = utf8ToBytes(value.toString())
	    var len = bytes.length
	    for (i = start; i < end; i++) {
	      this[i] = bytes[i % len]
	    }
	  }
	
	  return this
	}
	
	/**
	 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
	 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
	 */
	Buffer.prototype.toArrayBuffer = function () {
	  if (typeof Uint8Array !== 'undefined') {
	    if (Buffer.TYPED_ARRAY_SUPPORT) {
	      return (new Buffer(this)).buffer
	    } else {
	      var buf = new Uint8Array(this.length)
	      for (var i = 0, len = buf.length; i < len; i += 1) {
	        buf[i] = this[i]
	      }
	      return buf.buffer
	    }
	  } else {
	    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
	  }
	}
	
	// HELPER FUNCTIONS
	// ================
	
	var BP = Buffer.prototype
	
	/**
	 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
	 */
	Buffer._augment = function (arr) {
	  arr.constructor = Buffer
	  arr._isBuffer = true
	
	  // save reference to original Uint8Array get/set methods before overwriting
	  arr._get = arr.get
	  arr._set = arr.set
	
	  // deprecated, will be removed in node 0.13+
	  arr.get = BP.get
	  arr.set = BP.set
	
	  arr.write = BP.write
	  arr.toString = BP.toString
	  arr.toLocaleString = BP.toString
	  arr.toJSON = BP.toJSON
	  arr.equals = BP.equals
	  arr.compare = BP.compare
	  arr.copy = BP.copy
	  arr.slice = BP.slice
	  arr.readUInt8 = BP.readUInt8
	  arr.readUInt16LE = BP.readUInt16LE
	  arr.readUInt16BE = BP.readUInt16BE
	  arr.readUInt32LE = BP.readUInt32LE
	  arr.readUInt32BE = BP.readUInt32BE
	  arr.readInt8 = BP.readInt8
	  arr.readInt16LE = BP.readInt16LE
	  arr.readInt16BE = BP.readInt16BE
	  arr.readInt32LE = BP.readInt32LE
	  arr.readInt32BE = BP.readInt32BE
	  arr.readFloatLE = BP.readFloatLE
	  arr.readFloatBE = BP.readFloatBE
	  arr.readDoubleLE = BP.readDoubleLE
	  arr.readDoubleBE = BP.readDoubleBE
	  arr.writeUInt8 = BP.writeUInt8
	  arr.writeUInt16LE = BP.writeUInt16LE
	  arr.writeUInt16BE = BP.writeUInt16BE
	  arr.writeUInt32LE = BP.writeUInt32LE
	  arr.writeUInt32BE = BP.writeUInt32BE
	  arr.writeInt8 = BP.writeInt8
	  arr.writeInt16LE = BP.writeInt16LE
	  arr.writeInt16BE = BP.writeInt16BE
	  arr.writeInt32LE = BP.writeInt32LE
	  arr.writeInt32BE = BP.writeInt32BE
	  arr.writeFloatLE = BP.writeFloatLE
	  arr.writeFloatBE = BP.writeFloatBE
	  arr.writeDoubleLE = BP.writeDoubleLE
	  arr.writeDoubleBE = BP.writeDoubleBE
	  arr.fill = BP.fill
	  arr.inspect = BP.inspect
	  arr.toArrayBuffer = BP.toArrayBuffer
	
	  return arr
	}
	
	var INVALID_BASE64_RE = /[^+\/0-9A-z]/g
	
	function base64clean (str) {
	  // Node strips out invalid characters like \n and \t from the string, base64-js does not
	  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
	  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
	  while (str.length % 4 !== 0) {
	    str = str + '='
	  }
	  return str
	}
	
	function stringtrim (str) {
	  if (str.trim) return str.trim()
	  return str.replace(/^\s+|\s+$/g, '')
	}
	
	function isArrayish (subject) {
	  return isArray(subject) || Buffer.isBuffer(subject) ||
	      subject && typeof subject === 'object' &&
	      typeof subject.length === 'number'
	}
	
	function toHex (n) {
	  if (n < 16) return '0' + n.toString(16)
	  return n.toString(16)
	}
	
	function utf8ToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    var b = str.charCodeAt(i)
	    if (b <= 0x7F) {
	      byteArray.push(b)
	    } else {
	      var start = i
	      if (b >= 0xD800 && b <= 0xDFFF) i++
	      var h = encodeURIComponent(str.slice(start, i+1)).substr(1).split('%')
	      for (var j = 0; j < h.length; j++) {
	        byteArray.push(parseInt(h[j], 16))
	      }
	    }
	  }
	  return byteArray
	}
	
	function asciiToBytes (str) {
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    // Node's code seems to be doing this and not & 0x7F..
	    byteArray.push(str.charCodeAt(i) & 0xFF)
	  }
	  return byteArray
	}
	
	function utf16leToBytes (str) {
	  var c, hi, lo
	  var byteArray = []
	  for (var i = 0; i < str.length; i++) {
	    c = str.charCodeAt(i)
	    hi = c >> 8
	    lo = c % 256
	    byteArray.push(lo)
	    byteArray.push(hi)
	  }
	
	  return byteArray
	}
	
	function base64ToBytes (str) {
	  return base64.toByteArray(str)
	}
	
	function blitBuffer (src, dst, offset, length, unitSize) {
	  if (unitSize) length -= length % unitSize;
	  for (var i = 0; i < length; i++) {
	    if ((i + offset >= dst.length) || (i >= src.length))
	      break
	    dst[i + offset] = src[i]
	  }
	  return i
	}
	
	function decodeUtf8Char (str) {
	  try {
	    return decodeURIComponent(str)
	  } catch (err) {
	    return String.fromCharCode(0xFFFD) // UTF 8 invalid char
	  }
	}
	
	/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(90).Buffer))

/***/ },
/* 91 */
/***/ function(module, exports, __webpack_require__) {

	module.exports = __webpack_require__(92);


/***/ },
/* 92 */
/***/ function(module, exports, __webpack_require__) {

	/*!
	 * type-detect
	 * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
	 * MIT Licensed
	 */
	
	/*!
	 * Primary Exports
	 */
	
	var exports = module.exports = getType;
	
	/*!
	 * Detectable javascript natives
	 */
	
	var natives = {
	    '[object Array]': 'array'
	  , '[object RegExp]': 'regexp'
	  , '[object Function]': 'function'
	  , '[object Arguments]': 'arguments'
	  , '[object Date]': 'date'
	};
	
	/**
	 * ### typeOf (obj)
	 *
	 * Use several different techniques to determine
	 * the type of object being tested.
	 *
	 *
	 * @param {Mixed} object
	 * @return {String} object type
	 * @api public
	 */
	
	function getType (obj) {
	  var str = Object.prototype.toString.call(obj);
	  if (natives[str]) return natives[str];
	  if (obj === null) return 'null';
	  if (obj === undefined) return 'undefined';
	  if (obj === Object(obj)) return 'object';
	  return typeof obj;
	}
	
	exports.Library = Library;
	
	/**
	 * ### Library
	 *
	 * Create a repository for custom type detection.
	 *
	 * ```js
	 * var lib = new type.Library;
	 * ```
	 *
	 */
	
	function Library () {
	  this.tests = {};
	}
	
	/**
	 * #### .of (obj)
	 *
	 * Expose replacement `typeof` detection to the library.
	 *
	 * ```js
	 * if ('string' === lib.of('hello world')) {
	 *   // ...
	 * }
	 * ```
	 *
	 * @param {Mixed} object to test
	 * @return {String} type
	 */
	
	Library.prototype.of = getType;
	
	/**
	 * #### .define (type, test)
	 *
	 * Add a test to for the `.test()` assertion.
	 *
	 * Can be defined as a regular expression:
	 *
	 * ```js
	 * lib.define('int', /^[0-9]+$/);
	 * ```
	 *
	 * ... or as a function:
	 *
	 * ```js
	 * lib.define('bln', function (obj) {
	 *   if ('boolean' === lib.of(obj)) return true;
	 *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];
	 *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();
	 *   return !! ~blns.indexOf(obj);
	 * });
	 * ```
	 *
	 * @param {String} type
	 * @param {RegExp|Function} test
	 * @api public
	 */
	
	Library.prototype.define = function (type, test) {
	  if (arguments.length === 1) return this.tests[type];
	  this.tests[type] = test;
	  return this;
	};
	
	/**
	 * #### .test (obj, test)
	 *
	 * Assert that an object is of type. Will first
	 * check natives, and if that does not pass it will
	 * use the user defined custom tests.
	 *
	 * ```js
	 * assert(lib.test('1', 'int'));
	 * assert(lib.test('yes', 'bln'));
	 * ```
	 *
	 * @param {Mixed} object
	 * @param {String} type
	 * @return {Boolean} result
	 * @api public
	 */
	
	Library.prototype.test = function (obj, type) {
	  if (type === getType(obj)) return true;
	  var test = this.tests[type];
	
	  if (test && 'regexp' === getType(test)) {
	    return test.test(obj);
	  } else if (test && 'function' === getType(test)) {
	    return test(obj);
	  } else {
	    throw new ReferenceError('Type test "' + type + '" not defined or invalid.');
	  }
	};


/***/ },
/* 93 */
/***/ function(module, exports, __webpack_require__) {

	exports.read = function(buffer, offset, isLE, mLen, nBytes) {
	  var e, m,
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      nBits = -7,
	      i = isLE ? (nBytes - 1) : 0,
	      d = isLE ? -1 : 1,
	      s = buffer[offset + i];
	
	  i += d;
	
	  e = s & ((1 << (-nBits)) - 1);
	  s >>= (-nBits);
	  nBits += eLen;
	  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8);
	
	  m = e & ((1 << (-nBits)) - 1);
	  e >>= (-nBits);
	  nBits += mLen;
	  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8);
	
	  if (e === 0) {
	    e = 1 - eBias;
	  } else if (e === eMax) {
	    return m ? NaN : ((s ? -1 : 1) * Infinity);
	  } else {
	    m = m + Math.pow(2, mLen);
	    e = e - eBias;
	  }
	  return (s ? -1 : 1) * m * Math.pow(2, e - mLen);
	};
	
	exports.write = function(buffer, value, offset, isLE, mLen, nBytes) {
	  var e, m, c,
	      eLen = nBytes * 8 - mLen - 1,
	      eMax = (1 << eLen) - 1,
	      eBias = eMax >> 1,
	      rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0),
	      i = isLE ? 0 : (nBytes - 1),
	      d = isLE ? 1 : -1,
	      s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;
	
	  value = Math.abs(value);
	
	  if (isNaN(value) || value === Infinity) {
	    m = isNaN(value) ? 1 : 0;
	    e = eMax;
	  } else {
	    e = Math.floor(Math.log(value) / Math.LN2);
	    if (value * (c = Math.pow(2, -e)) < 1) {
	      e--;
	      c *= 2;
	    }
	    if (e + eBias >= 1) {
	      value += rt / c;
	    } else {
	      value += rt * Math.pow(2, 1 - eBias);
	    }
	    if (value * c >= 2) {
	      e++;
	      c /= 2;
	    }
	
	    if (e + eBias >= eMax) {
	      m = 0;
	      e = eMax;
	    } else if (e + eBias >= 1) {
	      m = (value * c - 1) * Math.pow(2, mLen);
	      e = e + eBias;
	    } else {
	      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
	      e = 0;
	    }
	  }
	
	  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8);
	
	  e = (e << mLen) | m;
	  eLen += mLen;
	  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8);
	
	  buffer[offset + i - d] |= s * 128;
	};


/***/ },
/* 94 */
/***/ function(module, exports, __webpack_require__) {

	
	/**
	 * isArray
	 */
	
	var isArray = Array.isArray;
	
	/**
	 * toString
	 */
	
	var str = Object.prototype.toString;
	
	/**
	 * Whether or not the given `val`
	 * is an array.
	 *
	 * example:
	 *
	 *        isArray([]);
	 *        // > true
	 *        isArray(arguments);
	 *        // > false
	 *        isArray('');
	 *        // > false
	 *
	 * @param {mixed} val
	 * @return {bool}
	 */
	
	module.exports = isArray || function (val) {
	  return !! val && '[object Array]' == str.call(val);
	};


/***/ },
/* 95 */
/***/ function(module, exports, __webpack_require__) {

	var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
	
	;(function (exports) {
		'use strict';
	
	  var Arr = (typeof Uint8Array !== 'undefined')
	    ? Uint8Array
	    : Array
	
		var PLUS   = '+'.charCodeAt(0)
		var SLASH  = '/'.charCodeAt(0)
		var NUMBER = '0'.charCodeAt(0)
		var LOWER  = 'a'.charCodeAt(0)
		var UPPER  = 'A'.charCodeAt(0)
	
		function decode (elt) {
			var code = elt.charCodeAt(0)
			if (code === PLUS)
				return 62 // '+'
			if (code === SLASH)
				return 63 // '/'
			if (code < NUMBER)
				return -1 //no match
			if (code < NUMBER + 10)
				return code - NUMBER + 26 + 26
			if (code < UPPER + 26)
				return code - UPPER
			if (code < LOWER + 26)
				return code - LOWER + 26
		}
	
		function b64ToByteArray (b64) {
			var i, j, l, tmp, placeHolders, arr
	
			if (b64.length % 4 > 0) {
				throw new Error('Invalid string. Length must be a multiple of 4')
			}
	
			// the number of equal signs (place holders)
			// if there are two placeholders, than the two characters before it
			// represent one byte
			// if there is only one, then the three characters before it represent 2 bytes
			// this is just a cheap hack to not do indexOf twice
			var len = b64.length
			placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0
	
			// base64 is 4/3 + up to two characters of the original data
			arr = new Arr(b64.length * 3 / 4 - placeHolders)
	
			// if there are placeholders, only get up to the last complete 4 chars
			l = placeHolders > 0 ? b64.length - 4 : b64.length
	
			var L = 0
	
			function push (v) {
				arr[L++] = v
			}
	
			for (i = 0, j = 0; i < l; i += 4, j += 3) {
				tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
				push((tmp & 0xFF0000) >> 16)
				push((tmp & 0xFF00) >> 8)
				push(tmp & 0xFF)
			}
	
			if (placeHolders === 2) {
				tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
				push(tmp & 0xFF)
			} else if (placeHolders === 1) {
				tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
				push((tmp >> 8) & 0xFF)
				push(tmp & 0xFF)
			}
	
			return arr
		}
	
		function uint8ToBase64 (uint8) {
			var i,
				extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
				output = "",
				temp, length
	
			function encode (num) {
				return lookup.charAt(num)
			}
	
			function tripletToBase64 (num) {
				return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
			}
	
			// go through the array every three bytes, we'll deal with trailing stuff later
			for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
				temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
				output += tripletToBase64(temp)
			}
	
			// pad the end with zeros, but make sure to not forget the extra bytes
			switch (extraBytes) {
				case 1:
					temp = uint8[uint8.length - 1]
					output += encode(temp >> 2)
					output += encode((temp << 4) & 0x3F)
					output += '=='
					break
				case 2:
					temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
					output += encode(temp >> 10)
					output += encode((temp >> 4) & 0x3F)
					output += encode((temp << 2) & 0x3F)
					output += '='
					break
			}
	
			return output
		}
	
		exports.toByteArray = b64ToByteArray
		exports.fromByteArray = uint8ToBase64
	}(false ? (this.base64js = {}) : exports))


/***/ }
/******/ ])
//# sourceMappingURL=data:application/json;base64,